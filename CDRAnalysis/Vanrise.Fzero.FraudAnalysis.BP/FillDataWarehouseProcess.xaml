<Activity mc:Ignorable="sap sap2010 sads" x:Class="Vanrise.Fzero.FraudAnalysis.BP.FillDataWarehouseProcess"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:vb="clr-namespace:Vanrise.BusinessProcess;assembly=Vanrise.BusinessProcess"
 xmlns:vfce="clr-namespace:Vanrise.Fzero.CDRImport.Entities;assembly=Vanrise.Fzero.CDRImport.Entities"
 xmlns:vffba="clr-namespace:Vanrise.Fzero.FraudAnalysis.BP.Arguments;assembly=Vanrise.Fzero.FraudAnalysis.BP.Arguments"
 xmlns:vffba1="clr-namespace:Vanrise.Fzero.FraudAnalysis.BP.Activities;assembly=Vanrise.Fzero.FraudAnalysis.BP.Activities"
 xmlns:vffe="clr-namespace:Vanrise.Fzero.FraudAnalysis.Entities;assembly=Vanrise.Fzero.FraudAnalysis.Entities"
 xmlns:vq="clr-namespace:Vanrise.Queueing;assembly=Vanrise.Queueing"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="Input" Type="InArgument(vffba:FillDataWarehouseProcessInput)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap2010:WorkflowViewState.IdRef>Vanrise.Fzero.FraudAnalysis.BP.FillDataWarehouse_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>Vanrise.Queueing</x:String>
      <x:String>Vanrise.BusinessProcess</x:String>
      <x:String>Vanrise.Fzero.FraudAnalysis.BP.Arguments</x:String>
      <x:String>System.Activities</x:String>
      <x:String>Vanrise.Fzero.FraudAnalysis.Entities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Activities.Presentation</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.WFActivities</AssemblyReference>
      <AssemblyReference>Vanrise.Common</AssemblyReference>
      <AssemblyReference>Vanrise.Queueing</AssemblyReference>
      <AssemblyReference>Vanrise.Queueing.Entities</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Vanrise.Fzero.CDRImport.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.Fzero.FraudAnalysis.BP.Arguments</AssemblyReference>
      <AssemblyReference>Vanrise.Fzero.FraudAnalysis.BP.Activities</AssemblyReference>
      <AssemblyReference>Vanrise.Fzero.FraudAnalysis.Business</AssemblyReference>
      <AssemblyReference>Vanrise.Fzero.FraudAnalysis.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.Security.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.Security.Data</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>Vanrise.Fzero.FraudAnalysis.BP</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_1">
    <WriteLine sap2010:WorkflowViewState.IdRef="WriteLine_1" Text="Started executing workflow: FillDataWarehouse ..." />
    <Parallel DisplayName="Dimensions" sap2010:WorkflowViewState.IdRef="Parallel_2">
      <Parallel.Variables>
        <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="getDWTimeActivityStatus" />
        <Variable x:TypeArguments="vffe:DWTimeDictionary" Name="times" />
      </Parallel.Variables>
      <Sequence DisplayName="Common Dimensions" sap2010:WorkflowViewState.IdRef="Sequence_2">
        <Sequence.Variables>
          <Variable x:TypeArguments="vffe:DWDimensionDictionary" Name="callTypes" />
          <Variable x:TypeArguments="vffe:DWDimensionDictionary" Name="periods" />
          <Variable x:TypeArguments="vffe:DWDimensionDictionary" Name="strategyKinds" />
          <Variable x:TypeArguments="vffe:DWDimensionDictionary" Name="caseStatuses" />
          <Variable x:TypeArguments="vffe:DWDimensionDictionary" Name="filters" />
          <Variable x:TypeArguments="vffe:DWDimensionDictionary" Name="networkTypes" />
          <Variable x:TypeArguments="vffe:DWDimensionDictionary" Name="subscriberTypes" />
          <Variable x:TypeArguments="vffe:DWDimensionDictionary" Name="suspicionLevels" />
          <Variable x:TypeArguments="vffe:DWDimensionDictionary" Name="users" />
          <Variable x:TypeArguments="vffe:DWStrategyDictionary" Name="strategies" />
          <Variable x:TypeArguments="vffe:DWDimensionDictionary" Name="callClasses" />
          <Variable x:TypeArguments="scg:List(vffe:DWDimension)" Name="toBeInsertedCallTypes" />
          <Variable x:TypeArguments="scg:List(vffe:DWDimension)" Name="toBeInsertedCaseStatuses" />
          <Variable x:TypeArguments="scg:List(vffe:DWDimension)" Name="toBeInsertedPeriods" />
          <Variable x:TypeArguments="scg:List(vffe:DWDimension)" Name="toBeInsertedSubscriberTypes" />
          <Variable x:TypeArguments="scg:List(vffe:DWDimension)" Name="toBeInsertedUsers" />
          <Variable x:TypeArguments="scg:List(vffe:DWStrategy)" Name="toBeInsertedStrategies" />
          <Variable x:TypeArguments="scg:List(vffe:DWTime)" Name="toBeInsertedTimes" />
          <Variable x:TypeArguments="scg:List(vffe:DWDimension)" Name="toBeInsertedSuspicionLevels" />
          <Variable x:TypeArguments="scg:List(vffe:DWDimension)" Name="toBeInsertedCallClasses" />
          <Variable x:TypeArguments="scg:List(vffe:DWDimension)" Name="toBeInsertedFilters" />
          <Variable x:TypeArguments="scg:List(vffe:DWDimension)" Name="toBeInsertedNetworkTypes" />
          <Variable x:TypeArguments="scg:List(vffe:DWDimension)" Name="toBeInsertedStrategyKinds" />
          <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="checkDWDimensionsChangesActivityStatus" />
          <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="getDWDimensionsActivityStatus" />
        </Sequence.Variables>
        <vffba1:GetDWDimensions sap2010:WorkflowViewState.IdRef="GetDWDimensions_1">
          <vffba1:GetDWDimensions.CallClasses>
            <InOutArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpReference x:TypeArguments="vffe:DWDimensionDictionary">callClasses</mca:CSharpReference>
            </InOutArgument>
          </vffba1:GetDWDimensions.CallClasses>
          <vffba1:GetDWDimensions.CallTypes>
            <InOutArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpReference x:TypeArguments="vffe:DWDimensionDictionary">callTypes</mca:CSharpReference>
            </InOutArgument>
          </vffba1:GetDWDimensions.CallTypes>
          <vffba1:GetDWDimensions.CaseStatuses>
            <InOutArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpReference x:TypeArguments="vffe:DWDimensionDictionary">caseStatuses</mca:CSharpReference>
            </InOutArgument>
          </vffba1:GetDWDimensions.CaseStatuses>
          <vffba1:GetDWDimensions.Filters>
            <InOutArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpReference x:TypeArguments="vffe:DWDimensionDictionary">filters</mca:CSharpReference>
            </InOutArgument>
          </vffba1:GetDWDimensions.Filters>
          <vffba1:GetDWDimensions.FromDate>
            <InArgument x:TypeArguments="s:DateTime">
              <mca:CSharpValue x:TypeArguments="s:DateTime">Input.FromDate</mca:CSharpValue>
            </InArgument>
          </vffba1:GetDWDimensions.FromDate>
          <vffba1:GetDWDimensions.NetworkTypes>
            <InOutArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpReference x:TypeArguments="vffe:DWDimensionDictionary">networkTypes</mca:CSharpReference>
            </InOutArgument>
          </vffba1:GetDWDimensions.NetworkTypes>
          <vffba1:GetDWDimensions.Periods>
            <InOutArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpReference x:TypeArguments="vffe:DWDimensionDictionary">periods</mca:CSharpReference>
            </InOutArgument>
          </vffba1:GetDWDimensions.Periods>
          <vffba1:GetDWDimensions.Status>
            <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
              <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">getDWDimensionsActivityStatus</mca:CSharpReference>
            </OutArgument>
          </vffba1:GetDWDimensions.Status>
          <vffba1:GetDWDimensions.StrategyKinds>
            <InOutArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpReference x:TypeArguments="vffe:DWDimensionDictionary">strategyKinds</mca:CSharpReference>
            </InOutArgument>
          </vffba1:GetDWDimensions.StrategyKinds>
          <vffba1:GetDWDimensions.SubscriberTypes>
            <InOutArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpReference x:TypeArguments="vffe:DWDimensionDictionary">subscriberTypes</mca:CSharpReference>
            </InOutArgument>
          </vffba1:GetDWDimensions.SubscriberTypes>
          <vffba1:GetDWDimensions.SuspicionLevels>
            <InOutArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpReference x:TypeArguments="vffe:DWDimensionDictionary">suspicionLevels</mca:CSharpReference>
            </InOutArgument>
          </vffba1:GetDWDimensions.SuspicionLevels>
          <vffba1:GetDWDimensions.ToDate>
            <InArgument x:TypeArguments="s:DateTime">
              <mca:CSharpValue x:TypeArguments="s:DateTime">Input.ToDate</mca:CSharpValue>
            </InArgument>
          </vffba1:GetDWDimensions.ToDate>
          <vffba1:GetDWDimensions.Users>
            <InOutArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpReference x:TypeArguments="vffe:DWDimensionDictionary">users</mca:CSharpReference>
            </InOutArgument>
          </vffba1:GetDWDimensions.Users>
        </vffba1:GetDWDimensions>
        <vffba1:CheckDWDimensionsChanges sap2010:WorkflowViewState.IdRef="CheckDWDimensionsChanges_1">
          <vffba1:CheckDWDimensionsChanges.CallClasses>
            <InArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpValue x:TypeArguments="vffe:DWDimensionDictionary">callClasses</mca:CSharpValue>
            </InArgument>
          </vffba1:CheckDWDimensionsChanges.CallClasses>
          <vffba1:CheckDWDimensionsChanges.CallTypes>
            <InArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpValue x:TypeArguments="vffe:DWDimensionDictionary">callTypes</mca:CSharpValue>
            </InArgument>
          </vffba1:CheckDWDimensionsChanges.CallTypes>
          <vffba1:CheckDWDimensionsChanges.CaseStatuses>
            <InArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpValue x:TypeArguments="vffe:DWDimensionDictionary">caseStatuses</mca:CSharpValue>
            </InArgument>
          </vffba1:CheckDWDimensionsChanges.CaseStatuses>
          <vffba1:CheckDWDimensionsChanges.Filters>
            <InArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpValue x:TypeArguments="vffe:DWDimensionDictionary">filters</mca:CSharpValue>
            </InArgument>
          </vffba1:CheckDWDimensionsChanges.Filters>
          <vffba1:CheckDWDimensionsChanges.NetworkTypes>
            <InArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpValue x:TypeArguments="vffe:DWDimensionDictionary">networkTypes</mca:CSharpValue>
            </InArgument>
          </vffba1:CheckDWDimensionsChanges.NetworkTypes>
          <vffba1:CheckDWDimensionsChanges.Periods>
            <InArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpValue x:TypeArguments="vffe:DWDimensionDictionary">periods</mca:CSharpValue>
            </InArgument>
          </vffba1:CheckDWDimensionsChanges.Periods>
          <vffba1:CheckDWDimensionsChanges.PreviousActivityStatus>
            <InArgument x:TypeArguments="vb:AsyncActivityStatus">
              <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">getDWDimensionsActivityStatus</mca:CSharpValue>
            </InArgument>
          </vffba1:CheckDWDimensionsChanges.PreviousActivityStatus>
          <vffba1:CheckDWDimensionsChanges.Status>
            <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
              <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">checkDWDimensionsChangesActivityStatus</mca:CSharpReference>
            </OutArgument>
          </vffba1:CheckDWDimensionsChanges.Status>
          <vffba1:CheckDWDimensionsChanges.StrategyKinds>
            <InArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpValue x:TypeArguments="vffe:DWDimensionDictionary">strategyKinds</mca:CSharpValue>
            </InArgument>
          </vffba1:CheckDWDimensionsChanges.StrategyKinds>
          <vffba1:CheckDWDimensionsChanges.SubscriberTypes>
            <InArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpValue x:TypeArguments="vffe:DWDimensionDictionary">subscriberTypes</mca:CSharpValue>
            </InArgument>
          </vffba1:CheckDWDimensionsChanges.SubscriberTypes>
          <vffba1:CheckDWDimensionsChanges.SuspicionLevels>
            <InArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpValue x:TypeArguments="vffe:DWDimensionDictionary">suspicionLevels</mca:CSharpValue>
            </InArgument>
          </vffba1:CheckDWDimensionsChanges.SuspicionLevels>
          <vffba1:CheckDWDimensionsChanges.ToBeInsertedCallClasses>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedCallClasses</mca:CSharpReference>
            </InOutArgument>
          </vffba1:CheckDWDimensionsChanges.ToBeInsertedCallClasses>
          <vffba1:CheckDWDimensionsChanges.ToBeInsertedCallTypes>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedCallTypes</mca:CSharpReference>
            </InOutArgument>
          </vffba1:CheckDWDimensionsChanges.ToBeInsertedCallTypes>
          <vffba1:CheckDWDimensionsChanges.ToBeInsertedCaseStatuses>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedCaseStatuses</mca:CSharpReference>
            </InOutArgument>
          </vffba1:CheckDWDimensionsChanges.ToBeInsertedCaseStatuses>
          <vffba1:CheckDWDimensionsChanges.ToBeInsertedFilters>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedFilters</mca:CSharpReference>
            </InOutArgument>
          </vffba1:CheckDWDimensionsChanges.ToBeInsertedFilters>
          <vffba1:CheckDWDimensionsChanges.ToBeInsertedNetworkTypes>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedNetworkTypes</mca:CSharpReference>
            </InOutArgument>
          </vffba1:CheckDWDimensionsChanges.ToBeInsertedNetworkTypes>
          <vffba1:CheckDWDimensionsChanges.ToBeInsertedPeriods>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedPeriods</mca:CSharpReference>
            </InOutArgument>
          </vffba1:CheckDWDimensionsChanges.ToBeInsertedPeriods>
          <vffba1:CheckDWDimensionsChanges.ToBeInsertedStrategyKinds>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedStrategyKinds</mca:CSharpReference>
            </InOutArgument>
          </vffba1:CheckDWDimensionsChanges.ToBeInsertedStrategyKinds>
          <vffba1:CheckDWDimensionsChanges.ToBeInsertedSubscriberTypes>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedSubscriberTypes</mca:CSharpReference>
            </InOutArgument>
          </vffba1:CheckDWDimensionsChanges.ToBeInsertedSubscriberTypes>
          <vffba1:CheckDWDimensionsChanges.ToBeInsertedSuspicionLevels>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedSuspicionLevels</mca:CSharpReference>
            </InOutArgument>
          </vffba1:CheckDWDimensionsChanges.ToBeInsertedSuspicionLevels>
          <vffba1:CheckDWDimensionsChanges.ToBeInsertedUsers>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedUsers</mca:CSharpReference>
            </InOutArgument>
          </vffba1:CheckDWDimensionsChanges.ToBeInsertedUsers>
          <vffba1:CheckDWDimensionsChanges.Users>
            <InArgument x:TypeArguments="vffe:DWDimensionDictionary">
              <mca:CSharpValue x:TypeArguments="vffe:DWDimensionDictionary">users</mca:CSharpValue>
            </InArgument>
          </vffba1:CheckDWDimensionsChanges.Users>
        </vffba1:CheckDWDimensionsChanges>
        <vffba1:ApplyDWDimensionsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyDWDimensionsToDB_1">
          <vffba1:ApplyDWDimensionsToDB.PreviousActivityStatus>
            <InArgument x:TypeArguments="vb:AsyncActivityStatus">
              <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">checkDWDimensionsChangesActivityStatus</mca:CSharpValue>
            </InArgument>
          </vffba1:ApplyDWDimensionsToDB.PreviousActivityStatus>
          <vffba1:ApplyDWDimensionsToDB.ToBeInsertedCallClasses>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedCallClasses</mca:CSharpReference>
            </InOutArgument>
          </vffba1:ApplyDWDimensionsToDB.ToBeInsertedCallClasses>
          <vffba1:ApplyDWDimensionsToDB.ToBeInsertedCallTypes>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedCallTypes</mca:CSharpReference>
            </InOutArgument>
          </vffba1:ApplyDWDimensionsToDB.ToBeInsertedCallTypes>
          <vffba1:ApplyDWDimensionsToDB.ToBeInsertedCaseStatuses>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedCaseStatuses</mca:CSharpReference>
            </InOutArgument>
          </vffba1:ApplyDWDimensionsToDB.ToBeInsertedCaseStatuses>
          <vffba1:ApplyDWDimensionsToDB.ToBeInsertedFilters>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedFilters</mca:CSharpReference>
            </InOutArgument>
          </vffba1:ApplyDWDimensionsToDB.ToBeInsertedFilters>
          <vffba1:ApplyDWDimensionsToDB.ToBeInsertedNetworkTypes>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedNetworkTypes</mca:CSharpReference>
            </InOutArgument>
          </vffba1:ApplyDWDimensionsToDB.ToBeInsertedNetworkTypes>
          <vffba1:ApplyDWDimensionsToDB.ToBeInsertedPeriods>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedPeriods</mca:CSharpReference>
            </InOutArgument>
          </vffba1:ApplyDWDimensionsToDB.ToBeInsertedPeriods>
          <vffba1:ApplyDWDimensionsToDB.ToBeInsertedStrategyKinds>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedStrategyKinds</mca:CSharpReference>
            </InOutArgument>
          </vffba1:ApplyDWDimensionsToDB.ToBeInsertedStrategyKinds>
          <vffba1:ApplyDWDimensionsToDB.ToBeInsertedSubscriberTypes>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedSubscriberTypes</mca:CSharpReference>
            </InOutArgument>
          </vffba1:ApplyDWDimensionsToDB.ToBeInsertedSubscriberTypes>
          <vffba1:ApplyDWDimensionsToDB.ToBeInsertedSuspicionLevels>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedSuspicionLevels</mca:CSharpReference>
            </InOutArgument>
          </vffba1:ApplyDWDimensionsToDB.ToBeInsertedSuspicionLevels>
          <vffba1:ApplyDWDimensionsToDB.ToBeInsertedUsers>
            <InOutArgument x:TypeArguments="scg:List(vffe:DWDimension)">
              <mca:CSharpReference x:TypeArguments="scg:List(vffe:DWDimension)">toBeInsertedUsers</mca:CSharpReference>
            </InOutArgument>
          </vffba1:ApplyDWDimensionsToDB.ToBeInsertedUsers>
        </vffba1:ApplyDWDimensionsToDB>
      </Sequence>
      <Sequence DisplayName="Strategy" sap2010:WorkflowViewState.IdRef="Sequence_3" />
      <vffba1:GetDWTime sap2010:WorkflowViewState.IdRef="GetDWTime_1">
        <vffba1:GetDWTime.FromDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">Input.FromDate</mca:CSharpValue>
          </InArgument>
        </vffba1:GetDWTime.FromDate>
        <vffba1:GetDWTime.Status>
          <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">getDWTimeActivityStatus</mca:CSharpReference>
          </OutArgument>
        </vffba1:GetDWTime.Status>
        <vffba1:GetDWTime.Times>
          <InOutArgument x:TypeArguments="vffe:DWTimeDictionary">
            <mca:CSharpReference x:TypeArguments="vffe:DWTimeDictionary">times</mca:CSharpReference>
          </InOutArgument>
        </vffba1:GetDWTime.Times>
        <vffba1:GetDWTime.ToDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">Input.ToDate</mca:CSharpValue>
          </InArgument>
        </vffba1:GetDWTime.ToDate>
      </vffba1:GetDWTime>
    </Parallel>
    <Parallel DisplayName="Facts" sap2010:WorkflowViewState.IdRef="Parallel_1">
      <Parallel.Variables>
        <Variable x:TypeArguments="vq:BaseQueue(vfce:CDRBatch)" Name="cdrQueue" />
        <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="loadCDRActivityStatus" />
        <Variable x:TypeArguments="vq:BaseQueue(vffe:DWCDRBatch)" Name="dwCDRQueue" />
        <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="fillFactValuesActivityStatus" />
        <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="prepareDWCDRsForDBApplyActivityStatus" />
        <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="applyDWCDRsToDBActivityStatus" />
        <Variable x:TypeArguments="vq:BaseQueue(x:Object)" Name="preparedDWCDRQueue" />
      </Parallel.Variables>
      <vffba1:LoadCDRs sap2010:WorkflowViewState.IdRef="LoadCDRs_1">
        <vffba1:LoadCDRs.FromDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">Input.FromDate</mca:CSharpValue>
          </InArgument>
        </vffba1:LoadCDRs.FromDate>
        <vffba1:LoadCDRs.OutputQueue>
          <InOutArgument x:TypeArguments="vq:BaseQueue(vfce:CDRBatch)">
            <mca:CSharpReference x:TypeArguments="vq:BaseQueue(vfce:CDRBatch)">cdrQueue</mca:CSharpReference>
          </InOutArgument>
        </vffba1:LoadCDRs.OutputQueue>
        <vffba1:LoadCDRs.Status>
          <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">loadCDRActivityStatus</mca:CSharpReference>
          </OutArgument>
        </vffba1:LoadCDRs.Status>
        <vffba1:LoadCDRs.ToDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">Input.ToDate</mca:CSharpValue>
          </InArgument>
        </vffba1:LoadCDRs.ToDate>
      </vffba1:LoadCDRs>
      <vffba1:FillFactValues sap2010:WorkflowViewState.IdRef="FillFactValues_1">
        <vffba1:FillFactValues.InputQueue>
          <InOutArgument x:TypeArguments="vq:BaseQueue(vfce:CDRBatch)">
            <mca:CSharpReference x:TypeArguments="vq:BaseQueue(vfce:CDRBatch)">cdrQueue</mca:CSharpReference>
          </InOutArgument>
        </vffba1:FillFactValues.InputQueue>
        <vffba1:FillFactValues.OutputQueue>
          <InOutArgument x:TypeArguments="vq:BaseQueue(vffe:DWCDRBatch)">
            <mca:CSharpReference x:TypeArguments="vq:BaseQueue(vffe:DWCDRBatch)">dwCDRQueue</mca:CSharpReference>
          </InOutArgument>
        </vffba1:FillFactValues.OutputQueue>
        <vffba1:FillFactValues.PreviousActivityStatus>
          <InArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">loadCDRActivityStatus</mca:CSharpValue>
          </InArgument>
        </vffba1:FillFactValues.PreviousActivityStatus>
        <vffba1:FillFactValues.Status>
          <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">fillFactValuesActivityStatus</mca:CSharpReference>
          </OutArgument>
        </vffba1:FillFactValues.Status>
      </vffba1:FillFactValues>
      <vffba1:PrepareDWCDRsForDBApply sap2010:WorkflowViewState.IdRef="PrepareDWCDRsForDBApply_1">
        <vffba1:PrepareDWCDRsForDBApply.InputQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(vffe:DWCDRBatch)">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(vffe:DWCDRBatch)">dwCDRQueue</mca:CSharpValue>
          </InArgument>
        </vffba1:PrepareDWCDRsForDBApply.InputQueue>
        <vffba1:PrepareDWCDRsForDBApply.OutputQueue>
          <InOutArgument x:TypeArguments="vq:BaseQueue(x:Object)">
            <mca:CSharpReference x:TypeArguments="vq:BaseQueue(x:Object)">preparedDWCDRQueue</mca:CSharpReference>
          </InOutArgument>
        </vffba1:PrepareDWCDRsForDBApply.OutputQueue>
        <vffba1:PrepareDWCDRsForDBApply.PreviousActivityStatus>
          <InArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">fillFactValuesActivityStatus</mca:CSharpValue>
          </InArgument>
        </vffba1:PrepareDWCDRsForDBApply.PreviousActivityStatus>
        <vffba1:PrepareDWCDRsForDBApply.Status>
          <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">prepareDWCDRsForDBApplyActivityStatus</mca:CSharpReference>
          </OutArgument>
        </vffba1:PrepareDWCDRsForDBApply.Status>
      </vffba1:PrepareDWCDRsForDBApply>
      <vffba1:ApplyDWCDRsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyDWCDRsToDB_1">
        <vffba1:ApplyDWCDRsToDB.InputQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(x:Object)">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(x:Object)">preparedDWCDRQueue</mca:CSharpValue>
          </InArgument>
        </vffba1:ApplyDWCDRsToDB.InputQueue>
        <vffba1:ApplyDWCDRsToDB.PreviousActivityStatus>
          <InArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">prepareDWCDRsForDBApplyActivityStatus</mca:CSharpValue>
          </InArgument>
        </vffba1:ApplyDWCDRsToDB.PreviousActivityStatus>
      </vffba1:ApplyDWCDRsToDB>
    </Parallel>
    <WriteLine sap2010:WorkflowViewState.IdRef="WriteLine_2" Text="Finished executing workflow: FillDataWarehouse ..." />
    <sads:DebugSymbol.Symbol>d09DOlxURlNcQ0RSQW5hbHlzaXNcVmFucmlzZS5GemVyby5GcmF1ZEFuYWx5c2lzLkJQXEZpbGxEYXRhV2FyZWhvdXNlUHJvY2Vzcy54YW1sUUgDywMOAgEBSQVJeQMB1AtKBe8CEAMBhwHwAgXIAxACAQTJAwXJA3oCAQJJQ0l2AwHVC08H1wISAwGaAdgCB9gCVwMBmQHZAgfuAhoDAYgB+gIHjwMZAgFikAMHpQMfAgE9pgMHuwMoAgEYvAMHxwMgAgEFyQNDyQN3AgEDawmtASIDAdoIrgEJnQIrAwHbA54CCdYCKAMBmwHcAg3cAlsDAZUB5gIN5gJlAwGRAeECDeECeAMBjQHrAg3rAlkDAYkB/QIN/QJbAgF+hwMNhwN2AgF1ggMNggNuAgFsjAMNjANZAgFjnQMNnQNuAgFZkwMNkwNuAgFQogMNogN9AgFHmAMNmANyAgE+swMNswN1AgE0qQMNqQNqAgEruAMNuAOGAQIBIq4DDa4DcwIBGcQDDcQDfgIBD78DDb8DawIBBowBD4wBbgMBtwubAQ+bAXYDAZoLeA94cwMB/QqCAQ+CAV0DAeAKqgEPqgFsAwHDCnMPc3ADAaYKkQEPkQGAAQMBiQp9D31uAwHsCaABD6ABdgMBzwluD25yAwGyCZYBD5YBdAMBlQmlAQ+lAVsDAfgIhwEPhwFzAwHbCMoBD8oBZgMBvQjyAQ/yAX8DAaAIgQIPgQJ6AwGDCJACD5ACggEDAeYH3gEP3gFuAwHJB+gBD+gBfgMBrAeGAg+GAoABAwGPB7sBD7sBawMB8gbPAQ/PAXgDAdUG7QEP7QF8AwG4BpoCD5oCZAMBmwb3AQ/3AXoDAf4FtgEPtgFoAwHhBdQBD9QBiQEDAcQFwAEPwAFmAwGnBeMBD+MBbgMBigWLAg+LAoIBAwHtBPwBD/wBfwMB0ASVAg+VAngDAbMEsQEPsQFqAwGWBNkBD9kBbAMB+QPFAQ/FAWsDAdwDsAIPsAJ/AwG+A78CD78CegMBoQPOAg/OAoIBAwGEA6YCD6YCfgMB5wLEAg/EAoABAwHKAqECD6ECgQEDAa0CqwIPqwJ8AwGQArUCD7UCegMB8wHJAg/JAoIBAwHWAboCD7oCfwMBuQHTAg/TAngDAZwB</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="WriteLine_1" sap:VirtualizedContainerService.HintSize="1034,62" />
      <sap2010:ViewStateData Id="GetDWDimensions_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="CheckDWDimensionsChanges_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="ApplyDWDimensionsToDB_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_2" sap:VirtualizedContainerService.HintSize="222,270">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="200,270">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetDWTime_1" sap:VirtualizedContainerService.HintSize="200,270" />
      <sap2010:ViewStateData Id="Parallel_2" sap:VirtualizedContainerService.HintSize="1034,316" />
      <sap2010:ViewStateData Id="LoadCDRs_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="FillFactValues_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareDWCDRsForDBApply_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyDWCDRsToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_1" sap:VirtualizedContainerService.HintSize="1034,86" />
      <sap2010:ViewStateData Id="WriteLine_2" sap:VirtualizedContainerService.HintSize="1034,62" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="1056,770">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Vanrise.Fzero.FraudAnalysis.BP.FillDataWarehouse_1" sap:VirtualizedContainerService.HintSize="1096,850" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>