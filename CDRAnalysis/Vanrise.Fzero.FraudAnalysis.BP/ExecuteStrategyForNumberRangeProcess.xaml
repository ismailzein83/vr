<Activity mc:Ignorable="sap sap2010 sads" x:Class="Vanrise.Fzero.FraudAnalysis.BP.ExecuteStrategyForNumberRangeProcess"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:vb="clr-namespace:Vanrise.BusinessProcess;assembly=Vanrise.BusinessProcess"
 xmlns:vbw="clr-namespace:Vanrise.BusinessProcess.WFActivities;assembly=Vanrise.BusinessProcess.WFActivities"
 xmlns:vc="clr-namespace:Vanrise.Common;assembly=Vanrise.Common"
 xmlns:vfcba="clr-namespace:Vanrise.Fzero.CDRImport.BP.Activities;assembly=Vanrise.Fzero.CDRImport.BP.Activities"
 xmlns:vfce="clr-namespace:Vanrise.Fzero.CDRImport.Entities;assembly=Vanrise.Fzero.CDRImport.Entities"
 xmlns:vffba="clr-namespace:Vanrise.Fzero.FraudAnalysis.BP.Arguments;assembly=Vanrise.Fzero.FraudAnalysis.BP.Arguments"
 xmlns:vffba1="clr-namespace:Vanrise.Fzero.FraudAnalysis.BP.Activities;assembly=Vanrise.Fzero.FraudAnalysis.BP.Activities"
 xmlns:vffe="clr-namespace:Vanrise.Fzero.FraudAnalysis.Entities;assembly=Vanrise.Fzero.FraudAnalysis.Entities"
 xmlns:vq="clr-namespace:Vanrise.Queueing;assembly=Vanrise.Queueing"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="Input" Type="InArgument(vffba:ExecuteStrategyForNumberRangeProcessInput)" />
    <x:Property Name="Output" Type="OutArgument(vffba:ExecuteStrategyForNumberRangeProcessOutput)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap2010:WorkflowViewState.IdRef>Vanrise.Fzero.FraudAnalysis.BP.ExecuteStrategyForNumberRangeProcess_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>Vanrise.Fzero.FraudAnalysis.BP.Arguments</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Activities.Presentation</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.WFActivities</AssemblyReference>
      <AssemblyReference>Vanrise.Common</AssemblyReference>
      <AssemblyReference>Vanrise.Queueing</AssemblyReference>
      <AssemblyReference>Vanrise.Queueing.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.Security.Data</AssemblyReference>
      <AssemblyReference>Vanrise.Security.Entities</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Vanrise.Fzero.CDRImport.BP.Activities</AssemblyReference>
      <AssemblyReference>Vanrise.Fzero.CDRImport.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.Fzero.FraudAnalysis.BP.Arguments</AssemblyReference>
      <AssemblyReference>Vanrise.Fzero.FraudAnalysis.BP.Activities</AssemblyReference>
      <AssemblyReference>Vanrise.Fzero.FraudAnalysis.Business</AssemblyReference>
      <AssemblyReference>Vanrise.Fzero.FraudAnalysis.Entities</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>Vanrise.Fzero.FraudAnalysis.BP</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_2">
    <Sequence.Variables>
      <Variable x:TypeArguments="scg:List(vffe:StrategyExecutionInfo)" Name="strategiesExecutionInfo" />
      <Variable x:TypeArguments="x:Int64" Name="processedCDRs" />
    </Sequence.Variables>
    <If sap2010:WorkflowViewState.IdRef="If_2">
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <mca:CSharpValue x:TypeArguments="x:Boolean">Input.OverridePrevious</mca:CSharpValue>
        </InArgument>
      </If.Condition>
      <If.Then>
        <vffba1:OverridePreviousStrategyExecution sap2010:WorkflowViewState.IdRef="OverridePreviousStrategyExecution_1">
          <vffba1:OverridePreviousStrategyExecution.FromDate>
            <InArgument x:TypeArguments="s:DateTime">
              <mca:CSharpValue x:TypeArguments="s:DateTime">Input.FromDate</mca:CSharpValue>
            </InArgument>
          </vffba1:OverridePreviousStrategyExecution.FromDate>
          <vffba1:OverridePreviousStrategyExecution.StrategyIds>
            <InArgument x:TypeArguments="scg:List(x:Int32)">
              <mca:CSharpValue x:TypeArguments="scg:List(x:Int32)">Input.StrategyIds</mca:CSharpValue>
            </InArgument>
          </vffba1:OverridePreviousStrategyExecution.StrategyIds>
          <vffba1:OverridePreviousStrategyExecution.ToDate>
            <InArgument x:TypeArguments="s:DateTime">
              <mca:CSharpValue x:TypeArguments="s:DateTime">Input.ToDate</mca:CSharpValue>
            </InArgument>
          </vffba1:OverridePreviousStrategyExecution.ToDate>
        </vffba1:OverridePreviousStrategyExecution>
      </If.Then>
    </If>
    <vffba1:GetStrategiesExecutionInfo sap2010:WorkflowViewState.IdRef="GetStrategiesExecutionInfo_1">
      <vffba1:GetStrategiesExecutionInfo.FromDate>
        <InArgument x:TypeArguments="s:DateTime">
          <mca:CSharpValue x:TypeArguments="s:DateTime">Input.FromDate</mca:CSharpValue>
        </InArgument>
      </vffba1:GetStrategiesExecutionInfo.FromDate>
      <vffba1:GetStrategiesExecutionInfo.StrategiesExecutionInfo>
        <OutArgument x:TypeArguments="scg:List(vffe:StrategyExecutionInfo)">
          <mca:CSharpReference x:TypeArguments="scg:List(vffe:StrategyExecutionInfo)">strategiesExecutionInfo</mca:CSharpReference>
        </OutArgument>
      </vffba1:GetStrategiesExecutionInfo.StrategiesExecutionInfo>
      <vffba1:GetStrategiesExecutionInfo.StrategyIds>
        <InArgument x:TypeArguments="scg:List(x:Int32)">
          <mca:CSharpValue x:TypeArguments="scg:List(x:Int32)">Input.StrategyIds</mca:CSharpValue>
        </InArgument>
      </vffba1:GetStrategiesExecutionInfo.StrategyIds>
      <vffba1:GetStrategiesExecutionInfo.ToDate>
        <InArgument x:TypeArguments="s:DateTime">
          <mca:CSharpValue x:TypeArguments="s:DateTime">Input.ToDate</mca:CSharpValue>
        </InArgument>
      </vffba1:GetStrategiesExecutionInfo.ToDate>
    </vffba1:GetStrategiesExecutionInfo>
    <If sap2010:WorkflowViewState.IdRef="If_1">
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <mca:CSharpValue x:TypeArguments="x:Boolean">strategiesExecutionInfo != null &amp;&amp; strategiesExecutionInfo.Count &gt; 0</mca:CSharpValue>
        </InArgument>
      </If.Condition>
      <If.Then>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_1">
          <Parallel sap2010:WorkflowViewState.IdRef="Parallel_1">
            <Parallel.Variables>
              <Variable x:TypeArguments="vq:BaseQueue(vffe:NumberProfileBatch)" Name="numberProfileQueue" />
              <Variable x:TypeArguments="vq:BaseQueue(vffe:StrategyExecutionDetailBatch)" Name="strategyExecutionDetailQueue" />
              <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="createNumberProfilesStatus" />
              <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="GetStrategyExecutionDetailStatus" />
              <Variable x:TypeArguments="vq:BaseQueue(vffe:NumberProfileBatch)" Name="numberProfileToStoreQueue" />
              <Variable x:TypeArguments="vq:BaseQueue(vfce:CDRBatch)" Name="cdrQueue" />
              <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="loadCDRsStatus" />
              <Variable x:TypeArguments="vq:BaseQueue(x:Object)" Name="preparedStrategyExecutionDetailsQueue" />
              <Variable x:TypeArguments="vq:BaseQueue(x:Object)" Name="preparedNumberProfilesQueue" />
              <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="prepareStrategyExecutionDetailsStatus" />
              <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="prepareNumberProfilesStatus" />
            </Parallel.Variables>
            <vfcba:LoadCDRs sap2010:WorkflowViewState.IdRef="LoadCDRs_1">
              <vfcba:LoadCDRs.FromDate>
                <InArgument x:TypeArguments="s:DateTime">
                  <mca:CSharpValue x:TypeArguments="s:DateTime">Input.FromDate</mca:CSharpValue>
                </InArgument>
              </vfcba:LoadCDRs.FromDate>
              <vfcba:LoadCDRs.NumberOfCDRs>
                <OutArgument x:TypeArguments="x:Int64">
                  <mca:CSharpReference x:TypeArguments="x:Int64">processedCDRs</mca:CSharpReference>
                </OutArgument>
              </vfcba:LoadCDRs.NumberOfCDRs>
              <vfcba:LoadCDRs.NumberRange>
                <InArgument x:TypeArguments="vfce:NumberRangeDefinition">
                  <mca:CSharpValue x:TypeArguments="vfce:NumberRangeDefinition">Input.NumberRange</mca:CSharpValue>
                </InArgument>
              </vfcba:LoadCDRs.NumberRange>
              <vfcba:LoadCDRs.OutputQueue>
                <InOutArgument x:TypeArguments="vq:BaseQueue(vfce:CDRBatch)">
                  <mca:CSharpReference x:TypeArguments="vq:BaseQueue(vfce:CDRBatch)">cdrQueue</mca:CSharpReference>
                </InOutArgument>
              </vfcba:LoadCDRs.OutputQueue>
              <vfcba:LoadCDRs.Status>
                <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
                  <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">loadCDRsStatus</mca:CSharpReference>
                </OutArgument>
              </vfcba:LoadCDRs.Status>
              <vfcba:LoadCDRs.ToDate>
                <InArgument x:TypeArguments="s:DateTime">
                  <mca:CSharpValue x:TypeArguments="s:DateTime">Input.ToDate</mca:CSharpValue>
                </InArgument>
              </vfcba:LoadCDRs.ToDate>
            </vfcba:LoadCDRs>
            <vffba1:CreateNumberProfiles Parameters="{x:Null}" sap2010:WorkflowViewState.IdRef="CreateNumberProfiles_1">
              <vffba1:CreateNumberProfiles.FromDate>
                <InArgument x:TypeArguments="s:DateTime">
                  <mca:CSharpValue x:TypeArguments="s:DateTime">Input.FromDate</mca:CSharpValue>
                </InArgument>
              </vffba1:CreateNumberProfiles.FromDate>
              <vffba1:CreateNumberProfiles.IncludeWhiteList>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">Input.IncludeWhiteList</mca:CSharpValue>
                </InArgument>
              </vffba1:CreateNumberProfiles.IncludeWhiteList>
              <vffba1:CreateNumberProfiles.InputQueue>
                <InOutArgument x:TypeArguments="vq:BaseQueue(vfce:CDRBatch)">
                  <mca:CSharpReference x:TypeArguments="vq:BaseQueue(vfce:CDRBatch)">cdrQueue</mca:CSharpReference>
                </InOutArgument>
              </vffba1:CreateNumberProfiles.InputQueue>
              <vffba1:CreateNumberProfiles.NumberRange>
                <InArgument x:TypeArguments="vfce:NumberRangeDefinition">
                  <mca:CSharpValue x:TypeArguments="vfce:NumberRangeDefinition">Input.NumberRange</mca:CSharpValue>
                </InArgument>
              </vffba1:CreateNumberProfiles.NumberRange>
              <vffba1:CreateNumberProfiles.OutputQueue>
                <InOutArgument x:TypeArguments="vq:BaseQueue(vffe:NumberProfileBatch)">
                  <mca:CSharpReference x:TypeArguments="vq:BaseQueue(vffe:NumberProfileBatch)">numberProfileQueue</mca:CSharpReference>
                </InOutArgument>
              </vffba1:CreateNumberProfiles.OutputQueue>
              <vffba1:CreateNumberProfiles.PreviousActivityStatus>
                <InArgument x:TypeArguments="vb:AsyncActivityStatus">
                  <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">loadCDRsStatus</mca:CSharpValue>
                </InArgument>
              </vffba1:CreateNumberProfiles.PreviousActivityStatus>
              <vffba1:CreateNumberProfiles.Status>
                <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
                  <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">createNumberProfilesStatus</mca:CSharpReference>
                </OutArgument>
              </vffba1:CreateNumberProfiles.Status>
              <vffba1:CreateNumberProfiles.StrategiesExecutionInfo>
                <InArgument x:TypeArguments="scg:List(vffe:StrategyExecutionInfo)">
                  <mca:CSharpValue x:TypeArguments="scg:List(vffe:StrategyExecutionInfo)">strategiesExecutionInfo</mca:CSharpValue>
                </InArgument>
              </vffba1:CreateNumberProfiles.StrategiesExecutionInfo>
              <vffba1:CreateNumberProfiles.ToDate>
                <InArgument x:TypeArguments="s:DateTime">
                  <mca:CSharpValue x:TypeArguments="s:DateTime">Input.ToDate</mca:CSharpValue>
                </InArgument>
              </vffba1:CreateNumberProfiles.ToDate>
            </vffba1:CreateNumberProfiles>
            <vffba1:GetStrategyExecutionDetails sap2010:WorkflowViewState.IdRef="GetStrategyExecutionDetails_1">
              <vffba1:GetStrategyExecutionDetails.InputQueueForNumberProfile>
                <InArgument x:TypeArguments="vq:BaseQueue(vffe:NumberProfileBatch)">
                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(vffe:NumberProfileBatch)">numberProfileQueue</mca:CSharpValue>
                </InArgument>
              </vffba1:GetStrategyExecutionDetails.InputQueueForNumberProfile>
              <vffba1:GetStrategyExecutionDetails.OutputQueueForStrategyExecutionDetail>
                <InOutArgument x:TypeArguments="vq:BaseQueue(vffe:StrategyExecutionDetailBatch)">
                  <mca:CSharpReference x:TypeArguments="vq:BaseQueue(vffe:StrategyExecutionDetailBatch)">strategyExecutionDetailQueue</mca:CSharpReference>
                </InOutArgument>
              </vffba1:GetStrategyExecutionDetails.OutputQueueForStrategyExecutionDetail>
              <vffba1:GetStrategyExecutionDetails.PreviousActivityStatus>
                <InArgument x:TypeArguments="vb:AsyncActivityStatus">
                  <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">createNumberProfilesStatus</mca:CSharpValue>
                </InArgument>
              </vffba1:GetStrategyExecutionDetails.PreviousActivityStatus>
              <vffba1:GetStrategyExecutionDetails.Status>
                <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
                  <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">GetStrategyExecutionDetailStatus</mca:CSharpReference>
                </OutArgument>
              </vffba1:GetStrategyExecutionDetails.Status>
              <vffba1:GetStrategyExecutionDetails.StrategiesExecutionInfo>
                <InArgument x:TypeArguments="scg:List(vffe:StrategyExecutionInfo)">
                  <mca:CSharpValue x:TypeArguments="scg:List(vffe:StrategyExecutionInfo)">strategiesExecutionInfo</mca:CSharpValue>
                </InArgument>
              </vffba1:GetStrategyExecutionDetails.StrategiesExecutionInfo>
            </vffba1:GetStrategyExecutionDetails>
            <vffba1:PrepareStrategyExecutionDetailsForDBApply sap2010:WorkflowViewState.IdRef="PrepareStrategyExecutionDetailsForDBApply_1">
              <vffba1:PrepareStrategyExecutionDetailsForDBApply.InputQueue>
                <InArgument x:TypeArguments="vq:BaseQueue(vffe:StrategyExecutionDetailBatch)">
                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(vffe:StrategyExecutionDetailBatch)">strategyExecutionDetailQueue</mca:CSharpValue>
                </InArgument>
              </vffba1:PrepareStrategyExecutionDetailsForDBApply.InputQueue>
              <vffba1:PrepareStrategyExecutionDetailsForDBApply.OutputQueue>
                <InOutArgument x:TypeArguments="vq:BaseQueue(x:Object)">
                  <mca:CSharpReference x:TypeArguments="vq:BaseQueue(x:Object)">preparedStrategyExecutionDetailsQueue</mca:CSharpReference>
                </InOutArgument>
              </vffba1:PrepareStrategyExecutionDetailsForDBApply.OutputQueue>
              <vffba1:PrepareStrategyExecutionDetailsForDBApply.PreviousActivityStatus>
                <InArgument x:TypeArguments="vb:AsyncActivityStatus">
                  <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">GetStrategyExecutionDetailStatus</mca:CSharpValue>
                </InArgument>
              </vffba1:PrepareStrategyExecutionDetailsForDBApply.PreviousActivityStatus>
              <vffba1:PrepareStrategyExecutionDetailsForDBApply.Status>
                <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
                  <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">prepareStrategyExecutionDetailsStatus</mca:CSharpReference>
                </OutArgument>
              </vffba1:PrepareStrategyExecutionDetailsForDBApply.Status>
            </vffba1:PrepareStrategyExecutionDetailsForDBApply>
            <vffba1:ApplyStrategyExecutionDetailsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyStrategyExecutionDetailsToDB_1">
              <vffba1:ApplyStrategyExecutionDetailsToDB.InputQueue>
                <InArgument x:TypeArguments="vq:BaseQueue(x:Object)">
                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(x:Object)">preparedStrategyExecutionDetailsQueue</mca:CSharpValue>
                </InArgument>
              </vffba1:ApplyStrategyExecutionDetailsToDB.InputQueue>
              <vffba1:ApplyStrategyExecutionDetailsToDB.PreviousActivityStatus>
                <InArgument x:TypeArguments="vb:AsyncActivityStatus">
                  <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">prepareStrategyExecutionDetailsStatus</mca:CSharpValue>
                </InArgument>
              </vffba1:ApplyStrategyExecutionDetailsToDB.PreviousActivityStatus>
            </vffba1:ApplyStrategyExecutionDetailsToDB>
          </Parallel>
        </Sequence>
      </If.Then>
      <If.Else>
        <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_1" Message="All Strategies are disabled">
          <vbw:WriteTrackingMessage.Severity>
            <InArgument x:TypeArguments="s:Nullable(vc:LogEntryType)">
              <mca:CSharpValue x:TypeArguments="s:Nullable(vc:LogEntryType)">Vanrise.Common.LogEntryType.Warning</mca:CSharpValue>
            </InArgument>
          </vbw:WriteTrackingMessage.Severity>
        </vbw:WriteTrackingMessage>
      </If.Else>
    </If>
    <Assign sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="vffba:ExecuteStrategyForNumberRangeProcessOutput">
          <mca:CSharpReference x:TypeArguments="vffba:ExecuteStrategyForNumberRangeProcessOutput">Output</mca:CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="vffba:ExecuteStrategyForNumberRangeProcessOutput">
          <mca:CSharpValue x:TypeArguments="vffba:ExecuteStrategyForNumberRangeProcessOutput" xml:space="preserve">new ExecuteStrategyForNumberRangeProcessOutput {  CDRsProcessed = processedCDRs}</mca:CSharpValue>
        </InArgument>
      </Assign.Value>
    </Assign>
    <sads:DebugSymbol.Symbol>d1tDOlxURlNcQ0RSQW5hbHlzaXNcVmFucmlzZS5GemVyby5GcmF1ZEFuYWx5c2lzLkJQXEV4ZWN1dGVTdHJhdGVneUZvck51bWJlclJhbmdlUHJvY2Vzcy54YW1sNUkDugIOAgEBTgVnCgMB1gNoBX0pAwHBA34FrAIKAgENrQIFuAIOAgECUQtRYAMB1wNVCWU0AwHcA3ULdWMDAdEDcAtwhAEDAcwDawtrWQMBxwN6C3pXAwHCA4EBC4EBmQECAQ6FAQmhAhQCARqkAgmqAiQCARO1Agu1AtYBAgEIsAILsAJ/AgEDXQ9dZwMB5wNYD1hdAwHiA2IPYlsDAd0DhgELoAIWAgEbpwIPpwKDAQIBFaQCZKQCgQECARSUAQ2zAR4DAeACtAEN4gErAwHPAeMBDf0BMgIBfv4BDZMCQAIBPZQCDZ8COAIBHJwBE5wBZQMBsQOXAROXAWEDAaEDqwETqwF1AwGRA6YBE6YBdAMBgQOhAROhAXQDAfECsAETsAFfAwHhAtABE9ABbQMB0ALBARPBAXQDAcAC2gET2gGEAQMBsAK3ARO3AWEDAaAC1QET1QGBAQMBkALLARPLAYgBAwGAArwBE7wBaAMB8AHGARPGAXQDAeAB3wET3wFfAwHQAeYBE+YBgAEDAb8B8AET8AF5AwGvAfoBE/oBhAEDAZ8B6wET6wGcAQMBjwH1ARP1AYcBAgF/iwITiwJ/AgFugQITgQKUAQIBXpACE5ACjAECAU6GAhOGAowBAgE+nAITnAKEAQIBLZcCE5cChAECAR0=</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="OverridePreviousStrategyExecution_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_2" sap:VirtualizedContainerService.HintSize="1521,210" />
      <sap2010:ViewStateData Id="GetStrategiesExecutionInfo_1" sap:VirtualizedContainerService.HintSize="1521,22" />
      <sap2010:ViewStateData Id="LoadCDRs_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="CreateNumberProfiles_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetStrategyExecutionDetails_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareStrategyExecutionDetailsForDBApply_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyStrategyExecutionDetailsToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_1" sap:VirtualizedContainerService.HintSize="1274,86" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="1296,210">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteTrackingMessage_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_1" sap:VirtualizedContainerService.HintSize="1521,360" />
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="1521,62" />
      <sap2010:ViewStateData Id="Sequence_2" sap:VirtualizedContainerService.HintSize="1543,898">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Vanrise.Fzero.FraudAnalysis.BP.ExecuteStrategyForNumberRangeProcess_1" sap:VirtualizedContainerService.HintSize="1583,978" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>