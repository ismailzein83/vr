<Activity mc:Ignorable="sap sap2010 sads" x:Class="TOne.WhS.CodePreparation.BP.CodePreparation"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:local="clr-namespace:TOne.WhS.CodePreparation.BP"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:sc="clr-namespace:System.Collections;assembly=mscorlib"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:twbe="clr-namespace:TOne.WhS.BusinessEntity.Entities;assembly=TOne.WhS.BusinessEntity.Entities"
 xmlns:twcba="clr-namespace:TOne.WhS.CodePreparation.BP.Arguments;assembly=TOne.WhS.CodePreparation.BP.Arguments"
 xmlns:twcba1="clr-namespace:TOne.WhS.CodePreparation.BP.Activities;assembly=TOne.WhS.CodePreparation.BP.Activities"
 xmlns:twce="clr-namespace:TOne.WhS.CodePreparation.Entities;assembly=TOne.WhS.CodePreparation.Entities"
 xmlns:twcecp="clr-namespace:TOne.WhS.CodePreparation.Entities.Processing;assembly=TOne.WhS.CodePreparation.Entities"
 xmlns:vb="clr-namespace:Vanrise.BusinessProcess;assembly=Vanrise.BusinessProcess"
 xmlns:vbe="clr-namespace:Vanrise.BusinessProcess.Entities;assembly=Vanrise.BusinessProcess.Entities"
 xmlns:vbw="clr-namespace:Vanrise.BusinessProcess.WFActivities;assembly=Vanrise.BusinessProcess.WFActivities"
 xmlns:vc="clr-namespace:Vanrise.Entities;assembly=Vanrise.Entities"
 xmlns:vq="clr-namespace:Vanrise.Queueing;assembly=Vanrise.Queueing"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="Input" Type="InArgument(twcba:CodePreparationInput)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap2010:WorkflowViewState.IdRef>TOne.WhS.CodePreparation.BP.CodePreparation_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>TOne.WhS.CodePreparation.BP.Arguments</x:String>
      <x:String>Vanrise.Queueing</x:String>
      <x:String>Vanrise.BusinessProcess</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.WFActivities</AssemblyReference>
      <AssemblyReference>Vanrise.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.Queueing</AssemblyReference>
      <AssemblyReference>TOne.WhS.BusinessEntity.Entities</AssemblyReference>
      <AssemblyReference>TOne.WhS.CodePreparation.BP.Activities</AssemblyReference>
      <AssemblyReference>TOne.WhS.CodePreparation.BP.Arguments</AssemblyReference>
      <AssemblyReference>TOne.WhS.CodePreparation.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.Common</AssemblyReference>
      <AssemblyReference>Vanrise.Common.Business</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>TOne.WhS.CodePreparation.BP</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Root" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="scg:IEnumerable(twcecp:CodeToClose)" Name="CodesToClose" />
      <Variable x:TypeArguments="scg:IEnumerable(twcecp:CodeToMove)" Name="CodesToMove" />
      <Variable x:TypeArguments="s:DateTime" Name="MinimumDate" />
      <Variable x:TypeArguments="scg:IEnumerable(twcecp:CountryToProcess)" Name="CountriesToProcess" />
      <Variable x:TypeArguments="scg:IEnumerable(vbe:BusinessRule)" Name="ImportedDataValidationRules" />
      <Variable x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)" Name="ImportedDataToValidate" />
      <Variable x:TypeArguments="scg:IEnumerable(twcecp:CodeToAdd)" Name="CodesToAdd" />
      <Variable x:TypeArguments="scg:IEnumerable(twcecp:ZoneToProcess)" Name="ZonesToProcess" />
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:AddedZone))" Name="NewZonesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:AddedZone))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.Processing.AddedZone&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:AddedCode))" Name="NewCodesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:AddedCode))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.Processing.AddedCode&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:ChangedZone))" Name="ChangedZonesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:ChangedZone))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.Processing.ChangedZone&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:ChangedCode))" Name="ChangedCodesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:ChangedCode))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.Processing.ChangedCode&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="CountriesProcessingStatus">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">new AsyncActivityStatus()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
    </Sequence.Variables>
    <If sap2010:WorkflowViewState.IdRef="If_1">
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <mca:CSharpValue x:TypeArguments="x:Boolean">Input.IsFromExcel</mca:CSharpValue>
        </InArgument>
      </If.Condition>
      <If.Then>
        <twcba1:GetDataFromSource sap2010:WorkflowViewState.IdRef="GetDataFromSource_2">
          <twcba1:GetDataFromSource.CodesToAdd>
            <OutArgument x:TypeArguments="scg:IEnumerable(twcecp:CodeToAdd)">
              <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcecp:CodeToAdd)">CodesToAdd</mca:CSharpReference>
            </OutArgument>
          </twcba1:GetDataFromSource.CodesToAdd>
          <twcba1:GetDataFromSource.CodesToClose>
            <OutArgument x:TypeArguments="scg:IEnumerable(twcecp:CodeToClose)">
              <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcecp:CodeToClose)">CodesToClose</mca:CSharpReference>
            </OutArgument>
          </twcba1:GetDataFromSource.CodesToClose>
          <twcba1:GetDataFromSource.CodesToMove>
            <OutArgument x:TypeArguments="scg:IEnumerable(twcecp:CodeToMove)">
              <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcecp:CodeToMove)">CodesToMove</mca:CSharpReference>
            </OutArgument>
          </twcba1:GetDataFromSource.CodesToMove>
          <twcba1:GetDataFromSource.EffectiveDate>
            <InArgument x:TypeArguments="s:DateTime">
              <mca:CSharpValue x:TypeArguments="s:DateTime">(DateTime)Input.EffectiveDate</mca:CSharpValue>
            </InArgument>
          </twcba1:GetDataFromSource.EffectiveDate>
          <twcba1:GetDataFromSource.FileId>
            <InArgument x:TypeArguments="x:Int32">
              <mca:CSharpValue x:TypeArguments="x:Int32">(int)Input.FileId</mca:CSharpValue>
            </InArgument>
          </twcba1:GetDataFromSource.FileId>
          <twcba1:GetDataFromSource.MinimumDate>
            <OutArgument x:TypeArguments="s:DateTime">
              <mca:CSharpReference x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpReference>
            </OutArgument>
          </twcba1:GetDataFromSource.MinimumDate>
        </twcba1:GetDataFromSource>
      </If.Then>
      <If.Else>
        <twcba1:GetDataFromView sap2010:WorkflowViewState.IdRef="GetDataFromView_1">
          <twcba1:GetDataFromView.CodesToAdd>
            <OutArgument x:TypeArguments="scg:IEnumerable(twcecp:CodeToAdd)">
              <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcecp:CodeToAdd)">CodesToAdd</mca:CSharpReference>
            </OutArgument>
          </twcba1:GetDataFromView.CodesToAdd>
          <twcba1:GetDataFromView.CodesToClose>
            <OutArgument x:TypeArguments="scg:IEnumerable(twcecp:CodeToClose)">
              <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcecp:CodeToClose)">CodesToClose</mca:CSharpReference>
            </OutArgument>
          </twcba1:GetDataFromView.CodesToClose>
          <twcba1:GetDataFromView.CodesToMove>
            <OutArgument x:TypeArguments="scg:IEnumerable(twcecp:CodeToMove)">
              <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcecp:CodeToMove)">CodesToMove</mca:CSharpReference>
            </OutArgument>
          </twcba1:GetDataFromView.CodesToMove>
          <twcba1:GetDataFromView.EffectiveDate>
            <InArgument x:TypeArguments="s:DateTime">
              <mca:CSharpValue x:TypeArguments="s:DateTime">Input.EffectiveDate.Value</mca:CSharpValue>
            </InArgument>
          </twcba1:GetDataFromView.EffectiveDate>
          <twcba1:GetDataFromView.MinimumDate>
            <OutArgument x:TypeArguments="s:DateTime">
              <mca:CSharpReference x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpReference>
            </OutArgument>
          </twcba1:GetDataFromView.MinimumDate>
          <twcba1:GetDataFromView.SellingNumberPlanId>
            <InArgument x:TypeArguments="x:Int32">
              <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
            </InArgument>
          </twcba1:GetDataFromView.SellingNumberPlanId>
        </twcba1:GetDataFromView>
      </If.Else>
    </If>
    <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_2">
      <vbw:WriteTrackingMessage.Message>
        <InArgument x:TypeArguments="x:String">
          <mca:CSharpValue x:TypeArguments="x:String">String.Format("Reading data from {0}", Input.IsFromExcel ? "Excel" : "Code Preparation Page")</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Message>
      <vbw:WriteTrackingMessage.Severity>
        <InArgument x:TypeArguments="s:Nullable(vc:LogEntryType)">
          <mca:CSharpValue x:TypeArguments="s:Nullable(vc:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Severity>
    </vbw:WriteTrackingMessage>
    <twcba1:StructureDataByZones sap2010:WorkflowViewState.IdRef="StructureDataByZones_1">
      <twcba1:StructureDataByZones.CodesToAdd>
        <InArgument x:TypeArguments="scg:IEnumerable(twcecp:CodeToAdd)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:CodeToAdd)">CodesToAdd</mca:CSharpValue>
        </InArgument>
      </twcba1:StructureDataByZones.CodesToAdd>
      <twcba1:StructureDataByZones.CodesToClose>
        <InArgument x:TypeArguments="scg:IEnumerable(twcecp:CodeToClose)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:CodeToClose)">CodesToClose</mca:CSharpValue>
        </InArgument>
      </twcba1:StructureDataByZones.CodesToClose>
      <twcba1:StructureDataByZones.CodesToMove>
        <InArgument x:TypeArguments="scg:IEnumerable(twcecp:CodeToMove)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:CodeToMove)">CodesToMove</mca:CSharpValue>
        </InArgument>
      </twcba1:StructureDataByZones.CodesToMove>
      <twcba1:StructureDataByZones.ZonesToProcess>
        <OutArgument x:TypeArguments="scg:IEnumerable(twcecp:ZoneToProcess)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcecp:ZoneToProcess)">ZonesToProcess</mca:CSharpReference>
        </OutArgument>
      </twcba1:StructureDataByZones.ZonesToProcess>
    </twcba1:StructureDataByZones>
    <twcba1:GetImportedDataValidationRules sap2010:WorkflowViewState.IdRef="GetImportedDataValidationRules_1">
      <twcba1:GetImportedDataValidationRules.ImportedDataValidationRules>
        <OutArgument x:TypeArguments="scg:IEnumerable(vbe:BusinessRule)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(vbe:BusinessRule)">ImportedDataValidationRules</mca:CSharpReference>
        </OutArgument>
      </twcba1:GetImportedDataValidationRules.ImportedDataValidationRules>
    </twcba1:GetImportedDataValidationRules>
    <vbw:CombineLists x:TypeArguments="vbe:IRuleTarget" sap2010:WorkflowViewState.IdRef="CombineLists`1_1">
      <vbw:CombineLists.InputLists>
        <InArgument x:TypeArguments="scg:List(sc:IEnumerable)">
          <mca:CSharpValue x:TypeArguments="scg:List(sc:IEnumerable)">new List&lt;System.Collections.IEnumerable&gt; {CodesToAdd,CodesToMove, ZonesToProcess }</mca:CSharpValue>
        </InArgument>
      </vbw:CombineLists.InputLists>
      <vbw:CombineLists.OutputList>
        <OutArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedDataToValidate</mca:CSharpReference>
        </OutArgument>
      </vbw:CombineLists.OutputList>
    </vbw:CombineLists>
    <vbw:Validate sap2010:WorkflowViewState.IdRef="Validate_1">
      <vbw:Validate.BusinessRules>
        <InArgument x:TypeArguments="scg:IEnumerable(vbe:BusinessRule)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(vbe:BusinessRule)">ImportedDataValidationRules</mca:CSharpValue>
        </InArgument>
      </vbw:Validate.BusinessRules>
      <vbw:Validate.ImportedDataToValidate>
        <InArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedDataToValidate</mca:CSharpValue>
        </InArgument>
      </vbw:Validate.ImportedDataToValidate>
    </vbw:Validate>
    <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_3" Message="Imported data is validated.">
      <vbw:WriteTrackingMessage.Severity>
        <InArgument x:TypeArguments="s:Nullable(vc:LogEntryType)">
          <mca:CSharpValue x:TypeArguments="s:Nullable(vc:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Severity>
    </vbw:WriteTrackingMessage>
    <twcba1:StructureDataByCountries sap2010:WorkflowViewState.IdRef="StructureDataByCountries_1">
      <twcba1:StructureDataByCountries.CountriesToProcess>
        <OutArgument x:TypeArguments="scg:IEnumerable(twcecp:CountryToProcess)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcecp:CountryToProcess)">CountriesToProcess</mca:CSharpReference>
        </OutArgument>
      </twcba1:StructureDataByCountries.CountriesToProcess>
      <twcba1:StructureDataByCountries.ZonesToProcess>
        <InArgument x:TypeArguments="scg:IEnumerable(twcecp:ZoneToProcess)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:ZoneToProcess)">ZonesToProcess</mca:CSharpValue>
        </InArgument>
      </twcba1:StructureDataByCountries.ZonesToProcess>
    </twcba1:StructureDataByCountries>
    <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_4" Message="Ready to start processing imported data">
      <vbw:WriteTrackingMessage.Severity>
        <InArgument x:TypeArguments="s:Nullable(vc:LogEntryType)">
          <mca:CSharpValue x:TypeArguments="s:Nullable(vc:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Severity>
    </vbw:WriteTrackingMessage>
    <Parallel sap2010:WorkflowViewState.IdRef="Parallel_4">
      <Parallel.Variables>
        <Variable x:TypeArguments="x:Int32" Name="ProcessingCountryCompleted" />
      </Parallel.Variables>
      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_4">
        <Sequence.Variables>
          <Variable x:TypeArguments="x:String" Name="variable1" />
        </Sequence.Variables>
        <vbw:ParallelForEach x:TypeArguments="twcecp:CountryToProcess" sap2010:WorkflowViewState.IdRef="ParallelForEach`1_2" InitialConcurrentInstances="10" MaxConcurrentInstances="10">
          <vbw:ParallelForEach.Values>
            <InArgument x:TypeArguments="scg:IEnumerable(twcecp:CountryToProcess)">
              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:CountryToProcess)">CountriesToProcess</mca:CSharpValue>
            </InArgument>
          </vbw:ParallelForEach.Values>
          <ActivityAction x:TypeArguments="twcecp:CountryToProcess">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="twcecp:CountryToProcess" Name="Country" />
            </ActivityAction.Argument>
            <Sequence DisplayName="ProcessData" sap2010:WorkflowViewState.IdRef="Sequence_3">
              <Sequence.Variables>
                <Variable x:TypeArguments="scg:Dictionary(x:Int64, twcecp:ExistingZone)" Name="ExistingZonesByZoneId" />
                <Variable x:TypeArguments="scg:IEnumerable(twcecp:AddedCode)" Name="NewCodes" />
                <Variable x:TypeArguments="scg:IEnumerable(twcecp:AddedZone)" Name="NewZones" />
                <Variable x:TypeArguments="scg:IEnumerable(twbe:SaleZone)" Name="ExistingZoneEntities" />
                <Variable x:TypeArguments="scg:IEnumerable(twbe:SaleCode)" Name="ExistingCodeEntities" />
                <Variable x:TypeArguments="scg:IEnumerable(twcecp:ExistingCode)" Name="ExistingCodes" />
                <Variable x:TypeArguments="scg:IEnumerable(twcecp:ChangedCode)" Name="ChangedCodes" />
                <Variable x:TypeArguments="scg:IEnumerable(twcecp:ChangedZone)" Name="ChangedZones" />
              </Sequence.Variables>
              <Parallel sap2010:WorkflowViewState.IdRef="Parallel_1">
                <twcba1:GetExistingZones Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingZones_1">
                  <twcba1:GetExistingZones.CountryId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Country.CountryId</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GetExistingZones.CountryId>
                  <twcba1:GetExistingZones.ExistingZoneEntities>
                    <InOutArgument x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">
                      <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">ExistingZoneEntities</mca:CSharpReference>
                    </InOutArgument>
                  </twcba1:GetExistingZones.ExistingZoneEntities>
                  <twcba1:GetExistingZones.MinimumDate>
                    <InArgument x:TypeArguments="s:DateTime">
                      <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GetExistingZones.MinimumDate>
                  <twcba1:GetExistingZones.SellingNumberPlanID>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GetExistingZones.SellingNumberPlanID>
                </twcba1:GetExistingZones>
                <twcba1:GetExistingCodes Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingCodes_1">
                  <twcba1:GetExistingCodes.CountryId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Country.CountryId</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GetExistingCodes.CountryId>
                  <twcba1:GetExistingCodes.ExistingCodeEntities>
                    <InOutArgument x:TypeArguments="scg:IEnumerable(twbe:SaleCode)">
                      <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SaleCode)">ExistingCodeEntities</mca:CSharpReference>
                    </InOutArgument>
                  </twcba1:GetExistingCodes.ExistingCodeEntities>
                  <twcba1:GetExistingCodes.MinimumDate>
                    <InArgument x:TypeArguments="s:DateTime">
                      <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GetExistingCodes.MinimumDate>
                  <twcba1:GetExistingCodes.SellingNumberPlanID>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GetExistingCodes.SellingNumberPlanID>
                </twcba1:GetExistingCodes>
              </Parallel>
              <twcba1:PrepareExistingZones Status="{x:Null}" sap2010:WorkflowViewState.IdRef="PrepareExistingZones_1">
                <twcba1:PrepareExistingZones.ExistingZoneEntities>
                  <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">ExistingZoneEntities</mca:CSharpValue>
                  </InArgument>
                </twcba1:PrepareExistingZones.ExistingZoneEntities>
                <twcba1:PrepareExistingZones.ExistingZonesByZoneId>
                  <InOutArgument x:TypeArguments="scg:Dictionary(x:Int64, twcecp:ExistingZone)">
                    <mca:CSharpReference x:TypeArguments="scg:Dictionary(x:Int64, twcecp:ExistingZone)">ExistingZonesByZoneId</mca:CSharpReference>
                  </InOutArgument>
                </twcba1:PrepareExistingZones.ExistingZonesByZoneId>
              </twcba1:PrepareExistingZones>
              <twcba1:PrepareExistingCodes Status="{x:Null}" sap2010:WorkflowViewState.IdRef="PrepareExistingCodes_1">
                <twcba1:PrepareExistingCodes.ExistingCodeEntities>
                  <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleCode)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleCode)">ExistingCodeEntities</mca:CSharpValue>
                  </InArgument>
                </twcba1:PrepareExistingCodes.ExistingCodeEntities>
                <twcba1:PrepareExistingCodes.ExistingCodes>
                  <InOutArgument x:TypeArguments="scg:IEnumerable(twcecp:ExistingCode)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcecp:ExistingCode)">ExistingCodes</mca:CSharpReference>
                  </InOutArgument>
                </twcba1:PrepareExistingCodes.ExistingCodes>
                <twcba1:PrepareExistingCodes.ExistingZonesByZoneId>
                  <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twcecp:ExistingZone)">
                    <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twcecp:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                  </InArgument>
                </twcba1:PrepareExistingCodes.ExistingZonesByZoneId>
              </twcba1:PrepareExistingCodes>
              <twcba1:ProcessCountryCodes Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessCountryCodes_1">
                <twcba1:ProcessCountryCodes.ChangedCodes>
                  <InOutArgument x:TypeArguments="scg:IEnumerable(twcecp:ChangedCode)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcecp:ChangedCode)">ChangedCodes</mca:CSharpReference>
                  </InOutArgument>
                </twcba1:ProcessCountryCodes.ChangedCodes>
                <twcba1:ProcessCountryCodes.ChangedZones>
                  <InOutArgument x:TypeArguments="scg:IEnumerable(twcecp:ChangedZone)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcecp:ChangedZone)">ChangedZones</mca:CSharpReference>
                  </InOutArgument>
                </twcba1:ProcessCountryCodes.ChangedZones>
                <twcba1:ProcessCountryCodes.CodesToAdd>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcecp:CodeToAdd)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:CodeToAdd)">Country.CodesToAdd</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryCodes.CodesToAdd>
                <twcba1:ProcessCountryCodes.CodesToClose>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcecp:CodeToClose)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:CodeToClose)">Country.CodesToClose</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryCodes.CodesToClose>
                <twcba1:ProcessCountryCodes.CodesToMove>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcecp:CodeToMove)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:CodeToMove)">Country.CodesToMove</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryCodes.CodesToMove>
                <twcba1:ProcessCountryCodes.ExistingCodes>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcecp:ExistingCode)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:ExistingCode)">ExistingCodes</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryCodes.ExistingCodes>
                <twcba1:ProcessCountryCodes.ExistingZonesByZoneId>
                  <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twcecp:ExistingZone)">
                    <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twcecp:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryCodes.ExistingZonesByZoneId>
                <twcba1:ProcessCountryCodes.NewCodes>
                  <InOutArgument x:TypeArguments="scg:IEnumerable(twcecp:AddedCode)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcecp:AddedCode)">NewCodes</mca:CSharpReference>
                  </InOutArgument>
                </twcba1:ProcessCountryCodes.NewCodes>
                <twcba1:ProcessCountryCodes.NewZones>
                  <InOutArgument x:TypeArguments="scg:IEnumerable(twcecp:AddedZone)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcecp:AddedZone)">NewZones</mca:CSharpReference>
                  </InOutArgument>
                </twcba1:ProcessCountryCodes.NewZones>
              </twcba1:ProcessCountryCodes>
              <twcba1:ReserveIdsForNewEntities Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ReserveIdsForNewEntities_1">
                <twcba1:ReserveIdsForNewEntities.NewCodes>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcecp:AddedCode)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:AddedCode)">NewCodes</mca:CSharpValue>
                  </InArgument>
                </twcba1:ReserveIdsForNewEntities.NewCodes>
                <twcba1:ReserveIdsForNewEntities.NewZones>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcecp:AddedZone)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:AddedZone)">NewZones</mca:CSharpValue>
                  </InArgument>
                </twcba1:ReserveIdsForNewEntities.NewZones>
              </twcba1:ReserveIdsForNewEntities>
              <Parallel DisplayName="Parallel_PrepareQueuesForDBApplyProcess" sap2010:WorkflowViewState.IdRef="Parallel_3">
                <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twcecp:AddedZone)" DisplayName="NewZones_EnqueueItem&lt;IEnumerable&lt;AddedZone&gt;&gt;" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_1">
                  <vbw:EnqueueItem.Item>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcecp:AddedZone)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:AddedZone)">NewZones</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Item>
                  <vbw:EnqueueItem.Queue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:AddedZone))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:AddedZone))">NewZonesQueue</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Queue>
                </vbw:EnqueueItem>
                <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twcecp:AddedCode)" DisplayName="NewCodes_EnqueueItem&lt;IEnumerable&lt;AddedCode&gt;&gt;" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_2">
                  <vbw:EnqueueItem.Item>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcecp:AddedCode)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:AddedCode)">NewCodes</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Item>
                  <vbw:EnqueueItem.Queue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:AddedCode))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:AddedCode))">NewCodesQueue</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Queue>
                </vbw:EnqueueItem>
                <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twcecp:ChangedZone)" DisplayName="ChangedZones_EnqueueItem&lt;IEnumerable&lt;ChangedZone&gt;&gt;" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_3">
                  <vbw:EnqueueItem.Item>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcecp:ChangedZone)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:ChangedZone)">ChangedZones</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Item>
                  <vbw:EnqueueItem.Queue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:ChangedZone))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:ChangedZone))">ChangedZonesQueue</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Queue>
                </vbw:EnqueueItem>
                <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twcecp:ChangedCode)" DisplayName="ChangedCodes_EnqueueItem&lt;IEnumerable&lt;ChangedCode&gt;&gt;" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_4">
                  <vbw:EnqueueItem.Item>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcecp:ChangedCode)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcecp:ChangedCode)">ChangedCodes</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Item>
                  <vbw:EnqueueItem.Queue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:ChangedCode))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:ChangedCode))">ChangedCodesQueue</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Queue>
                </vbw:EnqueueItem>
              </Parallel>
              <Assign sap2010:WorkflowViewState.IdRef="Assign_2">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">ProcessingCountryCompleted</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">ProcessingCountryCompleted + 1</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_1">
                <vbw:WriteTrackingMessage.Message>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">String.Format("Processing '{0}' country is completed. {1} countries are remaining.", new Vanrise.Common.Business.CountryManager().GetCountry(Country.CountryId).Name, (CountriesToProcess.Count() - ProcessingCountryCompleted))</mca:CSharpValue>
                  </InArgument>
                </vbw:WriteTrackingMessage.Message>
                <vbw:WriteTrackingMessage.Severity>
                  <InArgument x:TypeArguments="s:Nullable(vc:LogEntryType)">
                    <mca:CSharpValue x:TypeArguments="s:Nullable(vc:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
                  </InArgument>
                </vbw:WriteTrackingMessage.Severity>
              </vbw:WriteTrackingMessage>
            </Sequence>
          </ActivityAction>
        </vbw:ParallelForEach>
        <Assign sap2010:WorkflowViewState.IdRef="Assign_1">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Boolean">
              <mca:CSharpReference x:TypeArguments="x:Boolean">CountriesProcessingStatus.IsComplete</mca:CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Boolean">True</InArgument>
          </Assign.Value>
        </Assign>
      </Sequence>
      <local:ApplyEntitiesToDBProcess sap2010:WorkflowViewState.IdRef="ApplyEntitiesToDBProcess_1">
        <local:ApplyEntitiesToDBProcess.ChangedCodesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:ChangedCode))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:ChangedCode))">ChangedCodesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.ChangedCodesQueue>
        <local:ApplyEntitiesToDBProcess.ChangedZonesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:ChangedZone))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:ChangedZone))">ChangedZonesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.ChangedZonesQueue>
        <local:ApplyEntitiesToDBProcess.CodePreparationMainProcessStatus>
          <InArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">CountriesProcessingStatus</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.CodePreparationMainProcessStatus>
        <local:ApplyEntitiesToDBProcess.NewCodesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:AddedCode))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:AddedCode))">NewCodesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.NewCodesQueue>
        <local:ApplyEntitiesToDBProcess.NewZonesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:AddedZone))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcecp:AddedZone))">NewZonesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.NewZonesQueue>
        <local:ApplyEntitiesToDBProcess.SellingNumberPlanId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.SellingNumberPlanId>
      </local:ApplyEntitiesToDBProcess>
    </Parallel>
    <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_5" Message="Finished processing imported data. Ready to start synchronization with existing entities.">
      <vbw:WriteTrackingMessage.Severity>
        <InArgument x:TypeArguments="s:Nullable(vc:LogEntryType)">
          <mca:CSharpValue x:TypeArguments="s:Nullable(vc:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Severity>
    </vbw:WriteTrackingMessage>
    <twcba1:SyncImportedDataWithDB sap2010:WorkflowViewState.IdRef="SyncImportedDataWithDB_1">
      <twcba1:SyncImportedDataWithDB.SellingNumberPlanId>
        <InArgument x:TypeArguments="x:Int32">
          <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
        </InArgument>
      </twcba1:SyncImportedDataWithDB.SellingNumberPlanId>
    </twcba1:SyncImportedDataWithDB>
    <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_6" Message="Finished synchronizing with existing entities.">
      <vbw:WriteTrackingMessage.Severity>
        <InArgument x:TypeArguments="s:Nullable(vc:LogEntryType)">
          <mca:CSharpValue x:TypeArguments="s:Nullable(vc:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Severity>
    </vbw:WriteTrackingMessage>
    <twcba1:UpdateCodePreparationStateStatus sap2010:WorkflowViewState.IdRef="UpdateCodePreparationStateStatus_1">
      <twcba1:UpdateCodePreparationStateStatus.SellingNumberPlanId>
        <InArgument x:TypeArguments="x:Int32">
          <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
        </InArgument>
      </twcba1:UpdateCodePreparationStateStatus.SellingNumberPlanId>
      <twcba1:UpdateCodePreparationStateStatus.Status>
        <InArgument x:TypeArguments="twce:CodePreparationStatus">
          <mca:CSharpValue x:TypeArguments="twce:CodePreparationStatus">Input.IsFromExcel ? Entities.CodePreparationStatus.Canceled : Entities.CodePreparationStatus.Completed</mca:CSharpValue>
        </InArgument>
      </twcba1:UpdateCodePreparationStateStatus.Status>
    </twcba1:UpdateCodePreparationStateStatus>
    <sads:DebugSymbol.Symbol>d0pDOlxURlNcVE9uZVYyXENvZGVcVE9uZVYyXFRPbmUuV2hTLkNvZGVQcmVwYXJhdGlvbi5CUFxDb2RlUHJlcGFyYXRpb24ueGFtbH1FA80EDgIBAVELUdUBAgE+VgtW1QECAS9bC1vZAQIBIGALYNkBAgERZQtlcAIBAmkFswEKAwHKC7QBBb8BIAMBqwvAAQXVASMDAe4K1gEF3AEtAwHeCt0BBegBGAMBvwrpAQX0ARQDAaAK9QEF+wEgAwGPCvwBBYcCJwMB8AmIAgWOAiADAd8JjwIFqgQQAwGeAasEBbEEIAMBjQGyBAW4BCUCAX25BAW/BCACAWzABAXLBC8CAU1sC2xbAwHLC3AJjwEkAwG1DJIBCbEBIgMB2gu8AQu8AYMBAwG7C7cBC7cBpgEDAawLyAELyAFwAwGcC9IBC9IBfAMBjQvDAQvDAWwDAf4KzQELzQFuAwHvCtkBC9kBhQEDAd8K4AEL4AGxAQMBzwrlAQvlAX8DAcAK8QEL8QF3AwGwCuwBC+wBfQMBoQr4AQv4AYMBAwGRCvUBYPUBfQMBkAqEAguEAnQDAYAK/wEL/wGDAQMB8QmLAguLAoMBAwHhCYgCYIgCiQEDAeAJkwIHiQQSAwGAAooEB6kEKAMBnwGuBAuuBIMBAwGPAasEYKsEuwEDAY4BtQQLtQRhAgF+vAQLvASDAQIBbrkEYLkEkAECAW3DBAvDBGECAV3IBAvIBMEBAgFOeA94fAMBgQ1zD3N4AwHyDIwBD4wBYgMB4wyCAQ+CAWwDAdQMhwEPhwFdAwHFDH0PfXoDAbYMmgEPmgF8AwGmDJUBD5UBeAMBlwypAQ+pAWIDAYgMrgEPrgFlAwH5C6QBD6QBaAMB6gufAQ+fAXoDAdsLlwIJ/gMfAwGUAv8DCYgEEgMBgQKhBA2hBH8DAfABjQQNjQSFAQMB4AGmBA2mBGMDAdABlwQNlwRyAwHAAZIEDZIEhQEDAbABnAQNnAR/AwGgAZoCD5oCfwMBzgmXArUBlwK5AQMBzQmXApkBlwKdAQMBzAmhAg38AxgDAZUChgQ1hgQ5AwGTAoIED4IEegMBggKsAg/ZAhoDAfkH2gIP5QItAwHEB+YCD/YCLQMB9Qb3Ag+lAywDAYoFpgMPsQMxAwHVBLIDD+MDGgMBgAPkAw/vAxgDAcsC8AMP+wMqAwGWAq0CEcICKwMB4wjDAhHYAisDAfoH3QIV3QJ9AwHfB+ICFeIClAEDAcUH7gIV7gKEAQMBqgfpAhXpAn0DAZAH8wIV8wKMAQMB9gaTAxWTA3wDAdsGiQMViQOCAQMBwQadAxWdA3wDAacGhAMVhAN+AwGNBvoCFfoCggEDAfMFogMVogN8AwHZBZgDFZgDjAEDAb8FjgMVjgOAAQMBpQX/AhX/AoIBAwGLBakDFakDdAMB8ASuAxWuA3QDAdYEswMRvgMjAwGgBL8DEcoDIwMB6wPLAxHWAyMDAbYD1wMR4gMjAwGBA+wDFewDcAMB5gLnAxXnA3QDAcwC+AMV+AONAQMBsQLzAxXzA7MCAwGXArUCF7UChwEDAbIJvwIXvwJtAwGYCboCF7oCYgMB/giwAhewAmUDAeQI1QIX1QJtAwHJCMsCF8sChwEDAa8I0AIX0AJiAwGVCMYCF8YCZQMB+we7Axe7A4kBAwG7BLYDF7YDdgMBoQTHAxfHA4kBAwGGBMIDF8IDdgMB7APTAxfTA48BAwHRA84DF84DfAMBtwPfAxffA48BAwGcA9oDF9oDfAMBggM=</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="GetDataFromSource_2" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="GetDataFromView_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_1" sap:VirtualizedContainerService.HintSize="1462,210" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_2" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="StructureDataByZones_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="GetImportedDataValidationRules_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="CombineLists`1_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="Validate_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_3" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="StructureDataByCountries_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_4" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="GetExistingZones_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetExistingCodes_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_1" sap:VirtualizedContainerService.HintSize="1034,86" />
      <sap2010:ViewStateData Id="PrepareExistingZones_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="PrepareExistingCodes_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="ProcessCountryCodes_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="ReserveIdsForNewEntities_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="EnqueueItem`1_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_3" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_4" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_3" sap:VirtualizedContainerService.HintSize="1034,86" />
      <sap2010:ViewStateData Id="Assign_2" sap:VirtualizedContainerService.HintSize="1034,62" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="1056,748">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ParallelForEach`1_2" sap:VirtualizedContainerService.HintSize="1086,898" />
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="1086,62" />
      <sap2010:ViewStateData Id="Sequence_4" sap:VirtualizedContainerService.HintSize="1108,1124">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ApplyEntitiesToDBProcess_1" sap:VirtualizedContainerService.HintSize="200,1124" />
      <sap2010:ViewStateData Id="Parallel_4" sap:VirtualizedContainerService.HintSize="1462,1170" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_5" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="SyncImportedDataWithDB_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_6" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="UpdateCodePreparationStateStatus_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="1484,2288">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TOne.WhS.CodePreparation.BP.CodePreparation_1" sap:VirtualizedContainerService.HintSize="1524,2368" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>