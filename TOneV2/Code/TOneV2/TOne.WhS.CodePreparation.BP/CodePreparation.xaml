<Activity mc:Ignorable="sap sap2010 sads" x:Class="TOne.WhS.CodePreparation.BP.CodePreparation"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:local="clr-namespace:TOne.WhS.CodePreparation.BP"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:sc="clr-namespace:System.Collections;assembly=mscorlib"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:twbe="clr-namespace:TOne.WhS.BusinessEntity.Entities;assembly=TOne.WhS.BusinessEntity.Entities"
 xmlns:twcb="clr-namespace:TOne.WhS.CodePreparation.Business;assembly=TOne.WhS.CodePreparation.Business"
 xmlns:twcba="clr-namespace:TOne.WhS.CodePreparation.BP.Arguments;assembly=TOne.WhS.CodePreparation.BP.Arguments"
 xmlns:twcba1="clr-namespace:TOne.WhS.CodePreparation.BP.Activities;assembly=TOne.WhS.CodePreparation.BP.Activities"
 xmlns:twcbat="clr-namespace:TOne.WhS.CodePreparation.BP.Arguments.Tasks;assembly=TOne.WhS.CodePreparation.BP.Arguments"
 xmlns:twce="clr-namespace:TOne.WhS.CodePreparation.Entities;assembly=TOne.WhS.CodePreparation.Entities"
 xmlns:twcep="clr-namespace:TOne.WhS.CodePreparation.Entities.Processing;assembly=TOne.WhS.CodePreparation.Entities"
 xmlns:vb="clr-namespace:Vanrise.BusinessProcess;assembly=Vanrise.BusinessProcess"
 xmlns:vbe="clr-namespace:Vanrise.BusinessProcess.Entities;assembly=Vanrise.BusinessProcess.Entities"
 xmlns:vbw="clr-namespace:Vanrise.BusinessProcess.WFActivities;assembly=Vanrise.BusinessProcess.WFActivities"
 xmlns:ve="clr-namespace:Vanrise.Entities;assembly=Vanrise.Entities"
 xmlns:vq="clr-namespace:Vanrise.Queueing;assembly=Vanrise.Queueing"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="Input" Type="InArgument(twcba:CodePreparationInput)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap2010:WorkflowViewState.IdRef>TOne.WhS.CodePreparation.BP.CodePreparation_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>TOne.WhS.CodePreparation.BP.Arguments</x:String>
      <x:String>Vanrise.Queueing</x:String>
      <x:String>Vanrise.BusinessProcess</x:String>
      <x:String>TOne.WhS.CodePreparation.Entities</x:String>
      <x:String>TOne.WhS.CodePreparation.Entities.Processing</x:String>
      <x:String>TOne.WhS.CodePreparation.BP.Arguments.Tasks</x:String>
      <x:String>TOne.WhS.CodePreparation.Business</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.MainExtensions</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.WFActivities</AssemblyReference>
      <AssemblyReference>Vanrise.Common</AssemblyReference>
      <AssemblyReference>Vanrise.Common.Business</AssemblyReference>
      <AssemblyReference>Vanrise.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.GenericData.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.Queueing</AssemblyReference>
      <AssemblyReference>TOne.WhS.BusinessEntity.Entities</AssemblyReference>
      <AssemblyReference>TOne.WhS.CodePreparation.BP.Activities</AssemblyReference>
      <AssemblyReference>TOne.WhS.CodePreparation.BP.Arguments</AssemblyReference>
      <AssemblyReference>TOne.WhS.CodePreparation.Business</AssemblyReference>
      <AssemblyReference>TOne.WhS.CodePreparation.Entities</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>TOne.WhS.CodePreparation.BP</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Root" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="scg:IEnumerable(twcep:CodeToClose)" Name="CodesToClose" />
      <Variable x:TypeArguments="scg:IEnumerable(twcep:CodeToMove)" Name="CodesToMove" />
      <Variable x:TypeArguments="s:DateTime" Name="MinimumDate" />
      <Variable x:TypeArguments="scg:IEnumerable(twcep:CountryToProcess)" Name="CountriesToProcess" />
      <Variable x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)" Name="ImportedDataToValidate" />
      <Variable x:TypeArguments="scg:IEnumerable(twcep:CodeToAdd)" Name="CodesToAdd" />
      <Variable x:TypeArguments="scg:IEnumerable(twcep:ZoneToProcess)" Name="ZonesToProcess" />
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:AddedZone))" Name="NewZonesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:AddedZone))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.Processing.AddedZone&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:AddedCode))" Name="NewCodesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:AddedCode))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.Processing.AddedCode&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZone))" Name="ChangedZonesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZone))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.Processing.ChangedZone&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedCode))" Name="ChangedCodesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedCode))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.Processing.ChangedCode&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="CountriesProcessingStatus">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">new AsyncActivityStatus()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:Dictionary(x:Int64, scg:IEnumerable(twbe:SaleCode))" Name="SaleCodesByZoneId" />
      <Variable x:TypeArguments="twce:Changes" Name="Changes">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="twce:Changes">new Changes()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:IEnumerable(twce:ImportedCode)" Name="ImportedCodes" />
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedRate))" Name="ChangedRatesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedRate))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.Processing.ChangedRate&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)" Name="DataToValidateAfterProcessing" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SaleZone)" Name="ExistingZoneEntities" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SaleCode)" Name="ExistingCodeEntities" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SaleRate)" Name="ExistingRateEntities" />
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:ZonePreview))" Name="PreviewZonesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:ZonePreview))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.ZonePreview&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:CodePreview))" Name="PreviewCodesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:CodePreview))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.CodePreview&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="twcbat:PreviewTaskExecutionInformation" Name="ContinueExecution">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="twcbat:PreviewTaskExecutionInformation">new TOne.WhS.CodePreparation.BP.Arguments.Tasks.PreviewTaskExecutionInformation()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:AddedRate))" Name="NewRatesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:AddedRate))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.AddedRate&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:PriceListToAdd))" Name="NewSalePriceListsQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:PriceListToAdd))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.Processing.PriceListToAdd&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="twcb:SalePriceListsByOwner" Name="SalePriceListsByOwner">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="twcb:SalePriceListsByOwner">new SalePriceListsByOwner();</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:RatePreview))" Name="PreviewRatesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:RatePreview))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.RatePreview&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SaleEntityZoneService)" Name="ExistingZoneServicesEntities" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SaleZoneRoutingProduct)" Name="ExistingZoneRoutingProductsEntities" />
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZoneServices))" Name="ChangedZonesServicesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZoneServices))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.Processing.ChangedZoneServices&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZoneRoutingProducts))" Name="ChangedZonesRoutingProductsQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZoneRoutingProducts))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.CodePreparation.Entities.Processing.ChangedZoneRoutingProducts&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:List(twce:RatePreview)" Name="RatesPreview">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="scg:List(twce:RatePreview)">new List&lt;RatePreview&gt;();</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:List(twbe:SalePLZoneChange)" Name="SalePLZonesChanges">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="scg:List(twbe:SalePLZoneChange)">new List&lt;BusinessEntity.Entities.SalePLZoneChange&gt;();</mca:CSharpValue>
        </Variable.Default>
      </Variable>
    </Sequence.Variables>
    <twcba1:SetCPContext sap2010:WorkflowViewState.IdRef="SetCPContext_1">
      <twcba1:SetCPContext.EffectiveDate>
        <InArgument x:TypeArguments="s:DateTime">
          <mca:CSharpValue x:TypeArguments="s:DateTime">Input.EffectiveDate.Value</mca:CSharpValue>
        </InArgument>
      </twcba1:SetCPContext.EffectiveDate>
      <twcba1:SetCPContext.SellingNumberPlanId>
        <InArgument x:TypeArguments="x:Int32">
          <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
        </InArgument>
      </twcba1:SetCPContext.SellingNumberPlanId>
    </twcba1:SetCPContext>
    <If sap2010:WorkflowViewState.IdRef="If_1">
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <mca:CSharpValue x:TypeArguments="x:Boolean">Input.IsFromExcel</mca:CSharpValue>
        </InArgument>
      </If.Condition>
      <If.Then>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_6">
          <Sequence.Variables>
            <Variable x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)" Name="ImportedCodesZonesToValidate" />
          </Sequence.Variables>
          <twcba1:ReadFromSource sap2010:WorkflowViewState.IdRef="ReadFromSource_1">
            <twcba1:ReadFromSource.EffectiveDate>
              <InArgument x:TypeArguments="s:DateTime">
                <mca:CSharpValue x:TypeArguments="s:DateTime">Input.EffectiveDate.Value</mca:CSharpValue>
              </InArgument>
            </twcba1:ReadFromSource.EffectiveDate>
            <twcba1:ReadFromSource.FileId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">Input.FileId.Value</mca:CSharpValue>
              </InArgument>
            </twcba1:ReadFromSource.FileId>
            <twcba1:ReadFromSource.HasHeader>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">Input.HasHeader</mca:CSharpValue>
              </InArgument>
            </twcba1:ReadFromSource.HasHeader>
            <twcba1:ReadFromSource.ImportedCodes>
              <OutArgument x:TypeArguments="scg:IEnumerable(twce:ImportedCode)">
                <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twce:ImportedCode)">ImportedCodes</mca:CSharpReference>
              </OutArgument>
            </twcba1:ReadFromSource.ImportedCodes>
            <twcba1:ReadFromSource.MinimumDate>
              <OutArgument x:TypeArguments="s:DateTime">
                <mca:CSharpReference x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpReference>
              </OutArgument>
            </twcba1:ReadFromSource.MinimumDate>
          </twcba1:ReadFromSource>
          <vbw:ExecuteRules BusinessRulesKey="CP_ValidateCodesZones" sap2010:WorkflowViewState.IdRef="ExecuteRules_1">
            <vbw:ExecuteRules.ImportedDataToValidate>
              <InArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedCodes</mca:CSharpValue>
              </InArgument>
            </vbw:ExecuteRules.ImportedDataToValidate>
          </vbw:ExecuteRules>
          <twcba1:GetDataFromImportedCodes sap2010:WorkflowViewState.IdRef="GetDataFromImportedCodes_1">
            <twcba1:GetDataFromImportedCodes.CodesToAdd>
              <OutArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToAdd)">
                <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:CodeToAdd)">CodesToAdd</mca:CSharpReference>
              </OutArgument>
            </twcba1:GetDataFromImportedCodes.CodesToAdd>
            <twcba1:GetDataFromImportedCodes.CodesToClose>
              <OutArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToClose)">
                <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:CodeToClose)">CodesToClose</mca:CSharpReference>
              </OutArgument>
            </twcba1:GetDataFromImportedCodes.CodesToClose>
            <twcba1:GetDataFromImportedCodes.CodesToMove>
              <OutArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToMove)">
                <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:CodeToMove)">CodesToMove</mca:CSharpReference>
              </OutArgument>
            </twcba1:GetDataFromImportedCodes.CodesToMove>
            <twcba1:GetDataFromImportedCodes.EffectiveDate>
              <InArgument x:TypeArguments="s:DateTime">
                <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
              </InArgument>
            </twcba1:GetDataFromImportedCodes.EffectiveDate>
            <twcba1:GetDataFromImportedCodes.ImportedCodes>
              <InArgument x:TypeArguments="scg:IEnumerable(twce:ImportedCode)">
                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twce:ImportedCode)">ImportedCodes</mca:CSharpValue>
              </InArgument>
            </twcba1:GetDataFromImportedCodes.ImportedCodes>
          </twcba1:GetDataFromImportedCodes>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_5">
          <twcba1:GetChangesFromView sap2010:WorkflowViewState.IdRef="GetChangesFromView_1">
            <twcba1:GetChangesFromView.Changes>
              <OutArgument x:TypeArguments="twce:Changes">
                <mca:CSharpReference x:TypeArguments="twce:Changes">Changes</mca:CSharpReference>
              </OutArgument>
            </twcba1:GetChangesFromView.Changes>
            <twcba1:GetChangesFromView.SaleCodesByZoneId>
              <OutArgument x:TypeArguments="scg:Dictionary(x:Int64, scg:IEnumerable(twbe:SaleCode))">
                <mca:CSharpReference x:TypeArguments="scg:Dictionary(x:Int64, scg:IEnumerable(twbe:SaleCode))">SaleCodesByZoneId</mca:CSharpReference>
              </OutArgument>
            </twcba1:GetChangesFromView.SaleCodesByZoneId>
            <twcba1:GetChangesFromView.SellingNumberPlanId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
              </InArgument>
            </twcba1:GetChangesFromView.SellingNumberPlanId>
          </twcba1:GetChangesFromView>
          <twcba1:GetDataFromCodeChanges sap2010:WorkflowViewState.IdRef="GetDataFromCodeChanges_1">
            <twcba1:GetDataFromCodeChanges.Changes>
              <InArgument x:TypeArguments="twce:Changes">
                <mca:CSharpValue x:TypeArguments="twce:Changes">Changes</mca:CSharpValue>
              </InArgument>
            </twcba1:GetDataFromCodeChanges.Changes>
            <twcba1:GetDataFromCodeChanges.CodesToAdd>
              <OutArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToAdd)">
                <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:CodeToAdd)">CodesToAdd</mca:CSharpReference>
              </OutArgument>
            </twcba1:GetDataFromCodeChanges.CodesToAdd>
            <twcba1:GetDataFromCodeChanges.CodesToClose>
              <OutArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToClose)">
                <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:CodeToClose)">CodesToClose</mca:CSharpReference>
              </OutArgument>
            </twcba1:GetDataFromCodeChanges.CodesToClose>
            <twcba1:GetDataFromCodeChanges.CodesToMove>
              <OutArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToMove)">
                <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:CodeToMove)">CodesToMove</mca:CSharpReference>
              </OutArgument>
            </twcba1:GetDataFromCodeChanges.CodesToMove>
            <twcba1:GetDataFromCodeChanges.EffectiveDate>
              <InArgument x:TypeArguments="s:DateTime">
                <mca:CSharpValue x:TypeArguments="s:DateTime">Input.EffectiveDate.Value</mca:CSharpValue>
              </InArgument>
            </twcba1:GetDataFromCodeChanges.EffectiveDate>
            <twcba1:GetDataFromCodeChanges.MinimumDate>
              <OutArgument x:TypeArguments="s:DateTime">
                <mca:CSharpReference x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpReference>
              </OutArgument>
            </twcba1:GetDataFromCodeChanges.MinimumDate>
          </twcba1:GetDataFromCodeChanges>
          <twcba1:GetDataFromZoneChanges sap2010:WorkflowViewState.IdRef="GetDataFromZoneChanges_1">
            <twcba1:GetDataFromZoneChanges.Changes>
              <InArgument x:TypeArguments="twce:Changes">
                <mca:CSharpValue x:TypeArguments="twce:Changes">Changes</mca:CSharpValue>
              </InArgument>
            </twcba1:GetDataFromZoneChanges.Changes>
            <twcba1:GetDataFromZoneChanges.CodesToClose>
              <InOutArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToClose)">
                <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:CodeToClose)">CodesToClose</mca:CSharpReference>
              </InOutArgument>
            </twcba1:GetDataFromZoneChanges.CodesToClose>
            <twcba1:GetDataFromZoneChanges.CodesToMove>
              <InOutArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToMove)">
                <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:CodeToMove)">CodesToMove</mca:CSharpReference>
              </InOutArgument>
            </twcba1:GetDataFromZoneChanges.CodesToMove>
            <twcba1:GetDataFromZoneChanges.MinimumDate>
              <InArgument x:TypeArguments="s:DateTime">
                <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
              </InArgument>
            </twcba1:GetDataFromZoneChanges.MinimumDate>
            <twcba1:GetDataFromZoneChanges.SaleCodesByZoneId>
              <InArgument x:TypeArguments="scg:Dictionary(x:Int64, scg:IEnumerable(twbe:SaleCode))">
                <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, scg:IEnumerable(twbe:SaleCode))">SaleCodesByZoneId</mca:CSharpValue>
              </InArgument>
            </twcba1:GetDataFromZoneChanges.SaleCodesByZoneId>
          </twcba1:GetDataFromZoneChanges>
          <vbw:ExecuteRules BusinessRulesKey="CP_ValidateUICodesZones" sap2010:WorkflowViewState.IdRef="ExecuteRules_4">
            <vbw:ExecuteRules.ImportedDataToValidate>
              <InArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">Changes.NewZones</mca:CSharpValue>
              </InArgument>
            </vbw:ExecuteRules.ImportedDataToValidate>
          </vbw:ExecuteRules>
        </Sequence>
      </If.Else>
    </If>
    <twcba1:StructureDataByZones sap2010:WorkflowViewState.IdRef="StructureDataByZones_1">
      <twcba1:StructureDataByZones.CodesToAdd>
        <InArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToAdd)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:CodeToAdd)">CodesToAdd</mca:CSharpValue>
        </InArgument>
      </twcba1:StructureDataByZones.CodesToAdd>
      <twcba1:StructureDataByZones.CodesToClose>
        <InArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToClose)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:CodeToClose)">CodesToClose</mca:CSharpValue>
        </InArgument>
      </twcba1:StructureDataByZones.CodesToClose>
      <twcba1:StructureDataByZones.CodesToMove>
        <InArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToMove)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:CodeToMove)">CodesToMove</mca:CSharpValue>
        </InArgument>
      </twcba1:StructureDataByZones.CodesToMove>
      <twcba1:StructureDataByZones.ZonesToProcess>
        <OutArgument x:TypeArguments="scg:IEnumerable(twcep:ZoneToProcess)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:ZoneToProcess)">ZonesToProcess</mca:CSharpReference>
        </OutArgument>
      </twcba1:StructureDataByZones.ZonesToProcess>
    </twcba1:StructureDataByZones>
    <vbw:CombineLists x:TypeArguments="vbe:IRuleTarget" sap2010:WorkflowViewState.IdRef="CombineLists`1_1">
      <vbw:CombineLists.InputLists>
        <InArgument x:TypeArguments="scg:List(sc:IEnumerable)">
          <mca:CSharpValue x:TypeArguments="scg:List(sc:IEnumerable)">new List&lt;System.Collections.IEnumerable&gt; {CodesToAdd,CodesToMove, ZonesToProcess}</mca:CSharpValue>
        </InArgument>
      </vbw:CombineLists.InputLists>
      <vbw:CombineLists.OutputList>
        <OutArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedDataToValidate</mca:CSharpReference>
        </OutArgument>
      </vbw:CombineLists.OutputList>
    </vbw:CombineLists>
    <vbw:ExecuteRules BusinessRulesKey="CP_ValidateZones" sap2010:WorkflowViewState.IdRef="ExecuteRules_2">
      <vbw:ExecuteRules.ImportedDataToValidate>
        <InArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedDataToValidate</mca:CSharpValue>
        </InArgument>
      </vbw:ExecuteRules.ImportedDataToValidate>
    </vbw:ExecuteRules>
    <twcba1:GetExistingZones Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingZones_1">
      <twcba1:GetExistingZones.ExistingZoneEntities>
        <OutArgument x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">ExistingZoneEntities</mca:CSharpReference>
        </OutArgument>
      </twcba1:GetExistingZones.ExistingZoneEntities>
      <twcba1:GetExistingZones.MinimumDate>
        <InArgument x:TypeArguments="s:DateTime">
          <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
        </InArgument>
      </twcba1:GetExistingZones.MinimumDate>
      <twcba1:GetExistingZones.SellingNumberPlanID>
        <InArgument x:TypeArguments="x:Int32">
          <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
        </InArgument>
      </twcba1:GetExistingZones.SellingNumberPlanID>
    </twcba1:GetExistingZones>
    <twcba1:StructureDataByCountries sap2010:WorkflowViewState.IdRef="StructureDataByCountries_1">
      <twcba1:StructureDataByCountries.CountriesToProcess>
        <OutArgument x:TypeArguments="scg:IEnumerable(twcep:CountryToProcess)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:CountryToProcess)">CountriesToProcess</mca:CSharpReference>
        </OutArgument>
      </twcba1:StructureDataByCountries.CountriesToProcess>
      <twcba1:StructureDataByCountries.ExistingZoneEntities>
        <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">ExistingZoneEntities</mca:CSharpValue>
        </InArgument>
      </twcba1:StructureDataByCountries.ExistingZoneEntities>
      <twcba1:StructureDataByCountries.ZonesToProcess>
        <InArgument x:TypeArguments="scg:IEnumerable(twcep:ZoneToProcess)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ZoneToProcess)">ZonesToProcess</mca:CSharpValue>
        </InArgument>
      </twcba1:StructureDataByCountries.ZonesToProcess>
    </twcba1:StructureDataByCountries>
    <vbw:ExecuteRules BusinessRulesKey="CP_ValidateCountries" sap2010:WorkflowViewState.IdRef="ExecuteRules_3">
      <vbw:ExecuteRules.ImportedDataToValidate>
        <InArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">CountriesToProcess</mca:CSharpValue>
        </InArgument>
      </vbw:ExecuteRules.ImportedDataToValidate>
    </vbw:ExecuteRules>
    <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_3" Message="Imported data is validated.">
      <vbw:WriteTrackingMessage.Severity>
        <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
          <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Severity>
    </vbw:WriteTrackingMessage>
    <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_4" Message="Ready to start processing imported data">
      <vbw:WriteTrackingMessage.Severity>
        <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
          <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Severity>
    </vbw:WriteTrackingMessage>
    <Parallel sap2010:WorkflowViewState.IdRef="Parallel_1">
      <twcba1:GetExistingCodes Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingCodes_1">
        <twcba1:GetExistingCodes.ExistingCodeEntities>
          <InOutArgument x:TypeArguments="scg:IEnumerable(twbe:SaleCode)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SaleCode)">ExistingCodeEntities</mca:CSharpReference>
          </InOutArgument>
        </twcba1:GetExistingCodes.ExistingCodeEntities>
        <twcba1:GetExistingCodes.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twcba1:GetExistingCodes.MinimumDate>
        <twcba1:GetExistingCodes.SellingNumberPlanID>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
          </InArgument>
        </twcba1:GetExistingCodes.SellingNumberPlanID>
      </twcba1:GetExistingCodes>
      <twcba1:GetExistingRates Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingRates_1">
        <twcba1:GetExistingRates.ExistingRateEntities>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:SaleRate)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SaleRate)">ExistingRateEntities</mca:CSharpReference>
          </OutArgument>
        </twcba1:GetExistingRates.ExistingRateEntities>
        <twcba1:GetExistingRates.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twcba1:GetExistingRates.MinimumDate>
        <twcba1:GetExistingRates.sellingNumberPlanId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
          </InArgument>
        </twcba1:GetExistingRates.sellingNumberPlanId>
      </twcba1:GetExistingRates>
      <twcba1:GetExistingZonesServices Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingZonesServices_2">
        <twcba1:GetExistingZonesServices.ExistingSaleEntityZonesServices>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:SaleEntityZoneService)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SaleEntityZoneService)">ExistingZoneServicesEntities</mca:CSharpReference>
          </OutArgument>
        </twcba1:GetExistingZonesServices.ExistingSaleEntityZonesServices>
        <twcba1:GetExistingZonesServices.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twcba1:GetExistingZonesServices.MinimumDate>
        <twcba1:GetExistingZonesServices.SellingNumberPlanID>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
          </InArgument>
        </twcba1:GetExistingZonesServices.SellingNumberPlanID>
      </twcba1:GetExistingZonesServices>
      <twcba1:GetExistingZonesRoutingProducts Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingZonesRoutingProducts_1">
        <twcba1:GetExistingZonesRoutingProducts.ExistingSaleZonesRoutingProductEntities>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:SaleZoneRoutingProduct)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SaleZoneRoutingProduct)">ExistingZoneRoutingProductsEntities</mca:CSharpReference>
          </OutArgument>
        </twcba1:GetExistingZonesRoutingProducts.ExistingSaleZonesRoutingProductEntities>
        <twcba1:GetExistingZonesRoutingProducts.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twcba1:GetExistingZonesRoutingProducts.MinimumDate>
        <twcba1:GetExistingZonesRoutingProducts.SellingNumberPlanID>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
          </InArgument>
        </twcba1:GetExistingZonesRoutingProducts.SellingNumberPlanID>
      </twcba1:GetExistingZonesRoutingProducts>
    </Parallel>
    <twcba1:PrepareZonesInfo Status="{x:Null}" sap2010:WorkflowViewState.IdRef="PrepareZonesInfo_1">
      <twcba1:PrepareZonesInfo.ExistingZoneEntities>
        <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">ExistingZoneEntities</mca:CSharpValue>
        </InArgument>
      </twcba1:PrepareZonesInfo.ExistingZoneEntities>
    </twcba1:PrepareZonesInfo>
    <Parallel sap2010:WorkflowViewState.IdRef="Parallel_4">
      <Parallel.Variables>
        <Variable x:TypeArguments="x:Int32" Name="ProcessingCountryCompleted" />
      </Parallel.Variables>
      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_4">
        <vbw:ParallelForEach x:TypeArguments="twcep:CountryToProcess" sap2010:WorkflowViewState.IdRef="ParallelForEach`1_2" InitialConcurrentInstances="10" MaxConcurrentInstances="10">
          <vbw:ParallelForEach.Values>
            <InArgument x:TypeArguments="scg:IEnumerable(twcep:CountryToProcess)">
              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:CountryToProcess)">CountriesToProcess</mca:CSharpValue>
            </InArgument>
          </vbw:ParallelForEach.Values>
          <ActivityAction x:TypeArguments="twcep:CountryToProcess">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="twcep:CountryToProcess" Name="Country" />
            </ActivityAction.Argument>
            <Sequence DisplayName="ProcessData" sap2010:WorkflowViewState.IdRef="Sequence_3">
              <Sequence.Variables>
                <Variable x:TypeArguments="scg:IEnumerable(twcep:AddedCode)" Name="NewCodes" />
                <Variable x:TypeArguments="scg:IEnumerable(twcep:ExistingCode)" Name="ExistingCodes" />
                <Variable x:TypeArguments="scg:IEnumerable(twcep:ChangedCode)" Name="ChangedCodes" />
                <Variable x:TypeArguments="scg:IEnumerable(twcep:ChangedZone)" Name="ChangedZones" />
                <Variable x:TypeArguments="scg:IEnumerable(twcep:ExistingRate)" Name="ExistingRates" />
                <Variable x:TypeArguments="scg:IEnumerable(twcep:ChangedRate)" Name="ChangedRates" />
                <Variable x:TypeArguments="scg:IEnumerable(twcep:ExistingZone)" Name="NotChangedZones" />
                <Variable x:TypeArguments="scg:IEnumerable(twce:NotImportedCode)" Name="NotImportedCodes" />
                <Variable x:TypeArguments="twcep:ZonesByName" Name="NewAndExistingZones" />
                <Variable x:TypeArguments="scg:Dictionary(x:String, scg:List(twcep:ExistingZone))" Name="ClosedExistingZones" />
                <Variable x:TypeArguments="scg:IEnumerable(twce:AddedRate)" Name="NewRates" />
                <Variable x:TypeArguments="scg:IEnumerable(twce:NotImportedZone)" Name="NotImportedZones" />
                <Variable x:TypeArguments="scg:IEnumerable(twcep:ChangedZoneServices)" Name="ChangedZonesServices" />
                <Variable x:TypeArguments="scg:IEnumerable(twcep:ExistingZoneServices)" Name="ExistingZonesServices" />
                <Variable x:TypeArguments="scg:IEnumerable(twcep:ExistingZoneRoutingProducts)" Name="ExistingZonesRoutingProducts" />
                <Variable x:TypeArguments="scg:IEnumerable(twcep:ChangedZoneRoutingProducts)" Name="ChangedZonesRoutingProducts" />
                <Variable x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)" Name="ExistingZonesByZoneId" />
                <Variable x:TypeArguments="scg:IEnumerable(twcep:AddedZone)" Name="NewZones" />
              </Sequence.Variables>
              <twcba1:PrepareExistingZones Status="{x:Null}" sap2010:WorkflowViewState.IdRef="PrepareExistingZones_1">
                <twcba1:PrepareExistingZones.CountryId>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">Country.CountryId</mca:CSharpValue>
                  </InArgument>
                </twcba1:PrepareExistingZones.CountryId>
                <twcba1:PrepareExistingZones.ExistingZoneEntities>
                  <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">ExistingZoneEntities</mca:CSharpValue>
                  </InArgument>
                </twcba1:PrepareExistingZones.ExistingZoneEntities>
                <twcba1:PrepareExistingZones.ExistingZonesByZoneId>
                  <InOutArgument x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">
                    <mca:CSharpReference x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">ExistingZonesByZoneId</mca:CSharpReference>
                  </InOutArgument>
                </twcba1:PrepareExistingZones.ExistingZonesByZoneId>
              </twcba1:PrepareExistingZones>
              <Parallel DisplayName="PrepareExistingCodesAndRates" sap2010:WorkflowViewState.IdRef="Parallel_5">
                <twcba1:PrepareExistingCodes Status="{x:Null}" sap2010:WorkflowViewState.IdRef="PrepareExistingCodes_1">
                  <twcba1:PrepareExistingCodes.ExistingCodeEntities>
                    <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleCode)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleCode)">ExistingCodeEntities</mca:CSharpValue>
                    </InArgument>
                  </twcba1:PrepareExistingCodes.ExistingCodeEntities>
                  <twcba1:PrepareExistingCodes.ExistingCodes>
                    <InOutArgument x:TypeArguments="scg:IEnumerable(twcep:ExistingCode)">
                      <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:ExistingCode)">ExistingCodes</mca:CSharpReference>
                    </InOutArgument>
                  </twcba1:PrepareExistingCodes.ExistingCodes>
                  <twcba1:PrepareExistingCodes.ExistingZonesByZoneId>
                    <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">
                      <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                    </InArgument>
                  </twcba1:PrepareExistingCodes.ExistingZonesByZoneId>
                </twcba1:PrepareExistingCodes>
                <twcba1:PrepareExistingRates sap2010:WorkflowViewState.IdRef="PrepareExistingRates_1">
                  <twcba1:PrepareExistingRates.ExistingRateEntities>
                    <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleRate)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleRate)">ExistingRateEntities</mca:CSharpValue>
                    </InArgument>
                  </twcba1:PrepareExistingRates.ExistingRateEntities>
                  <twcba1:PrepareExistingRates.ExistingRates>
                    <OutArgument x:TypeArguments="scg:IEnumerable(twcep:ExistingRate)">
                      <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:ExistingRate)">ExistingRates</mca:CSharpReference>
                    </OutArgument>
                  </twcba1:PrepareExistingRates.ExistingRates>
                  <twcba1:PrepareExistingRates.ExistingZonesByZoneId>
                    <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">
                      <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                    </InArgument>
                  </twcba1:PrepareExistingRates.ExistingZonesByZoneId>
                </twcba1:PrepareExistingRates>
                <twcba1:PrepareExistingZonesServices sap2010:WorkflowViewState.IdRef="PrepareExistingZonesServices_1">
                  <twcba1:PrepareExistingZonesServices.ExistingZonesByZoneId>
                    <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">
                      <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                    </InArgument>
                  </twcba1:PrepareExistingZonesServices.ExistingZonesByZoneId>
                  <twcba1:PrepareExistingZonesServices.ExistingZonesServices>
                    <OutArgument x:TypeArguments="scg:IEnumerable(twcep:ExistingZoneServices)">
                      <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:ExistingZoneServices)">ExistingZonesServices</mca:CSharpReference>
                    </OutArgument>
                  </twcba1:PrepareExistingZonesServices.ExistingZonesServices>
                  <twcba1:PrepareExistingZonesServices.ExistingZonesServicesEntities>
                    <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleEntityZoneService)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleEntityZoneService)">ExistingZoneServicesEntities</mca:CSharpValue>
                    </InArgument>
                  </twcba1:PrepareExistingZonesServices.ExistingZonesServicesEntities>
                </twcba1:PrepareExistingZonesServices>
                <twcba1:PrepareExistingZonesRoutingProducts sap2010:WorkflowViewState.IdRef="PrepareExistingZonesRoutingProducts_1">
                  <twcba1:PrepareExistingZonesRoutingProducts.ExistingZonesByZoneId>
                    <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">
                      <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                    </InArgument>
                  </twcba1:PrepareExistingZonesRoutingProducts.ExistingZonesByZoneId>
                  <twcba1:PrepareExistingZonesRoutingProducts.ExistingZonesRoutingProducts>
                    <OutArgument x:TypeArguments="scg:IEnumerable(twcep:ExistingZoneRoutingProducts)">
                      <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:ExistingZoneRoutingProducts)">ExistingZonesRoutingProducts</mca:CSharpReference>
                    </OutArgument>
                  </twcba1:PrepareExistingZonesRoutingProducts.ExistingZonesRoutingProducts>
                  <twcba1:PrepareExistingZonesRoutingProducts.ExistingZonesRoutingProductsEntities>
                    <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleZoneRoutingProduct)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleZoneRoutingProduct)">ExistingZoneRoutingProductsEntities</mca:CSharpValue>
                    </InArgument>
                  </twcba1:PrepareExistingZonesRoutingProducts.ExistingZonesRoutingProductsEntities>
                </twcba1:PrepareExistingZonesRoutingProducts>
              </Parallel>
              <twcba1:ProcessCountryCodes Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessCountryCodes_1">
                <twcba1:ProcessCountryCodes.ChangedCodes>
                  <InOutArgument x:TypeArguments="scg:IEnumerable(twcep:ChangedCode)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:ChangedCode)">ChangedCodes</mca:CSharpReference>
                  </InOutArgument>
                </twcba1:ProcessCountryCodes.ChangedCodes>
                <twcba1:ProcessCountryCodes.ChangedZones>
                  <InOutArgument x:TypeArguments="scg:IEnumerable(twcep:ChangedZone)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:ChangedZone)">ChangedZones</mca:CSharpReference>
                  </InOutArgument>
                </twcba1:ProcessCountryCodes.ChangedZones>
                <twcba1:ProcessCountryCodes.ClosedExistingZones>
                  <OutArgument x:TypeArguments="scg:Dictionary(x:String, scg:List(twcep:ExistingZone))">
                    <mca:CSharpReference x:TypeArguments="scg:Dictionary(x:String, scg:List(twcep:ExistingZone))">ClosedExistingZones</mca:CSharpReference>
                  </OutArgument>
                </twcba1:ProcessCountryCodes.ClosedExistingZones>
                <twcba1:ProcessCountryCodes.CodesToAdd>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToAdd)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:CodeToAdd)">Country.CodesToAdd</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryCodes.CodesToAdd>
                <twcba1:ProcessCountryCodes.CodesToClose>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToClose)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:CodeToClose)">Country.CodesToClose</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryCodes.CodesToClose>
                <twcba1:ProcessCountryCodes.CodesToMove>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToMove)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:CodeToMove)">Country.CodesToMove</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryCodes.CodesToMove>
                <twcba1:ProcessCountryCodes.ExistingCodes>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:ExistingCode)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ExistingCode)">ExistingCodes</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryCodes.ExistingCodes>
                <twcba1:ProcessCountryCodes.ExistingZonesByZoneId>
                  <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">
                    <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryCodes.ExistingZonesByZoneId>
                <twcba1:ProcessCountryCodes.NewAndExistingZones>
                  <OutArgument x:TypeArguments="twcep:ZonesByName">
                    <mca:CSharpReference x:TypeArguments="twcep:ZonesByName">NewAndExistingZones</mca:CSharpReference>
                  </OutArgument>
                </twcba1:ProcessCountryCodes.NewAndExistingZones>
                <twcba1:ProcessCountryCodes.NewCodes>
                  <InOutArgument x:TypeArguments="scg:IEnumerable(twcep:AddedCode)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:AddedCode)">NewCodes</mca:CSharpReference>
                  </InOutArgument>
                </twcba1:ProcessCountryCodes.NewCodes>
                <twcba1:ProcessCountryCodes.NewZones>
                  <InOutArgument x:TypeArguments="scg:IEnumerable(twcep:AddedZone)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:AddedZone)">NewZones</mca:CSharpReference>
                  </InOutArgument>
                </twcba1:ProcessCountryCodes.NewZones>
                <twcba1:ProcessCountryCodes.NotImportedCodes>
                  <OutArgument x:TypeArguments="scg:IEnumerable(twce:NotImportedCode)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twce:NotImportedCode)">NotImportedCodes</mca:CSharpReference>
                  </OutArgument>
                </twcba1:ProcessCountryCodes.NotImportedCodes>
              </twcba1:ProcessCountryCodes>
              <twcba1:ProcessCountryZones Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessCountryZones_1">
                <twcba1:ProcessCountryZones.ClosedExistingZones>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, scg:List(twcep:ExistingZone))">
                    <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:String, scg:List(twcep:ExistingZone))">ClosedExistingZones</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryZones.ClosedExistingZones>
                <twcba1:ProcessCountryZones.ExistingCodes>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:ExistingCode)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ExistingCode)">ExistingCodes</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryZones.ExistingCodes>
                <twcba1:ProcessCountryZones.ExistingZones>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:ExistingZone)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ExistingZone)">ExistingZonesByZoneId.Values</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryZones.ExistingZones>
                <twcba1:ProcessCountryZones.NewAndExistingZones>
                  <InArgument x:TypeArguments="twcep:ZonesByName">
                    <mca:CSharpValue x:TypeArguments="twcep:ZonesByName">NewAndExistingZones</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryZones.NewAndExistingZones>
                <twcba1:ProcessCountryZones.NotImportedZones>
                  <OutArgument x:TypeArguments="scg:IEnumerable(twce:NotImportedZone)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twce:NotImportedZone)">NotImportedZones</mca:CSharpReference>
                  </OutArgument>
                </twcba1:ProcessCountryZones.NotImportedZones>
                <twcba1:ProcessCountryZones.ZonesToProcess>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:ZoneToProcess)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ZoneToProcess)">Country.ZonesToProcess</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryZones.ZonesToProcess>
              </twcba1:ProcessCountryZones>
              <twcba1:ProcessCountryRates Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessCountryRates_1">
                <twcba1:ProcessCountryRates.ChangedRates>
                  <OutArgument x:TypeArguments="scg:IEnumerable(twcep:ChangedRate)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:ChangedRate)">ChangedRates</mca:CSharpReference>
                  </OutArgument>
                </twcba1:ProcessCountryRates.ChangedRates>
                <twcba1:ProcessCountryRates.EffectiveDate>
                  <InArgument x:TypeArguments="s:DateTime">
                    <mca:CSharpValue x:TypeArguments="s:DateTime">Input.EffectiveDate.Value</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryRates.EffectiveDate>
                <twcba1:ProcessCountryRates.ExistingRates>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:ExistingRate)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ExistingRate)">ExistingRates</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryRates.ExistingRates>
                <twcba1:ProcessCountryRates.ExistingZonesByZoneId>
                  <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">
                    <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryRates.ExistingZonesByZoneId>
                <twcba1:ProcessCountryRates.NewRates>
                  <OutArgument x:TypeArguments="scg:IEnumerable(twce:AddedRate)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twce:AddedRate)">NewRates</mca:CSharpReference>
                  </OutArgument>
                </twcba1:ProcessCountryRates.NewRates>
                <twcba1:ProcessCountryRates.NotImportedZones>
                  <InArgument x:TypeArguments="scg:IEnumerable(twce:NotImportedZone)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twce:NotImportedZone)">NotImportedZones</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryRates.NotImportedZones>
                <twcba1:ProcessCountryRates.SalePriceListsByOwner>
                  <InArgument x:TypeArguments="twcb:SalePriceListsByOwner">
                    <mca:CSharpValue x:TypeArguments="twcb:SalePriceListsByOwner">SalePriceListsByOwner</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryRates.SalePriceListsByOwner>
                <twcba1:ProcessCountryRates.SellingNumberPlanId>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryRates.SellingNumberPlanId>
                <twcba1:ProcessCountryRates.ZonesToProcess>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:ZoneToProcess)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ZoneToProcess)">Country.ZonesToProcess</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryRates.ZonesToProcess>
              </twcba1:ProcessCountryRates>
              <twcba1:ProcessCountryZonesServices Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessCountryZonesServices_1">
                <twcba1:ProcessCountryZonesServices.ChangedZonesServices>
                  <OutArgument x:TypeArguments="scg:IEnumerable(twcep:ChangedZoneServices)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:ChangedZoneServices)">ChangedZonesServices</mca:CSharpReference>
                  </OutArgument>
                </twcba1:ProcessCountryZonesServices.ChangedZonesServices>
                <twcba1:ProcessCountryZonesServices.ExistingZonesByZoneId>
                  <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">
                    <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryZonesServices.ExistingZonesByZoneId>
                <twcba1:ProcessCountryZonesServices.ExistingZonesServices>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:ExistingZoneServices)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ExistingZoneServices)">ExistingZonesServices</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryZonesServices.ExistingZonesServices>
              </twcba1:ProcessCountryZonesServices>
              <twcba1:ProcessCountryZonesRoutingProducts Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessCountryZonesRoutingProducts_1">
                <twcba1:ProcessCountryZonesRoutingProducts.ChangedZonesRoutingProducts>
                  <OutArgument x:TypeArguments="scg:IEnumerable(twcep:ChangedZoneRoutingProducts)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twcep:ChangedZoneRoutingProducts)">ChangedZonesRoutingProducts</mca:CSharpReference>
                  </OutArgument>
                </twcba1:ProcessCountryZonesRoutingProducts.ChangedZonesRoutingProducts>
                <twcba1:ProcessCountryZonesRoutingProducts.ExistingZonesByZoneId>
                  <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">
                    <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twcep:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryZonesRoutingProducts.ExistingZonesByZoneId>
                <twcba1:ProcessCountryZonesRoutingProducts.ExistingZonesRoutingProducts>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:ExistingZoneRoutingProducts)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ExistingZoneRoutingProducts)">ExistingZonesRoutingProducts</mca:CSharpValue>
                  </InArgument>
                </twcba1:ProcessCountryZonesRoutingProducts.ExistingZonesRoutingProducts>
              </twcba1:ProcessCountryZonesRoutingProducts>
              <vbw:CombineLists x:TypeArguments="vbe:IRuleTarget" sap2010:WorkflowViewState.IdRef="CombineLists`1_2">
                <vbw:CombineLists.InputLists>
                  <InArgument x:TypeArguments="scg:List(sc:IEnumerable)">
                    <mca:CSharpValue x:TypeArguments="scg:List(sc:IEnumerable)">new List&lt;System.Collections.IEnumerable&gt; { Country.ZonesToProcess, Country.CodesToAdd, Country.CodesToMove, NotImportedZones }</mca:CSharpValue>
                  </InArgument>
                </vbw:CombineLists.InputLists>
                <vbw:CombineLists.OutputList>
                  <OutArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
                    <mca:CSharpReference x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">DataToValidateAfterProcessing</mca:CSharpReference>
                  </OutArgument>
                </vbw:CombineLists.OutputList>
              </vbw:CombineLists>
              <vbw:ExecuteRules BusinessRulesKey="CP_ValidateAfterProcessing" sap2010:WorkflowViewState.IdRef="ExecuteRules_5">
                <vbw:ExecuteRules.ImportedDataToValidate>
                  <InArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">DataToValidateAfterProcessing</mca:CSharpValue>
                  </InArgument>
                </vbw:ExecuteRules.ImportedDataToValidate>
              </vbw:ExecuteRules>
              <twcba1:ReserveIdsForNewEntities Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ReserveIdsForNewEntities_1">
                <twcba1:ReserveIdsForNewEntities.NewCodes>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:AddedCode)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:AddedCode)">NewCodes</mca:CSharpValue>
                  </InArgument>
                </twcba1:ReserveIdsForNewEntities.NewCodes>
                <twcba1:ReserveIdsForNewEntities.NewRates>
                  <InArgument x:TypeArguments="scg:IEnumerable(twce:AddedRate)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twce:AddedRate)">NewRates</mca:CSharpValue>
                  </InArgument>
                </twcba1:ReserveIdsForNewEntities.NewRates>
                <twcba1:ReserveIdsForNewEntities.NewZones>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:AddedZone)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:AddedZone)">NewZones</mca:CSharpValue>
                  </InArgument>
                </twcba1:ReserveIdsForNewEntities.NewZones>
                <twcba1:ReserveIdsForNewEntities.SalePriceListsByOwner>
                  <InArgument x:TypeArguments="twcb:SalePriceListsByOwner">
                    <mca:CSharpValue x:TypeArguments="twcb:SalePriceListsByOwner">SalePriceListsByOwner</mca:CSharpValue>
                  </InArgument>
                </twcba1:ReserveIdsForNewEntities.SalePriceListsByOwner>
              </twcba1:ReserveIdsForNewEntities>
              <Parallel DisplayName="Parallel_PrepareQueuesForDBApplyProcess" sap2010:WorkflowViewState.IdRef="Parallel_3">
                <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twcep:AddedZone)" DisplayName="NewZones_EnqueueItem&lt;IEnumerable&lt;AddedZone&gt;&gt;" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_1">
                  <vbw:EnqueueItem.Item>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcep:AddedZone)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:AddedZone)">NewZones</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Item>
                  <vbw:EnqueueItem.Queue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:AddedZone))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:AddedZone))">NewZonesQueue</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Queue>
                </vbw:EnqueueItem>
                <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twcep:AddedCode)" DisplayName="NewCodes_EnqueueItem&lt;IEnumerable&lt;AddedCode&gt;&gt;" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_2">
                  <vbw:EnqueueItem.Item>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcep:AddedCode)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:AddedCode)">NewCodes</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Item>
                  <vbw:EnqueueItem.Queue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:AddedCode))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:AddedCode))">NewCodesQueue</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Queue>
                </vbw:EnqueueItem>
                <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twce:AddedRate)" DisplayName="NewRates_EnqueueItem&lt;IEnumerable&lt;AddedRate&gt;&gt;" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_6">
                  <vbw:EnqueueItem.Item>
                    <InArgument x:TypeArguments="scg:IEnumerable(twce:AddedRate)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twce:AddedRate)">NewRates</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Item>
                  <vbw:EnqueueItem.Queue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:AddedRate))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:AddedRate))">NewRatesQueue</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Queue>
                </vbw:EnqueueItem>
                <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twcep:ChangedZone)" DisplayName="ChangedZones_EnqueueItem&lt;IEnumerable&lt;ChangedZone&gt;&gt;" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_3">
                  <vbw:EnqueueItem.Item>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcep:ChangedZone)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ChangedZone)">ChangedZones</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Item>
                  <vbw:EnqueueItem.Queue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZone))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZone))">ChangedZonesQueue</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Queue>
                </vbw:EnqueueItem>
                <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twcep:ChangedCode)" DisplayName="ChangedCodes_EnqueueItem&lt;IEnumerable&lt;ChangedCode&gt;&gt;" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_4">
                  <vbw:EnqueueItem.Item>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcep:ChangedCode)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ChangedCode)">ChangedCodes</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Item>
                  <vbw:EnqueueItem.Queue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedCode))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedCode))">ChangedCodesQueue</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Queue>
                </vbw:EnqueueItem>
                <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twcep:ChangedRate)" DisplayName="ChangedRates_EnqueueItem&lt;IEnumerable&lt;ChangedRate&gt;&gt;" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_5">
                  <vbw:EnqueueItem.Item>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcep:ChangedRate)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ChangedRate)">ChangedRates</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Item>
                  <vbw:EnqueueItem.Queue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedRate))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedRate))">ChangedRatesQueue</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Queue>
                </vbw:EnqueueItem>
                <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twcep:ChangedZoneServices)" DisplayName="ChangedZonesServices_EnqueueItem&lt;IEnumerable&lt;ChangedZoneServices&gt;&gt;" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_7">
                  <vbw:EnqueueItem.Item>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcep:ChangedZoneServices)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ChangedZoneServices)">ChangedZonesServices</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Item>
                  <vbw:EnqueueItem.Queue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZoneServices))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZoneServices))">ChangedZonesServicesQueue</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Queue>
                </vbw:EnqueueItem>
                <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twcep:ChangedZoneRoutingProducts)" DisplayName="ChangedZonesRoutingProducts_EnqueueItem&lt;IEnumerable&lt;ChangedZoneRoutingProducts&gt;&gt;" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_8">
                  <vbw:EnqueueItem.Item>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcep:ChangedZoneRoutingProducts)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ChangedZoneRoutingProducts)">ChangedZonesRoutingProducts</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Item>
                  <vbw:EnqueueItem.Queue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZoneRoutingProducts))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZoneRoutingProducts))">ChangedZonesRoutingProductsQueue</mca:CSharpValue>
                    </InArgument>
                  </vbw:EnqueueItem.Queue>
                </vbw:EnqueueItem>
                <twcba1:GenerateZonesPreview sap2010:WorkflowViewState.IdRef="GenerateZonesPreview_2">
                  <twcba1:GenerateZonesPreview.ClosedExistingZones>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, scg:List(twcep:ExistingZone))">
                      <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:String, scg:List(twcep:ExistingZone))">ClosedExistingZones</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GenerateZonesPreview.ClosedExistingZones>
                  <twcba1:GenerateZonesPreview.NotImportedZones>
                    <InArgument x:TypeArguments="scg:IEnumerable(twce:NotImportedZone)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twce:NotImportedZone)">NotImportedZones</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GenerateZonesPreview.NotImportedZones>
                  <twcba1:GenerateZonesPreview.PreviewZonesQueue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:ZonePreview))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:ZonePreview))">PreviewZonesQueue</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GenerateZonesPreview.PreviewZonesQueue>
                  <twcba1:GenerateZonesPreview.ZonesToProcess>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcep:ZoneToProcess)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ZoneToProcess)">Country.ZonesToProcess</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GenerateZonesPreview.ZonesToProcess>
                </twcba1:GenerateZonesPreview>
                <twcba1:GenerateCodesPreview sap2010:WorkflowViewState.IdRef="GenerateCodesPreview_1">
                  <twcba1:GenerateCodesPreview.CodesToAdd>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToAdd)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:CodeToAdd)">Country.CodesToAdd</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GenerateCodesPreview.CodesToAdd>
                  <twcba1:GenerateCodesPreview.CodesToClose>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToClose)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:CodeToClose)">Country.CodesToClose</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GenerateCodesPreview.CodesToClose>
                  <twcba1:GenerateCodesPreview.CodesToMove>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcep:CodeToMove)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:CodeToMove)">Country.CodesToMove</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GenerateCodesPreview.CodesToMove>
                  <twcba1:GenerateCodesPreview.NotImportedCodes>
                    <InArgument x:TypeArguments="scg:IEnumerable(twce:NotImportedCode)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twce:NotImportedCode)">NotImportedCodes</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GenerateCodesPreview.NotImportedCodes>
                  <twcba1:GenerateCodesPreview.PreviewCodeQueue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:CodePreview))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:CodePreview))">PreviewCodesQueue</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GenerateCodesPreview.PreviewCodeQueue>
                </twcba1:GenerateCodesPreview>
                <twcba1:GenerateRatesPreview sap2010:WorkflowViewState.IdRef="GenerateRatesPreview_1">
                  <twcba1:GenerateRatesPreview.NotImportedZones>
                    <InArgument x:TypeArguments="scg:IEnumerable(twce:NotImportedZone)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twce:NotImportedZone)">NotImportedZones</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GenerateRatesPreview.NotImportedZones>
                  <twcba1:GenerateRatesPreview.PreviewRates>
                    <InOutArgument x:TypeArguments="scg:List(twce:RatePreview)">
                      <mca:CSharpReference x:TypeArguments="scg:List(twce:RatePreview)">RatesPreview</mca:CSharpReference>
                    </InOutArgument>
                  </twcba1:GenerateRatesPreview.PreviewRates>
                  <twcba1:GenerateRatesPreview.PreviewRatesQueue>
                    <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:RatePreview))">
                      <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:RatePreview))">PreviewRatesQueue</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GenerateRatesPreview.PreviewRatesQueue>
                  <twcba1:GenerateRatesPreview.ZonesToProcess>
                    <InArgument x:TypeArguments="scg:IEnumerable(twcep:ZoneToProcess)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ZoneToProcess)">Country.ZonesToProcess</mca:CSharpValue>
                    </InArgument>
                  </twcba1:GenerateRatesPreview.ZonesToProcess>
                </twcba1:GenerateRatesPreview>
              </Parallel>
              <twcba1:BuildZonesChanges sap2010:WorkflowViewState.IdRef="BuildZonesChanges_1">
                <twcba1:BuildZonesChanges.AddedZones>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:AddedZone)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:AddedZone)">NewZones</mca:CSharpValue>
                  </InArgument>
                </twcba1:BuildZonesChanges.AddedZones>
                <twcba1:BuildZonesChanges.ExistingZones>
                  <InArgument x:TypeArguments="scg:IEnumerable(twcep:ExistingZone)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twcep:ExistingZone)">ExistingZonesByZoneId.Values</mca:CSharpValue>
                  </InArgument>
                </twcba1:BuildZonesChanges.ExistingZones>
                <twcba1:BuildZonesChanges.RatesPreview>
                  <InArgument x:TypeArguments="scg:IEnumerable(twce:RatePreview)">
                    <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twce:RatePreview)">RatesPreview</mca:CSharpValue>
                  </InArgument>
                </twcba1:BuildZonesChanges.RatesPreview>
                <twcba1:BuildZonesChanges.SalePLZonesChanges>
                  <InArgument x:TypeArguments="scg:List(twbe:SalePLZoneChange)">
                    <mca:CSharpValue x:TypeArguments="scg:List(twbe:SalePLZoneChange)">SalePLZonesChanges</mca:CSharpValue>
                  </InArgument>
                </twcba1:BuildZonesChanges.SalePLZonesChanges>
              </twcba1:BuildZonesChanges>
              <Assign sap2010:WorkflowViewState.IdRef="Assign_2">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">ProcessingCountryCompleted</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">ProcessingCountryCompleted + 1</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_1">
                <vbw:WriteTrackingMessage.Message>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">String.Format("Processing '{0}' country is completed. {1} countries are remaining.", new Vanrise.Common.Business.CountryManager().GetCountry(Country.CountryId).Name, (CountriesToProcess.Count() - ProcessingCountryCompleted))</mca:CSharpValue>
                  </InArgument>
                </vbw:WriteTrackingMessage.Message>
                <vbw:WriteTrackingMessage.Severity>
                  <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                    <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
                  </InArgument>
                </vbw:WriteTrackingMessage.Severity>
              </vbw:WriteTrackingMessage>
            </Sequence>
          </ActivityAction>
        </vbw:ParallelForEach>
        <Assign sap2010:WorkflowViewState.IdRef="Assign_1">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Boolean">
              <mca:CSharpReference x:TypeArguments="x:Boolean">CountriesProcessingStatus.IsComplete</mca:CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Boolean">True</InArgument>
          </Assign.Value>
        </Assign>
      </Sequence>
      <local:ApplyEntitiesToDBProcess sap2010:WorkflowViewState.IdRef="ApplyEntitiesToDBProcess_1">
        <local:ApplyEntitiesToDBProcess.ChangedCodesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedCode))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedCode))">ChangedCodesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.ChangedCodesQueue>
        <local:ApplyEntitiesToDBProcess.ChangedRatesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedRate))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedRate))">ChangedRatesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.ChangedRatesQueue>
        <local:ApplyEntitiesToDBProcess.ChangedZonesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZone))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZone))">ChangedZonesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.ChangedZonesQueue>
        <local:ApplyEntitiesToDBProcess.ChangedZonesRoutingProductsQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZoneRoutingProducts))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZoneRoutingProducts))">ChangedZonesRoutingProductsQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.ChangedZonesRoutingProductsQueue>
        <local:ApplyEntitiesToDBProcess.ChangedZonesServicesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZoneServices))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:ChangedZoneServices))">ChangedZonesServicesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.ChangedZonesServicesQueue>
        <local:ApplyEntitiesToDBProcess.CodePreparationMainProcessStatus>
          <InArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">CountriesProcessingStatus</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.CodePreparationMainProcessStatus>
        <local:ApplyEntitiesToDBProcess.NewCodesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:AddedCode))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:AddedCode))">NewCodesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.NewCodesQueue>
        <local:ApplyEntitiesToDBProcess.NewRatesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:AddedRate))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:AddedRate))">NewRatesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.NewRatesQueue>
        <local:ApplyEntitiesToDBProcess.NewZonesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:AddedZone))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twcep:AddedZone))">NewZonesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.NewZonesQueue>
        <local:ApplyEntitiesToDBProcess.PreviewCodesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:CodePreview))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:CodePreview))">PreviewCodesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.PreviewCodesQueue>
        <local:ApplyEntitiesToDBProcess.PreviewRatesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:RatePreview))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:RatePreview))">PreviewRatesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.PreviewRatesQueue>
        <local:ApplyEntitiesToDBProcess.PreviewZonesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:ZonePreview))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twce:ZonePreview))">PreviewZonesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.PreviewZonesQueue>
        <local:ApplyEntitiesToDBProcess.SellingNumberPlanId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.SellingNumberPlanId>
      </local:ApplyEntitiesToDBProcess>
    </Parallel>
    <twcba1:ApplyNewSalePriceListsToDB PreviousActivityStatus="{x:Null}" Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyNewSalePriceListsToDB_1">
      <twcba1:ApplyNewSalePriceListsToDB.SalePriceListsByOwner>
        <InArgument x:TypeArguments="twcb:SalePriceListsByOwner">
          <mca:CSharpValue x:TypeArguments="twcb:SalePriceListsByOwner">SalePriceListsByOwner</mca:CSharpValue>
        </InArgument>
      </twcba1:ApplyNewSalePriceListsToDB.SalePriceListsByOwner>
    </twcba1:ApplyNewSalePriceListsToDB>
    <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_5" Message="Finished processing imported data. Ready to start synchronization with existing entities.">
      <vbw:WriteTrackingMessage.Severity>
        <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
          <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Severity>
    </vbw:WriteTrackingMessage>
    <vbw:AssignTask x:TypeArguments="twcbat:PreviewTaskExecutionInformation" ExecutedTask="{x:Null}" sap2010:WorkflowViewState.IdRef="AssignTask`1_1" TaskTitle="Approve Numbering Plan Changes">
      <vbw:AssignTask.AssignedTo>
        <InArgument x:TypeArguments="vbe:BPTaskAssignee">
          <mca:CSharpValue x:TypeArguments="vbe:BPTaskAssignee">new Vanrise.BusinessProcess.MainExtensions.InitiatorBPTaskAssignee()</mca:CSharpValue>
        </InArgument>
      </vbw:AssignTask.AssignedTo>
      <vbw:AssignTask.TaskData>
        <InArgument x:TypeArguments="vbe:BPTaskData">
          <mca:CSharpValue x:TypeArguments="vbe:BPTaskData">new TOne.WhS.CodePreparation.BP.Arguments.Tasks.PreviewTaskData()</mca:CSharpValue>
        </InArgument>
      </vbw:AssignTask.TaskData>
      <vbw:AssignTask.TaskExecutionInformation>
        <OutArgument x:TypeArguments="twcbat:PreviewTaskExecutionInformation">
          <mca:CSharpReference x:TypeArguments="twcbat:PreviewTaskExecutionInformation">ContinueExecution</mca:CSharpReference>
        </OutArgument>
      </vbw:AssignTask.TaskExecutionInformation>
    </vbw:AssignTask>
    <If sap2010:WorkflowViewState.IdRef="If_2">
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <mca:CSharpValue x:TypeArguments="x:Boolean">ContinueExecution.Decision == true</mca:CSharpValue>
        </InArgument>
      </If.Condition>
      <If.Then>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_7">
          <Sequence.Variables>
            <Variable x:TypeArguments="twcbat:NotificationTaskExecutionInforamtion" Name="CustomersToBeNotified" />
          </Sequence.Variables>
          <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_8" Message="Backup Started">
            <vbw:WriteTrackingMessage.Severity>
              <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
              </InArgument>
            </vbw:WriteTrackingMessage.Severity>
          </vbw:WriteTrackingMessage>
          <twcba1:BackupData sap2010:WorkflowViewState.IdRef="BackupData_1">
            <twcba1:BackupData.SellingNumberPlanId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
              </InArgument>
            </twcba1:BackupData.SellingNumberPlanId>
            <twcba1:BackupData.UserId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">Input.UserId</mca:CSharpValue>
              </InArgument>
            </twcba1:BackupData.UserId>
          </twcba1:BackupData>
          <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_9" Message="Backup Ended">
            <vbw:WriteTrackingMessage.Severity>
              <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
              </InArgument>
            </vbw:WriteTrackingMessage.Severity>
          </vbw:WriteTrackingMessage>
          <twcba1:SyncImportedDataWithDB sap2010:WorkflowViewState.IdRef="SyncImportedDataWithDB_1">
            <twcba1:SyncImportedDataWithDB.SellingNumberPlanId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
              </InArgument>
            </twcba1:SyncImportedDataWithDB.SellingNumberPlanId>
          </twcba1:SyncImportedDataWithDB>
          <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_6" Message="Finished synchronizing with existing entities.">
            <vbw:WriteTrackingMessage.Severity>
              <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
              </InArgument>
            </vbw:WriteTrackingMessage.Severity>
          </vbw:WriteTrackingMessage>
          <twcba1:UpdateCodePreparationStateStatus sap2010:WorkflowViewState.IdRef="UpdateCodePreparationStateStatus_1">
            <twcba1:UpdateCodePreparationStateStatus.SellingNumberPlanId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
              </InArgument>
            </twcba1:UpdateCodePreparationStateStatus.SellingNumberPlanId>
            <twcba1:UpdateCodePreparationStateStatus.Status>
              <InArgument x:TypeArguments="twce:CodePreparationStatus">
                <mca:CSharpValue x:TypeArguments="twce:CodePreparationStatus">Input.IsFromExcel ? Entities.CodePreparationStatus.Canceled : Entities.CodePreparationStatus.Completed</mca:CSharpValue>
              </InArgument>
            </twcba1:UpdateCodePreparationStateStatus.Status>
          </twcba1:UpdateCodePreparationStateStatus>
          <vbw:AssignTask x:TypeArguments="twcbat:NotificationTaskExecutionInforamtion" ExecutedTask="{x:Null}" sap2010:WorkflowViewState.IdRef="AssignTask`1_2" TaskTitle="Notify Customers">
            <vbw:AssignTask.AssignedTo>
              <InArgument x:TypeArguments="vbe:BPTaskAssignee">
                <mca:CSharpValue x:TypeArguments="vbe:BPTaskAssignee">new Vanrise.BusinessProcess.MainExtensions.InitiatorBPTaskAssignee();</mca:CSharpValue>
              </InArgument>
            </vbw:AssignTask.AssignedTo>
            <vbw:AssignTask.TaskData>
              <InArgument x:TypeArguments="vbe:BPTaskData">
                <mca:CSharpValue x:TypeArguments="vbe:BPTaskData" xml:space="preserve">new TOne.WhS.CodePreparation.BP.Arguments.Tasks.NotificationTaskData() { 
             SellingNumberPlanId = Input.SellingNumberPlanId
            };</mca:CSharpValue>
              </InArgument>
            </vbw:AssignTask.TaskData>
            <vbw:AssignTask.TaskExecutionInformation>
              <OutArgument x:TypeArguments="twcbat:NotificationTaskExecutionInforamtion">
                <mca:CSharpReference x:TypeArguments="twcbat:NotificationTaskExecutionInforamtion">CustomersToBeNotified</mca:CSharpReference>
              </OutArgument>
            </vbw:AssignTask.TaskExecutionInformation>
          </vbw:AssignTask>
          <If sap2010:WorkflowViewState.IdRef="If_3">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">CustomersToBeNotified.Decision</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_8">
                <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_10" Message="Sending pricelists">
                  <vbw:WriteTrackingMessage.Severity>
                    <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                      <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
                    </InArgument>
                  </vbw:WriteTrackingMessage.Severity>
                </vbw:WriteTrackingMessage>
                <twcba1:BuildZonesNotifications sap2010:WorkflowViewState.IdRef="BuildZonesNotifications_1">
                  <twcba1:BuildZonesNotifications.CustomerIds>
                    <InArgument x:TypeArguments="scg:IEnumerable(x:Int32)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:Int32)">CustomersToBeNotified.CustomerIds</mca:CSharpValue>
                    </InArgument>
                  </twcba1:BuildZonesNotifications.CustomerIds>
                  <twcba1:BuildZonesNotifications.MinimumDate>
                    <InArgument x:TypeArguments="s:DateTime">
                      <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
                    </InArgument>
                  </twcba1:BuildZonesNotifications.MinimumDate>
                  <twcba1:BuildZonesNotifications.SalePLZonesChanges>
                    <InArgument x:TypeArguments="scg:IEnumerable(twbe:SalePLZoneChange)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SalePLZoneChange)">SalePLZonesChanges</mca:CSharpValue>
                    </InArgument>
                  </twcba1:BuildZonesNotifications.SalePLZonesChanges>
                  <twcba1:BuildZonesNotifications.SellingNumberPlanId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.SellingNumberPlanId</mca:CSharpValue>
                    </InArgument>
                  </twcba1:BuildZonesNotifications.SellingNumberPlanId>
                </twcba1:BuildZonesNotifications>
                <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_11" Message="Sending pricelists is successfully done">
                  <vbw:WriteTrackingMessage.Severity>
                    <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                      <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
                    </InArgument>
                  </vbw:WriteTrackingMessage.Severity>
                </vbw:WriteTrackingMessage>
              </Sequence>
            </If.Then>
          </If>
        </Sequence>
      </If.Then>
      <If.Else>
        <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_7" Message="Process is cancelled">
          <vbw:WriteTrackingMessage.Severity>
            <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
              <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
            </InArgument>
          </vbw:WriteTrackingMessage.Severity>
        </vbw:WriteTrackingMessage>
      </If.Else>
    </If>
    <sads:DebugSymbol.Symbol>d0pDOlxURlNcVE9uZVYyXENvZGVcVE9uZVYyXFRPbmUuV2hTLkNvZGVQcmVwYXJhdGlvbi5CUFxDb2RlUHJlcGFyYXRpb24ueGFtbLICTgO+Cg4CAQFZC1nRAQMB1QReC17RAQMBsgRjC2PVAQMBjwRoC2jVAQMB7ANtC21wAwHJA3MLc1oDAaYDeQt51QEDAYMDggELggHJAQMB4AKHAQuHAckBAwG9AowBC4wBuAEDAZoCkQELkQHFAQMB9wGWAQuWAdsBAwHUAZsBC5sBdwMBsQGgAQugAckBAwGOAacBC6cB5QECAWusAQusAfMBAgFIsQELsQF5AgEltgELtgGbAQIBAroBBcUBGwMB6EfGAQXnAgoDAaBA6AIF/QIjAwGTP/4CBYkDGAMBzD6KAwWQAxgDAac+kQMFoQMfAwG9PaIDBbIDJwMB0zyzAwW5AxgDAa48ugMFwAMgAwGJPMEDBccDIAMB5DvIAwWNBBADAbs4jgQFlAQfAwGXOJUEBZAJEAMBkAyRCQWXCSkDAewLmAkFngkgAwHHC58JBa8JFgMB3AqwCQW8CgoDAfgEwgELwgFhAwGMSL0BC70BZAMB6UfJAQvJAVsDAaFAzQEJjgIUAwHXRJECCeUCFAMBxEDwAgvwAm8DAf0/+gIL+gJ7AwHaP+sCC+sCawMBtz/1Agv1Am0DAZQ/gQMLgQOwAQMB8D6GAwuGA38DAc0+igMoigM6AwHLPo0DC40DdwMBqD6UAwuUA3sDAYQ+ngMLngNhAwHhPZkDC5kDVgMBvj2qAwuqA3MDAZo9rwMLrwNzAwH3PKUDC6UDggEDAdQ8swMoswM+AwHSPLYDC7YDcwMBrzy9Awu9A4UBAwGLPLoDYLoDfQMBijzEAwvEA4UBAwHmO8EDYMEDiQEDAeU7yQMH2QMhAwH6OtoDB+oDIQMBkDrrAwf7AykDAaY5/AMHjAQwAwG8OJEEC5EEcwMBmDiZBAfMCBIDAeYPzQgHjwkoAwGRDJQJC5QJcAMB7QubCQubCYUBAwHJC5gJYJgJuwEDAcgLrAkLrAmAAQMBpAunCQunCZABAwGBC58JoQGfCcEBAwGAC6IJC6IJlwEDAd0KswkLswlsAwH5BLcJCbEKFAMBwQW0Cgm6CiQDAZwF0QEL6wEjAwGzRuwBC/IBHgMBjUbzAQuNAi0DAdhEkgILogInAwHtQ6MCC8ICKwMBmkLDAgvdAisDAepA3gIL5AIeAwHFQNYDDdYDYwMBwTvMAw3MA30DAZ470QMN0QNYAwH7OucDDecDYwMB1zrdAw3dA30DAbQ64gMN4gNYAwGROvgDDfgDYwMB7TnuAw3uA5IBAwHKOfMDDfMDWAMBpzmJBA2JBGMDAYM5hAQNhARYAwHgOP8DDf8DmgEDAb04mgQJwQgfAwGNEMIICcsIEgMB5w+HCQ2HCYMBAwHCD/gIDfgIfgMBng/VCA3VCIQBAwH6DtAIDdAIhAEDAdYOjAkNjAljAwGyDuQIDeQIlAEDAY4O6QgN6QhyAwHqDd8IDd8IogEDAcYNggkNggmDAQMBog39CA39CIMBAwH+DNoIDdoIhAEDAdoM8wgN8wh9AwG2DO4IDe4IfgMBkgy7CQvBCSYDAbYKwgkLzQkfAwHtCc4JC9QJJgMBxwnVCQvbCSsDAaIJ3AkL4gkmAwH8COMJC+4JNQMBswjvCQuBChwDAcUHggoLsAoQAwHCBbcKD7cKiQEDAZ4FtApktAp6AwGdBegBEegBZAMBxEfUARHUAWoDAaBH3gER3gFfAwH8RtkBEdkBYAMB2EbjARHjAX4DAbRG7AEu7AFFAwGyRu8BEe8BdAMBjkb7ARH7AX0DAelF9gER9gF5AwHFRYUCEYUCXAMBoUWAAhGAAnsDAf1EigIRigJ2AwHZRJUCEZUCYgMBtESfAhGfAmcDAZFEmgIRmgKXAQMB7kOwAhGwAn0DAcpDqwIRqwJ5AwGnQ6YCEaYCWgMBhEO/AhG/AmQDAeFCugIRugJqAwG+QrUCEbUCewMBm0LLAhHLAn0DAfdBxgIRxgJaAwHUQdUCEdUCXAMBsUHaAhHaAo8BAwGOQdACEdACewMB60DeAi7eAkcDAelA4QIR4QJ3AwHGQJ0ED50EfgMB8zeaBLQBmgS4AQMB8jeaBJgBmgScAQMB8TekBA2/CBgDAY4QyQg1yQg5AwGMEMUID8UIegMB6A++CRG+CYsBAwG4CrsJZrsJdgMBtwrFCRHFCWcDAZIKygkRyglaAwHuCdEJEdEJiwEDAckJzglmzgl0AwHICdgJEdgJZwMBownfCRHfCYsBAwH+CNwJZtwJlgEDAf0I5gkR5glnAwHYCOsJEesJxwEDAbQI/gkR/gmPAQMBjwj3CRH5CSEDAesH7wmsAe8JvgEDAeoH8gkR8gmeAQMBxgeFChGFCm4DAcMFiQoPrgoaAwHnBbkED8kELQMByzbKBA+PBRoDAbIxkAUPzQUsAwGdLM4FD+0FLAMB0inuBQ+cBiwDAeIlnQYPrQY0AwG8JK4GD74GOwMBliO/Bg/KBiIDAaciywYP0QYiAwHuIdIGD+cGMQMBkSDoBg+QCBoDAcoTkQgPpggqAwHtEacID7IIGAMB/hCzCA++CCoDAY8QigoRkAosAwGfB5EKEaYKMgMBjganChGtCiwDAegFwQQVwQR9AwG6N8YEFcYEkwEDAYM3vAQVvARjAwHMNssEEdsELwMBpTXcBBHsBC8DAf8z7QQR/QQ3AwHZMv4EEY4FPgMBszHKBRXKBYgBAwH7MLEFFbEFewMBxDCnBRWnBYEBAwGNMMAFFcAFewMB1i+iBRWiBX0DAZ8vkwUVkwWBAQMB6C7FBRXFBXsDAbEutgUVtgWLAQMB+i27BRW7BXcDAcMtrAUVrAV/AwGMLZgFFZgFgQEDAdUsnQUVnQWcAQMBnizWBRXWBXsDAeYr6gUV6gWFAQMBryvbBRXbBYoBAwH4KuUFFeUFiAEDAcEq4AUV4AVvAwGKKtEFFdEFlAEDAdMp8QUV8QWBAQMBmymZBhWZBoUBAwHkKIUGFYUGegMBrSj7BRX7BXsDAfYnlAYVlAZrAwG/J48GFY8GegMBiCf2BRX2BW4DAdEmgAYVgAaLAQMBmiaKBhWKBoABAwHjJaAGFaAGkQEDAaslpQYVpQaLAQMB9CSqBhWqBosBAwG9JLEGFbEGnwEDAYUkuwYVuwaZAQMBziO2BhW2BosBAwGXI8IGFcIG5wEDAd8ixwYVxwaQAQMBqCLLBjLLBk4DAaYizgYVzgaIAQMB7yHVBhXVBnMDAbch2gYV2gZyAwGAIeQGFeQGegMBySDfBhXfBnMDAZIg6QYR9AYjAwGiH/UGEYAHIwMBsx6BBxGMByMDAcQdjQcRmAcjAwHVHJkHEaQHIwMB5hulBxGwByMDAfcasQcRvAcjAwGIGr0HEcgHIwMBmRnJBxHeBy8DAbwX3wcR+QcvAwGoFfoHEY8ILwMByxOjCBWjCHwDAZMTmQgVmQiKAQMB3BKUCBWUCHMDAaUSnggVngh4AwHuEa8IFa8IcAMBthGqCBWqCHQDAf8QuwgVuwiPAQMBxxC2CBW2CLMCAwGQEI0KF40KkQEDAaEHigptigqBAQMBoAeeCheeCoUBAwH7BpkKF5kKYgMB1waUCheUCoYBAwGzBqMKF6MKbQMBjwaqCheqCpEBAwHqBacKbacKlgEDAekF0wQX0wSFAQMBlDbOBBfOBH8DAd012AQX2ASNAQMBpjXfBBffBH8DAe405AQX5ASFAQMBtzTpBBfpBI0BAwGANPoEF/oElAEDAcgz8AQX8ASNAQMBkTP1BBf1BJUBAwHaMoYFF4YFowEDAaIygQUXgQWNAQMB6zGLBReLBZwBAwG0MfEGF/EGiAEDAdof7AYX7AZ1AwGjH/0GF/0GiAEDAese+AYX+AZ1AwG0HokHF4kHhwEDAfwdhAcXhAd0AwHFHZUHF5UHjgEDAY0dkAcXkAd7AwHWHKEHF6EHjgEDAZ4cnAcXnAd7AwHnG60HF60HjgEDAa8bqAcXqAd7AwH4GrkHF7kHngEDAcAatAcXtAeLAQMBiRrFBxfFB6wBAwHRGcAHF8AHmQEDAZoZ1gcX1geNAQMB4hjbBxfbB4cBAwGrGNEHF9EHggEDAfQXzAcXzAeWAQMBvRfxBxfxB4IBAwGFF+cHF+cHgwEDAc4W4gcX4gd/AwGXFvYHF/YHjQEDAeAV7AcX7AeBAQMBqRWMCBeMCIcBAwHxFIIIF4IIewMBuhSHCBeHCI0BAwGDFP0HF/0HggEDAcwT</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="SetCPContext_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="ReadFromSource_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="ExecuteRules_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="GetDataFromImportedCodes_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_6" sap:VirtualizedContainerService.HintSize="222,270">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetChangesFromView_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="GetDataFromCodeChanges_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="GetDataFromZoneChanges_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="ExecuteRules_4" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_5" sap:VirtualizedContainerService.HintSize="222,332">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_1" sap:VirtualizedContainerService.HintSize="1462,482" />
      <sap2010:ViewStateData Id="StructureDataByZones_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="CombineLists`1_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="ExecuteRules_2" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="GetExistingZones_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="StructureDataByCountries_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="ExecuteRules_3" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_3" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_4" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="GetExistingCodes_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetExistingRates_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetExistingZonesServices_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetExistingZonesRoutingProducts_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_1" sap:VirtualizedContainerService.HintSize="1462,86" />
      <sap2010:ViewStateData Id="PrepareZonesInfo_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="PrepareExistingZones_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="PrepareExistingCodes_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareExistingRates_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareExistingZonesServices_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareExistingZonesRoutingProducts_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_5" sap:VirtualizedContainerService.HintSize="1034,86" />
      <sap2010:ViewStateData Id="ProcessCountryCodes_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="ProcessCountryZones_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="ProcessCountryRates_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="ProcessCountryZonesServices_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="ProcessCountryZonesRoutingProducts_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="CombineLists`1_2" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="ExecuteRules_5" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="ReserveIdsForNewEntities_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="EnqueueItem`1_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_6" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_3" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_4" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_5" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_7" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_8" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GenerateZonesPreview_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GenerateCodesPreview_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GenerateRatesPreview_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_3" sap:VirtualizedContainerService.HintSize="1034,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="BuildZonesChanges_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="Assign_2" sap:VirtualizedContainerService.HintSize="1034,62" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_1" sap:VirtualizedContainerService.HintSize="1034,22" />
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="1056,1085">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ParallelForEach`1_2" sap:VirtualizedContainerService.HintSize="1086,1235" />
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="1086,62" />
      <sap2010:ViewStateData Id="Sequence_4" sap:VirtualizedContainerService.HintSize="1108,1461">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ApplyEntitiesToDBProcess_1" sap:VirtualizedContainerService.HintSize="200,1461" />
      <sap2010:ViewStateData Id="Parallel_4" sap:VirtualizedContainerService.HintSize="1462,1507" />
      <sap2010:ViewStateData Id="ApplyNewSalePriceListsToDB_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_5" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="AssignTask`1_1" sap:VirtualizedContainerService.HintSize="1462,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_8" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="BackupData_1" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_9" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="SyncImportedDataWithDB_1" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_6" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="UpdateCodePreparationStateStatus_1" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="AssignTask`1_2" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_10" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="BuildZonesNotifications_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_11" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_8" sap:VirtualizedContainerService.HintSize="222,270">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_3" sap:VirtualizedContainerService.HintSize="464,420" />
      <sap2010:ViewStateData Id="Sequence_7" sap:VirtualizedContainerService.HintSize="486,978">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteTrackingMessage_7" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_2" sap:VirtualizedContainerService.HintSize="1462,1128" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="1484,4253">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TOne.WhS.CodePreparation.BP.CodePreparation_1" sap:VirtualizedContainerService.HintSize="1524,4333">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="ShouldExpandAll">True</x:Boolean>
            <x:Boolean x:Key="ShouldCollapseAll">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>