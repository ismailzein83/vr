//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5466
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5466.
// 
#pragma warning disable 1591

namespace TABS.DrkSMSService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DRKSMSServiceSoap", Namespace="DRKSMSService")]
    public partial class DRKSMSService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UpdateCurrentOperatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckMessageStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendGeneralMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSingleShotSmsMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsMessageFromVoipOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageFromHSPCOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageFromEmeraldOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertWiSpotterRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWiSpotterRequestResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertCustomerReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateCardBatchAccountAndSendSmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageFromWiSpotterOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsViaAveaOperationCompleted;
        
        private System.Threading.SendOrPostCallback DataPortAccoutInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DataPortSingleShotAccoutInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSMSviaDataPortOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSMSviaDataPortNowOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSingleShotSMSviaDataPortOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCanceledMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTuraTelCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJetSMSCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DRKSMSService() {
            this.Url = global::TABS.Properties.Settings.Default.TABS_DrkSMSService_DRKSMSService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UpdateCurrentOperatorCompletedEventHandler UpdateCurrentOperatorCompleted;
        
        /// <remarks/>
        public event SendEmailMessageCompletedEventHandler SendEmailMessageCompleted;
        
        /// <remarks/>
        public event CheckMessageStatusCompletedEventHandler CheckMessageStatusCompleted;
        
        /// <remarks/>
        public event SendGeneralMessageCompletedEventHandler SendGeneralMessageCompleted;
        
        /// <remarks/>
        public event SendSingleShotSmsMessageCompletedEventHandler SendSingleShotSmsMessageCompleted;
        
        /// <remarks/>
        public event SendSmsMessageFromVoipCompletedEventHandler SendSmsMessageFromVoipCompleted;
        
        /// <remarks/>
        public event CreateMessageCompletedEventHandler CreateMessageCompleted;
        
        /// <remarks/>
        public event SendMessageFromHSPCCompletedEventHandler SendMessageFromHSPCCompleted;
        
        /// <remarks/>
        public event SendMessageFromEmeraldCompletedEventHandler SendMessageFromEmeraldCompleted;
        
        /// <remarks/>
        public event InsertWiSpotterRequestCompletedEventHandler InsertWiSpotterRequestCompleted;
        
        /// <remarks/>
        public event UpdateWiSpotterRequestResultCompletedEventHandler UpdateWiSpotterRequestResultCompleted;
        
        /// <remarks/>
        public event InsertCustomerReportCompletedEventHandler InsertCustomerReportCompleted;
        
        /// <remarks/>
        public event GetFolderCompletedEventHandler GetFolderCompleted;
        
        /// <remarks/>
        public event CreateCardBatchAccountAndSendSmsCompletedEventHandler CreateCardBatchAccountAndSendSmsCompleted;
        
        /// <remarks/>
        public event SendMessageFromWiSpotterCompletedEventHandler SendMessageFromWiSpotterCompleted;
        
        /// <remarks/>
        public event SendSmsViaAveaCompletedEventHandler SendSmsViaAveaCompleted;
        
        /// <remarks/>
        public event DataPortAccoutInfoCompletedEventHandler DataPortAccoutInfoCompleted;
        
        /// <remarks/>
        public event DataPortSingleShotAccoutInfoCompletedEventHandler DataPortSingleShotAccoutInfoCompleted;
        
        /// <remarks/>
        public event SendSMSviaDataPortCompletedEventHandler SendSMSviaDataPortCompleted;
        
        /// <remarks/>
        public event SendSMSviaDataPortNowCompletedEventHandler SendSMSviaDataPortNowCompleted;
        
        /// <remarks/>
        public event SendSingleShotSMSviaDataPortCompletedEventHandler SendSingleShotSMSviaDataPortCompleted;
        
        /// <remarks/>
        public event CheckCanceledMessagesCompletedEventHandler CheckCanceledMessagesCompleted;
        
        /// <remarks/>
        public event GetTuraTelCreditCompletedEventHandler GetTuraTelCreditCompleted;
        
        /// <remarks/>
        public event GetJetSMSCreditCompletedEventHandler GetJetSMSCreditCompleted;
        
        /// <remarks/>
        public event TestCompletedEventHandler TestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/UpdateCurrentOperator", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateCurrentOperator(int code) {
            object[] results = this.Invoke("UpdateCurrentOperator", new object[] {
                        code});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCurrentOperatorAsync(int code) {
            this.UpdateCurrentOperatorAsync(code, null);
        }
        
        /// <remarks/>
        public void UpdateCurrentOperatorAsync(int code, object userState) {
            if ((this.UpdateCurrentOperatorOperationCompleted == null)) {
                this.UpdateCurrentOperatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCurrentOperatorOperationCompleted);
            }
            this.InvokeAsync("UpdateCurrentOperator", new object[] {
                        code}, this.UpdateCurrentOperatorOperationCompleted, userState);
        }
        
        private void OnUpdateCurrentOperatorOperationCompleted(object arg) {
            if ((this.UpdateCurrentOperatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCurrentOperatorCompleted(this, new UpdateCurrentOperatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/SendEmailMessage", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendEmailMessage(string _message, string subject) {
            this.Invoke("SendEmailMessage", new object[] {
                        _message,
                        subject});
        }
        
        /// <remarks/>
        public void SendEmailMessageAsync(string _message, string subject) {
            this.SendEmailMessageAsync(_message, subject, null);
        }
        
        /// <remarks/>
        public void SendEmailMessageAsync(string _message, string subject, object userState) {
            if ((this.SendEmailMessageOperationCompleted == null)) {
                this.SendEmailMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailMessageOperationCompleted);
            }
            this.InvokeAsync("SendEmailMessage", new object[] {
                        _message,
                        subject}, this.SendEmailMessageOperationCompleted, userState);
        }
        
        private void OnSendEmailMessageOperationCompleted(object arg) {
            if ((this.SendEmailMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/CheckMessageStatus", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckMessageStatus() {
            this.Invoke("CheckMessageStatus", new object[0]);
        }
        
        /// <remarks/>
        public void CheckMessageStatusAsync() {
            this.CheckMessageStatusAsync(null);
        }
        
        /// <remarks/>
        public void CheckMessageStatusAsync(object userState) {
            if ((this.CheckMessageStatusOperationCompleted == null)) {
                this.CheckMessageStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckMessageStatusOperationCompleted);
            }
            this.InvokeAsync("CheckMessageStatus", new object[0], this.CheckMessageStatusOperationCompleted, userState);
        }
        
        private void OnCheckMessageStatusOperationCompleted(object arg) {
            if ((this.CheckMessageStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckMessageStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/SendGeneralMessage", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendGeneralMessage(string phone, string header, string message, int messageSource) {
            this.Invoke("SendGeneralMessage", new object[] {
                        phone,
                        header,
                        message,
                        messageSource});
        }
        
        /// <remarks/>
        public void SendGeneralMessageAsync(string phone, string header, string message, int messageSource) {
            this.SendGeneralMessageAsync(phone, header, message, messageSource, null);
        }
        
        /// <remarks/>
        public void SendGeneralMessageAsync(string phone, string header, string message, int messageSource, object userState) {
            if ((this.SendGeneralMessageOperationCompleted == null)) {
                this.SendGeneralMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendGeneralMessageOperationCompleted);
            }
            this.InvokeAsync("SendGeneralMessage", new object[] {
                        phone,
                        header,
                        message,
                        messageSource}, this.SendGeneralMessageOperationCompleted, userState);
        }
        
        private void OnSendGeneralMessageOperationCompleted(object arg) {
            if ((this.SendGeneralMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendGeneralMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/SendSingleShotSmsMessage", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendSingleShotSmsMessage(string phone, string header, string message, int messagesourceid) {
            object[] results = this.Invoke("SendSingleShotSmsMessage", new object[] {
                        phone,
                        header,
                        message,
                        messagesourceid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendSingleShotSmsMessageAsync(string phone, string header, string message, int messagesourceid) {
            this.SendSingleShotSmsMessageAsync(phone, header, message, messagesourceid, null);
        }
        
        /// <remarks/>
        public void SendSingleShotSmsMessageAsync(string phone, string header, string message, int messagesourceid, object userState) {
            if ((this.SendSingleShotSmsMessageOperationCompleted == null)) {
                this.SendSingleShotSmsMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSingleShotSmsMessageOperationCompleted);
            }
            this.InvokeAsync("SendSingleShotSmsMessage", new object[] {
                        phone,
                        header,
                        message,
                        messagesourceid}, this.SendSingleShotSmsMessageOperationCompleted, userState);
        }
        
        private void OnSendSingleShotSmsMessageOperationCompleted(object arg) {
            if ((this.SendSingleShotSmsMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSingleShotSmsMessageCompleted(this, new SendSingleShotSmsMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/SendSmsMessageFromVoip", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendSmsMessageFromVoip(string phone, string message) {
            object[] results = this.Invoke("SendSmsMessageFromVoip", new object[] {
                        phone,
                        message});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsMessageFromVoipAsync(string phone, string message) {
            this.SendSmsMessageFromVoipAsync(phone, message, null);
        }
        
        /// <remarks/>
        public void SendSmsMessageFromVoipAsync(string phone, string message, object userState) {
            if ((this.SendSmsMessageFromVoipOperationCompleted == null)) {
                this.SendSmsMessageFromVoipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsMessageFromVoipOperationCompleted);
            }
            this.InvokeAsync("SendSmsMessageFromVoip", new object[] {
                        phone,
                        message}, this.SendSmsMessageFromVoipOperationCompleted, userState);
        }
        
        private void OnSendSmsMessageFromVoipOperationCompleted(object arg) {
            if ((this.SendSmsMessageFromVoipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsMessageFromVoipCompleted(this, new SendSmsMessageFromVoipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/CreateMessage", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateMessage(string mode, int phonesID, int templateID, string[] _params) {
            object[] results = this.Invoke("CreateMessage", new object[] {
                        mode,
                        phonesID,
                        templateID,
                        _params});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateMessageAsync(string mode, int phonesID, int templateID, string[] _params) {
            this.CreateMessageAsync(mode, phonesID, templateID, _params, null);
        }
        
        /// <remarks/>
        public void CreateMessageAsync(string mode, int phonesID, int templateID, string[] _params, object userState) {
            if ((this.CreateMessageOperationCompleted == null)) {
                this.CreateMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateMessageOperationCompleted);
            }
            this.InvokeAsync("CreateMessage", new object[] {
                        mode,
                        phonesID,
                        templateID,
                        _params}, this.CreateMessageOperationCompleted, userState);
        }
        
        private void OnCreateMessageOperationCompleted(object arg) {
            if ((this.CreateMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateMessageCompleted(this, new CreateMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/SendMessageFromHSPC", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendMessageFromHSPC(string message) {
            this.Invoke("SendMessageFromHSPC", new object[] {
                        message});
        }
        
        /// <remarks/>
        public void SendMessageFromHSPCAsync(string message) {
            this.SendMessageFromHSPCAsync(message, null);
        }
        
        /// <remarks/>
        public void SendMessageFromHSPCAsync(string message, object userState) {
            if ((this.SendMessageFromHSPCOperationCompleted == null)) {
                this.SendMessageFromHSPCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageFromHSPCOperationCompleted);
            }
            this.InvokeAsync("SendMessageFromHSPC", new object[] {
                        message}, this.SendMessageFromHSPCOperationCompleted, userState);
        }
        
        private void OnSendMessageFromHSPCOperationCompleted(object arg) {
            if ((this.SendMessageFromHSPCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageFromHSPCCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/SendMessageFromEmerald", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendMessageFromEmerald(string username, string password, string phone, string header, int messagesourceid) {
            object[] results = this.Invoke("SendMessageFromEmerald", new object[] {
                        username,
                        password,
                        phone,
                        header,
                        messagesourceid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageFromEmeraldAsync(string username, string password, string phone, string header, int messagesourceid) {
            this.SendMessageFromEmeraldAsync(username, password, phone, header, messagesourceid, null);
        }
        
        /// <remarks/>
        public void SendMessageFromEmeraldAsync(string username, string password, string phone, string header, int messagesourceid, object userState) {
            if ((this.SendMessageFromEmeraldOperationCompleted == null)) {
                this.SendMessageFromEmeraldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageFromEmeraldOperationCompleted);
            }
            this.InvokeAsync("SendMessageFromEmerald", new object[] {
                        username,
                        password,
                        phone,
                        header,
                        messagesourceid}, this.SendMessageFromEmeraldOperationCompleted, userState);
        }
        
        private void OnSendMessageFromEmeraldOperationCompleted(object arg) {
            if ((this.SendMessageFromEmeraldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageFromEmeraldCompleted(this, new SendMessageFromEmeraldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/InsertWiSpotterRequest", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertWiSpotterRequest(string phone, string username, string password, string ipaddress, int messagesource) {
            object[] results = this.Invoke("InsertWiSpotterRequest", new object[] {
                        phone,
                        username,
                        password,
                        ipaddress,
                        messagesource});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertWiSpotterRequestAsync(string phone, string username, string password, string ipaddress, int messagesource) {
            this.InsertWiSpotterRequestAsync(phone, username, password, ipaddress, messagesource, null);
        }
        
        /// <remarks/>
        public void InsertWiSpotterRequestAsync(string phone, string username, string password, string ipaddress, int messagesource, object userState) {
            if ((this.InsertWiSpotterRequestOperationCompleted == null)) {
                this.InsertWiSpotterRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertWiSpotterRequestOperationCompleted);
            }
            this.InvokeAsync("InsertWiSpotterRequest", new object[] {
                        phone,
                        username,
                        password,
                        ipaddress,
                        messagesource}, this.InsertWiSpotterRequestOperationCompleted, userState);
        }
        
        private void OnInsertWiSpotterRequestOperationCompleted(object arg) {
            if ((this.InsertWiSpotterRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertWiSpotterRequestCompleted(this, new InsertWiSpotterRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/UpdateWiSpotterRequestResult", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateWiSpotterRequestResult(int id, int result) {
            this.Invoke("UpdateWiSpotterRequestResult", new object[] {
                        id,
                        result});
        }
        
        /// <remarks/>
        public void UpdateWiSpotterRequestResultAsync(int id, int result) {
            this.UpdateWiSpotterRequestResultAsync(id, result, null);
        }
        
        /// <remarks/>
        public void UpdateWiSpotterRequestResultAsync(int id, int result, object userState) {
            if ((this.UpdateWiSpotterRequestResultOperationCompleted == null)) {
                this.UpdateWiSpotterRequestResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWiSpotterRequestResultOperationCompleted);
            }
            this.InvokeAsync("UpdateWiSpotterRequestResult", new object[] {
                        id,
                        result}, this.UpdateWiSpotterRequestResultOperationCompleted, userState);
        }
        
        private void OnUpdateWiSpotterRequestResultOperationCompleted(object arg) {
            if ((this.UpdateWiSpotterRequestResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWiSpotterRequestResultCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/InsertCustomerReport", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertCustomerReport(string phone, string email, int messagesource) {
            object[] results = this.Invoke("InsertCustomerReport", new object[] {
                        phone,
                        email,
                        messagesource});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertCustomerReportAsync(string phone, string email, int messagesource) {
            this.InsertCustomerReportAsync(phone, email, messagesource, null);
        }
        
        /// <remarks/>
        public void InsertCustomerReportAsync(string phone, string email, int messagesource, object userState) {
            if ((this.InsertCustomerReportOperationCompleted == null)) {
                this.InsertCustomerReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCustomerReportOperationCompleted);
            }
            this.InvokeAsync("InsertCustomerReport", new object[] {
                        phone,
                        email,
                        messagesource}, this.InsertCustomerReportOperationCompleted, userState);
        }
        
        private void OnInsertCustomerReportOperationCompleted(object arg) {
            if ((this.InsertCustomerReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCustomerReportCompleted(this, new InsertCustomerReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/GetFolder", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFolder(int messageSource) {
            object[] results = this.Invoke("GetFolder", new object[] {
                        messageSource});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderAsync(int messageSource) {
            this.GetFolderAsync(messageSource, null);
        }
        
        /// <remarks/>
        public void GetFolderAsync(int messageSource, object userState) {
            if ((this.GetFolderOperationCompleted == null)) {
                this.GetFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderOperationCompleted);
            }
            this.InvokeAsync("GetFolder", new object[] {
                        messageSource}, this.GetFolderOperationCompleted, userState);
        }
        
        private void OnGetFolderOperationCompleted(object arg) {
            if ((this.GetFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderCompleted(this, new GetFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/CreateCardBatchAccountAndSendSms", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateCardBatchAccountAndSendSms(string phone, string password, int messagesourceid) {
            object[] results = this.Invoke("CreateCardBatchAccountAndSendSms", new object[] {
                        phone,
                        password,
                        messagesourceid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateCardBatchAccountAndSendSmsAsync(string phone, string password, int messagesourceid) {
            this.CreateCardBatchAccountAndSendSmsAsync(phone, password, messagesourceid, null);
        }
        
        /// <remarks/>
        public void CreateCardBatchAccountAndSendSmsAsync(string phone, string password, int messagesourceid, object userState) {
            if ((this.CreateCardBatchAccountAndSendSmsOperationCompleted == null)) {
                this.CreateCardBatchAccountAndSendSmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateCardBatchAccountAndSendSmsOperationCompleted);
            }
            this.InvokeAsync("CreateCardBatchAccountAndSendSms", new object[] {
                        phone,
                        password,
                        messagesourceid}, this.CreateCardBatchAccountAndSendSmsOperationCompleted, userState);
        }
        
        private void OnCreateCardBatchAccountAndSendSmsOperationCompleted(object arg) {
            if ((this.CreateCardBatchAccountAndSendSmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCardBatchAccountAndSendSmsCompleted(this, new CreateCardBatchAccountAndSendSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/SendMessageFromWiSpotter", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendMessageFromWiSpotter(string phone, string sms, int messagesourceid) {
            object[] results = this.Invoke("SendMessageFromWiSpotter", new object[] {
                        phone,
                        sms,
                        messagesourceid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageFromWiSpotterAsync(string phone, string sms, int messagesourceid) {
            this.SendMessageFromWiSpotterAsync(phone, sms, messagesourceid, null);
        }
        
        /// <remarks/>
        public void SendMessageFromWiSpotterAsync(string phone, string sms, int messagesourceid, object userState) {
            if ((this.SendMessageFromWiSpotterOperationCompleted == null)) {
                this.SendMessageFromWiSpotterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageFromWiSpotterOperationCompleted);
            }
            this.InvokeAsync("SendMessageFromWiSpotter", new object[] {
                        phone,
                        sms,
                        messagesourceid}, this.SendMessageFromWiSpotterOperationCompleted, userState);
        }
        
        private void OnSendMessageFromWiSpotterOperationCompleted(object arg) {
            if ((this.SendMessageFromWiSpotterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageFromWiSpotterCompleted(this, new SendMessageFromWiSpotterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/SendSmsViaAvea", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendSmsViaAvea(string phone, string header, string message, int messageSource) {
            this.Invoke("SendSmsViaAvea", new object[] {
                        phone,
                        header,
                        message,
                        messageSource});
        }
        
        /// <remarks/>
        public void SendSmsViaAveaAsync(string phone, string header, string message, int messageSource) {
            this.SendSmsViaAveaAsync(phone, header, message, messageSource, null);
        }
        
        /// <remarks/>
        public void SendSmsViaAveaAsync(string phone, string header, string message, int messageSource, object userState) {
            if ((this.SendSmsViaAveaOperationCompleted == null)) {
                this.SendSmsViaAveaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsViaAveaOperationCompleted);
            }
            this.InvokeAsync("SendSmsViaAvea", new object[] {
                        phone,
                        header,
                        message,
                        messageSource}, this.SendSmsViaAveaOperationCompleted, userState);
        }
        
        private void OnSendSmsViaAveaOperationCompleted(object arg) {
            if ((this.SendSmsViaAveaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsViaAveaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/DataPortAccoutInfo", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AccountInfo DataPortAccoutInfo() {
            object[] results = this.Invoke("DataPortAccoutInfo", new object[0]);
            return ((AccountInfo)(results[0]));
        }
        
        /// <remarks/>
        public void DataPortAccoutInfoAsync() {
            this.DataPortAccoutInfoAsync(null);
        }
        
        /// <remarks/>
        public void DataPortAccoutInfoAsync(object userState) {
            if ((this.DataPortAccoutInfoOperationCompleted == null)) {
                this.DataPortAccoutInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataPortAccoutInfoOperationCompleted);
            }
            this.InvokeAsync("DataPortAccoutInfo", new object[0], this.DataPortAccoutInfoOperationCompleted, userState);
        }
        
        private void OnDataPortAccoutInfoOperationCompleted(object arg) {
            if ((this.DataPortAccoutInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DataPortAccoutInfoCompleted(this, new DataPortAccoutInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/DataPortSingleShotAccoutInfo", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AccountInfo DataPortSingleShotAccoutInfo() {
            object[] results = this.Invoke("DataPortSingleShotAccoutInfo", new object[0]);
            return ((AccountInfo)(results[0]));
        }
        
        /// <remarks/>
        public void DataPortSingleShotAccoutInfoAsync() {
            this.DataPortSingleShotAccoutInfoAsync(null);
        }
        
        /// <remarks/>
        public void DataPortSingleShotAccoutInfoAsync(object userState) {
            if ((this.DataPortSingleShotAccoutInfoOperationCompleted == null)) {
                this.DataPortSingleShotAccoutInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataPortSingleShotAccoutInfoOperationCompleted);
            }
            this.InvokeAsync("DataPortSingleShotAccoutInfo", new object[0], this.DataPortSingleShotAccoutInfoOperationCompleted, userState);
        }
        
        private void OnDataPortSingleShotAccoutInfoOperationCompleted(object arg) {
            if ((this.DataPortSingleShotAccoutInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DataPortSingleShotAccoutInfoCompleted(this, new DataPortSingleShotAccoutInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/SendSMSviaDataPort", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendSMSviaDataPort(long messageid, string phone, string header, string message, System.DateTime sendTime, System.DateTime stoptime) {
            this.Invoke("SendSMSviaDataPort", new object[] {
                        messageid,
                        phone,
                        header,
                        message,
                        sendTime,
                        stoptime});
        }
        
        /// <remarks/>
        public void SendSMSviaDataPortAsync(long messageid, string phone, string header, string message, System.DateTime sendTime, System.DateTime stoptime) {
            this.SendSMSviaDataPortAsync(messageid, phone, header, message, sendTime, stoptime, null);
        }
        
        /// <remarks/>
        public void SendSMSviaDataPortAsync(long messageid, string phone, string header, string message, System.DateTime sendTime, System.DateTime stoptime, object userState) {
            if ((this.SendSMSviaDataPortOperationCompleted == null)) {
                this.SendSMSviaDataPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSMSviaDataPortOperationCompleted);
            }
            this.InvokeAsync("SendSMSviaDataPort", new object[] {
                        messageid,
                        phone,
                        header,
                        message,
                        sendTime,
                        stoptime}, this.SendSMSviaDataPortOperationCompleted, userState);
        }
        
        private void OnSendSMSviaDataPortOperationCompleted(object arg) {
            if ((this.SendSMSviaDataPortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSMSviaDataPortCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/SendSMSviaDataPortNow", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendSMSviaDataPortNow(string phone, string header, string message, int messageSource) {
            this.Invoke("SendSMSviaDataPortNow", new object[] {
                        phone,
                        header,
                        message,
                        messageSource});
        }
        
        /// <remarks/>
        public void SendSMSviaDataPortNowAsync(string phone, string header, string message, int messageSource) {
            this.SendSMSviaDataPortNowAsync(phone, header, message, messageSource, null);
        }
        
        /// <remarks/>
        public void SendSMSviaDataPortNowAsync(string phone, string header, string message, int messageSource, object userState) {
            if ((this.SendSMSviaDataPortNowOperationCompleted == null)) {
                this.SendSMSviaDataPortNowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSMSviaDataPortNowOperationCompleted);
            }
            this.InvokeAsync("SendSMSviaDataPortNow", new object[] {
                        phone,
                        header,
                        message,
                        messageSource}, this.SendSMSviaDataPortNowOperationCompleted, userState);
        }
        
        private void OnSendSMSviaDataPortNowOperationCompleted(object arg) {
            if ((this.SendSMSviaDataPortNowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSMSviaDataPortNowCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/SendSingleShotSMSviaDataPort", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendSingleShotSMSviaDataPort(string phone, string header, string message, int messageSource) {
            this.Invoke("SendSingleShotSMSviaDataPort", new object[] {
                        phone,
                        header,
                        message,
                        messageSource});
        }
        
        /// <remarks/>
        public void SendSingleShotSMSviaDataPortAsync(string phone, string header, string message, int messageSource) {
            this.SendSingleShotSMSviaDataPortAsync(phone, header, message, messageSource, null);
        }
        
        /// <remarks/>
        public void SendSingleShotSMSviaDataPortAsync(string phone, string header, string message, int messageSource, object userState) {
            if ((this.SendSingleShotSMSviaDataPortOperationCompleted == null)) {
                this.SendSingleShotSMSviaDataPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSingleShotSMSviaDataPortOperationCompleted);
            }
            this.InvokeAsync("SendSingleShotSMSviaDataPort", new object[] {
                        phone,
                        header,
                        message,
                        messageSource}, this.SendSingleShotSMSviaDataPortOperationCompleted, userState);
        }
        
        private void OnSendSingleShotSMSviaDataPortOperationCompleted(object arg) {
            if ((this.SendSingleShotSMSviaDataPortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSingleShotSMSviaDataPortCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/CheckCanceledMessages", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckCanceledMessages() {
            this.Invoke("CheckCanceledMessages", new object[0]);
        }
        
        /// <remarks/>
        public void CheckCanceledMessagesAsync() {
            this.CheckCanceledMessagesAsync(null);
        }
        
        /// <remarks/>
        public void CheckCanceledMessagesAsync(object userState) {
            if ((this.CheckCanceledMessagesOperationCompleted == null)) {
                this.CheckCanceledMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCanceledMessagesOperationCompleted);
            }
            this.InvokeAsync("CheckCanceledMessages", new object[0], this.CheckCanceledMessagesOperationCompleted, userState);
        }
        
        private void OnCheckCanceledMessagesOperationCompleted(object arg) {
            if ((this.CheckCanceledMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCanceledMessagesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/GetTuraTelCredit", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetTuraTelCredit(bool singleshot) {
            object[] results = this.Invoke("GetTuraTelCredit", new object[] {
                        singleshot});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetTuraTelCreditAsync(bool singleshot) {
            this.GetTuraTelCreditAsync(singleshot, null);
        }
        
        /// <remarks/>
        public void GetTuraTelCreditAsync(bool singleshot, object userState) {
            if ((this.GetTuraTelCreditOperationCompleted == null)) {
                this.GetTuraTelCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTuraTelCreditOperationCompleted);
            }
            this.InvokeAsync("GetTuraTelCredit", new object[] {
                        singleshot}, this.GetTuraTelCreditOperationCompleted, userState);
        }
        
        private void OnGetTuraTelCreditOperationCompleted(object arg) {
            if ((this.GetTuraTelCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTuraTelCreditCompleted(this, new GetTuraTelCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/GetJetSMSCredit", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetJetSMSCredit(string user, string password) {
            object[] results = this.Invoke("GetJetSMSCredit", new object[] {
                        user,
                        password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetJetSMSCreditAsync(string user, string password) {
            this.GetJetSMSCreditAsync(user, password, null);
        }
        
        /// <remarks/>
        public void GetJetSMSCreditAsync(string user, string password, object userState) {
            if ((this.GetJetSMSCreditOperationCompleted == null)) {
                this.GetJetSMSCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJetSMSCreditOperationCompleted);
            }
            this.InvokeAsync("GetJetSMSCredit", new object[] {
                        user,
                        password}, this.GetJetSMSCreditOperationCompleted, userState);
        }
        
        private void OnGetJetSMSCreditOperationCompleted(object arg) {
            if ((this.GetJetSMSCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJetSMSCreditCompleted(this, new GetJetSMSCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DRKSMSService/Test", RequestNamespace="DRKSMSService", ResponseNamespace="DRKSMSService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Test() {
            this.Invoke("Test", new object[0]);
        }
        
        /// <remarks/>
        public void TestAsync() {
            this.TestAsync(null);
        }
        
        /// <remarks/>
        public void TestAsync(object userState) {
            if ((this.TestOperationCompleted == null)) {
                this.TestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestOperationCompleted);
            }
            this.InvokeAsync("Test", new object[0], this.TestOperationCompleted, userState);
        }
        
        private void OnTestOperationCompleted(object arg) {
            if ((this.TestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="DRKSMSService")]
    public partial class AccountInfo {
        
        private int loginField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private int creditField;
        
        private int serviceCodeField;
        
        private string orginatorField;
        
        /// <remarks/>
        public int Login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public int Credit {
            get {
                return this.creditField;
            }
            set {
                this.creditField = value;
            }
        }
        
        /// <remarks/>
        public int ServiceCode {
            get {
                return this.serviceCodeField;
            }
            set {
                this.serviceCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Orginator {
            get {
                return this.orginatorField;
            }
            set {
                this.orginatorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void UpdateCurrentOperatorCompletedEventHandler(object sender, UpdateCurrentOperatorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCurrentOperatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCurrentOperatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void SendEmailMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CheckMessageStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void SendGeneralMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void SendSingleShotSmsMessageCompletedEventHandler(object sender, SendSingleShotSmsMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSingleShotSmsMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSingleShotSmsMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void SendSmsMessageFromVoipCompletedEventHandler(object sender, SendSmsMessageFromVoipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsMessageFromVoipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsMessageFromVoipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CreateMessageCompletedEventHandler(object sender, CreateMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void SendMessageFromHSPCCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void SendMessageFromEmeraldCompletedEventHandler(object sender, SendMessageFromEmeraldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageFromEmeraldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageFromEmeraldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void InsertWiSpotterRequestCompletedEventHandler(object sender, InsertWiSpotterRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertWiSpotterRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertWiSpotterRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void UpdateWiSpotterRequestResultCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void InsertCustomerReportCompletedEventHandler(object sender, InsertCustomerReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCustomerReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCustomerReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetFolderCompletedEventHandler(object sender, GetFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CreateCardBatchAccountAndSendSmsCompletedEventHandler(object sender, CreateCardBatchAccountAndSendSmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateCardBatchAccountAndSendSmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateCardBatchAccountAndSendSmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void SendMessageFromWiSpotterCompletedEventHandler(object sender, SendMessageFromWiSpotterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageFromWiSpotterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageFromWiSpotterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void SendSmsViaAveaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void DataPortAccoutInfoCompletedEventHandler(object sender, DataPortAccoutInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataPortAccoutInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DataPortAccoutInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AccountInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AccountInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void DataPortSingleShotAccoutInfoCompletedEventHandler(object sender, DataPortSingleShotAccoutInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataPortSingleShotAccoutInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DataPortSingleShotAccoutInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AccountInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AccountInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void SendSMSviaDataPortCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void SendSMSviaDataPortNowCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void SendSingleShotSMSviaDataPortCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CheckCanceledMessagesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetTuraTelCreditCompletedEventHandler(object sender, GetTuraTelCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTuraTelCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTuraTelCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetJetSMSCreditCompletedEventHandler(object sender, GetJetSMSCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJetSMSCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJetSMSCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void TestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591