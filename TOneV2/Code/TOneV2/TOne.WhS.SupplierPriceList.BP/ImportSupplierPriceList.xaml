<Activity mc:Ignorable="sap sap2010 sads" x:Class="TOne.WhS.SupplierPriceList.BP.ImportSupplierPriceList"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:local="clr-namespace:TOne.WhS.SupplierPriceList.BP.SubProcess"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:sc="clr-namespace:System.Collections;assembly=mscorlib"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:twbe="clr-namespace:TOne.WhS.BusinessEntity.Entities;assembly=TOne.WhS.BusinessEntity.Entities"
 xmlns:twsba="clr-namespace:TOne.WhS.SupplierPriceList.BP.Arguments;assembly=TOne.WhS.SupplierPriceList.BP.Arguments"
 xmlns:twsba1="clr-namespace:TOne.WhS.SupplierPriceList.BP.Activities;assembly=TOne.WhS.SupplierPriceList.BP.Activities"
 xmlns:twsbat="clr-namespace:TOne.WhS.SupplierPriceList.BP.Arguments.Tasks;assembly=TOne.WhS.SupplierPriceList.BP.Arguments"
 xmlns:twse="clr-namespace:TOne.WhS.SupplierPriceList.Entities;assembly=TOne.WhS.SupplierPriceList.Entities"
 xmlns:twses="clr-namespace:TOne.WhS.SupplierPriceList.Entities.SPL;assembly=TOne.WhS.SupplierPriceList.Entities"
 xmlns:vb="clr-namespace:Vanrise.BusinessProcess;assembly=Vanrise.BusinessProcess"
 xmlns:vbe="clr-namespace:Vanrise.BusinessProcess.Entities;assembly=Vanrise.BusinessProcess.Entities"
 xmlns:vbw="clr-namespace:Vanrise.BusinessProcess.WFActivities;assembly=Vanrise.BusinessProcess.WFActivities"
 xmlns:ve="clr-namespace:Vanrise.Entities;assembly=Vanrise.Entities"
 xmlns:vq="clr-namespace:Vanrise.Queueing;assembly=Vanrise.Queueing"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="Input" Type="InArgument(twsba:SupplierPriceListProcessInput)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap2010:WorkflowViewState.IdRef>TOne.WhS.SupplierPriceList.BP.ImportSupplierPriceList_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>TOne.WhS.SupplierPriceList.BP.Arguments</x:String>
      <x:String>TOne.WhS.SupplierPriceList.Entities.SPL</x:String>
      <x:String>Vanrise.BusinessProcess</x:String>
      <x:String>Vanrise.Queueing</x:String>
      <x:String>TOne.WhS.SupplierPriceList.BP.Arguments.Tasks</x:String>
      <x:String>TOne.WhS.SupplierPriceList.Entities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.MainExtensions</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.WFActivities</AssemblyReference>
      <AssemblyReference>Vanrise.Common</AssemblyReference>
      <AssemblyReference>Vanrise.Common.Business</AssemblyReference>
      <AssemblyReference>Vanrise.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.GenericData.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.Queueing</AssemblyReference>
      <AssemblyReference>TOne.WhS.BusinessEntity.Entities</AssemblyReference>
      <AssemblyReference>TOne.WhS.Sales.BP.Activities</AssemblyReference>
      <AssemblyReference>TOne.WhS.SupplierPriceList.BP.Activities</AssemblyReference>
      <AssemblyReference>TOne.WhS.SupplierPriceList.BP.Arguments</AssemblyReference>
      <AssemblyReference>TOne.WhS.SupplierPriceList.Entities</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>TOne.WhS.SupplierPriceList.BP</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Root" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="s:DateTime" Name="MinimumDate" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SupplierZone)" Name="ExistingZoneEntities" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SupplierCode)" Name="ExistingCodeEntities" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SupplierRate)" Name="ExistingRateEntities" />
      <Variable x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)" Name="ExistingZonesByZoneId" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:ExistingCode)" Name="ExistingCodes" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:ExistingRate)" Name="ExistingRates" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:NewCode)" Name="NewCodes" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:NewZone)" Name="NewZones" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:ChangedCode)" Name="ChangedCodes" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:ChangedZone)" Name="ChangedZones" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:NewRate)" Name="NewRates" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:ChangedRate)" Name="ChangedRates" />
      <Variable x:TypeArguments="x:Int32" Name="PriceListId" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:ImportedCode)" Name="ImportedCodes" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:ImportedRate)" Name="ImportedRates" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:ImportedCountry)" Name="ImportedCountries" />
      <Variable x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)" Name="ImportedDataToValidate" />
      <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="CountriesProcessingStatus">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">new AsyncActivityStatus()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewZone))" Name="NewZonesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewZone))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.SupplierPriceList.Entities.SPL.NewZone&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewCode))" Name="NewCodesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewCode))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.SupplierPriceList.Entities.SPL.NewCode&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewRate))" Name="NewRatesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewRate))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.SupplierPriceList.Entities.SPL.NewRate&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedZone))" Name="ChangedZonesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedZone))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.SupplierPriceList.Entities.SPL.ChangedZone&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedCode))" Name="ChangedCodesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedCode))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.SupplierPriceList.Entities.SPL.ChangedCode&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedRate))" Name="ChangedRatesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedRate))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.SupplierPriceList.Entities.SPL.ChangedRate&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:CodePreview))" Name="PreviewCodesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:CodePreview))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.SupplierPriceList.Entities.CodePreview&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)" Name="ImportedCountriesToValidate" />
      <Variable x:TypeArguments="twsbat:PreviewTaskExecutionInformation" Name="ContinueExecution">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="twsbat:PreviewTaskExecutionInformation">new TOne.WhS.SupplierPriceList.BP.Arguments.Tasks.PreviewTaskExecutionInformation()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)" Name="AfterProcessingDataToValidate" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:NotImportedCode)" Name="NotImportedCodes" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:NotImportedZone)" Name="NotImportedZones" />
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:ZoneRatePreview))" Name="PreviewZonesRatesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:ZoneRatePreview))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.SupplierPriceList.Entities.ZoneRatePreview&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)" Name="ImportedCodesRatesToValidate" />
      <Variable x:TypeArguments="scg:IEnumerable(x:Int32)" Name="ImportedRateTypeIds" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:ImportedDataByZone)" Name="ImportedDataByZone" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:ImportedZone)" Name="ImportedZones" />
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:OtherRatePreview))" Name="PreviewOtherRatesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:OtherRatePreview))">new MemoryQueue&lt;IEnumerable&lt;TOne.WhS.SupplierPriceList.Entities.OtherRatePreview&gt;&gt;();</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:IEnumerable(twses:ImportedZoneService)" Name="ImportedZonesServices" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:NewZoneService)" Name="NewZonesServices" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:ChangedZoneService)" Name="ChangedZonesServices" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SupplierZoneService)" Name="ExistingZoneServiceEntities" />
      <Variable x:TypeArguments="scg:IEnumerable(twses:ExistingZoneService)" Name="ExistingZonesServices" />
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewZoneService))" Name="NewZonesServicesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewZoneService))">new MemoryQueue&lt;IEnumerable&lt;NewZoneService&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedZoneService))" Name="ChangedZonesServicesQueue">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedZoneService))">new MemoryQueue&lt;IEnumerable&lt;ChangedZoneService&gt;&gt;()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:Boolean" Default="False" Name="ProcessHasChanges" />
      <Variable x:TypeArguments="scg:IEnumerable(x:Int32)" Name="ImportedServiceTypeIds" />
      <Variable x:TypeArguments="x:Boolean" Name="IncludeServices" />
      <Variable x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)" Name="ImportedZonesToValidate" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:PriceListCode)" Name="FilteredImportedCodes" />
      <Variable x:TypeArguments="x:Int64" Name="StateBackupId" />
      <Variable x:TypeArguments="twse:AllImportedDataByZone" Name="AllImportedDataByZone" />
      <Variable x:TypeArguments="twses:AllImportedCodes" Name="AllImportedCodes" />
      <Variable x:TypeArguments="twses:AllImportedZones" Name="AllImportedZones" />
    </Sequence.Variables>
    <twsba1:SetImportSPLContext sap2010:WorkflowViewState.IdRef="SetImportSPLContext_1">
      <twsba1:SetImportSPLContext.CurrencyId>
        <InArgument x:TypeArguments="x:Int32">
          <mca:CSharpValue x:TypeArguments="x:Int32">Input.CurrencyId</mca:CSharpValue>
        </InArgument>
      </twsba1:SetImportSPLContext.CurrencyId>
      <twsba1:SetImportSPLContext.PriceListDate>
        <InArgument x:TypeArguments="s:DateTime">
          <mca:CSharpValue x:TypeArguments="s:DateTime">Input.PriceListDate</mca:CSharpValue>
        </InArgument>
      </twsba1:SetImportSPLContext.PriceListDate>
      <twsba1:SetImportSPLContext.SupplierId>
        <InArgument x:TypeArguments="x:Int32">
          <mca:CSharpValue x:TypeArguments="x:Int32">Input.SupplierAccountId</mca:CSharpValue>
        </InArgument>
      </twsba1:SetImportSPLContext.SupplierId>
    </twsba1:SetImportSPLContext>
    <twsba1:LoadSupplierPriceListData sap2010:WorkflowViewState.IdRef="LoadSupplierPriceListData_1">
      <twsba1:LoadSupplierPriceListData.AllImportedCodes>
        <OutArgument x:TypeArguments="twses:AllImportedCodes">
          <mca:CSharpReference x:TypeArguments="twses:AllImportedCodes">AllImportedCodes</mca:CSharpReference>
        </OutArgument>
      </twsba1:LoadSupplierPriceListData.AllImportedCodes>
      <twsba1:LoadSupplierPriceListData.CurrencyId>
        <InArgument x:TypeArguments="x:Int32">
          <mca:CSharpValue x:TypeArguments="x:Int32">Input.CurrencyId</mca:CSharpValue>
        </InArgument>
      </twsba1:LoadSupplierPriceListData.CurrencyId>
      <twsba1:LoadSupplierPriceListData.FileId>
        <InArgument x:TypeArguments="x:Int64">
          <mca:CSharpValue x:TypeArguments="x:Int64">Input.FileId</mca:CSharpValue>
        </InArgument>
      </twsba1:LoadSupplierPriceListData.FileId>
      <twsba1:LoadSupplierPriceListData.FilteredImportedCodes>
        <OutArgument x:TypeArguments="scg:IEnumerable(twse:PriceListCode)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:PriceListCode)">FilteredImportedCodes</mca:CSharpReference>
        </OutArgument>
      </twsba1:LoadSupplierPriceListData.FilteredImportedCodes>
      <twsba1:LoadSupplierPriceListData.ImportedCodes>
        <OutArgument x:TypeArguments="scg:IEnumerable(twses:ImportedCode)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:ImportedCode)">ImportedCodes</mca:CSharpReference>
        </OutArgument>
      </twsba1:LoadSupplierPriceListData.ImportedCodes>
      <twsba1:LoadSupplierPriceListData.ImportedRateTypeIds>
        <OutArgument x:TypeArguments="scg:IEnumerable(x:Int32)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(x:Int32)">ImportedRateTypeIds</mca:CSharpReference>
        </OutArgument>
      </twsba1:LoadSupplierPriceListData.ImportedRateTypeIds>
      <twsba1:LoadSupplierPriceListData.ImportedRates>
        <OutArgument x:TypeArguments="scg:IEnumerable(twses:ImportedRate)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:ImportedRate)">ImportedRates</mca:CSharpReference>
        </OutArgument>
      </twsba1:LoadSupplierPriceListData.ImportedRates>
      <twsba1:LoadSupplierPriceListData.ImportedServiceTypeIds>
        <OutArgument x:TypeArguments="scg:IEnumerable(x:Int32)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(x:Int32)">ImportedServiceTypeIds</mca:CSharpReference>
        </OutArgument>
      </twsba1:LoadSupplierPriceListData.ImportedServiceTypeIds>
      <twsba1:LoadSupplierPriceListData.ImportedZonesServices>
        <OutArgument x:TypeArguments="scg:IEnumerable(twses:ImportedZoneService)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:ImportedZoneService)">ImportedZonesServices</mca:CSharpReference>
        </OutArgument>
      </twsba1:LoadSupplierPriceListData.ImportedZonesServices>
      <twsba1:LoadSupplierPriceListData.IncludeServices>
        <OutArgument x:TypeArguments="x:Boolean">
          <mca:CSharpReference x:TypeArguments="x:Boolean">IncludeServices</mca:CSharpReference>
        </OutArgument>
      </twsba1:LoadSupplierPriceListData.IncludeServices>
      <twsba1:LoadSupplierPriceListData.MinimumDate>
        <OutArgument x:TypeArguments="s:DateTime">
          <mca:CSharpReference x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpReference>
        </OutArgument>
      </twsba1:LoadSupplierPriceListData.MinimumDate>
      <twsba1:LoadSupplierPriceListData.PriceListDate>
        <InArgument x:TypeArguments="s:DateTime">
          <mca:CSharpValue x:TypeArguments="s:DateTime">Input.PriceListDate</mca:CSharpValue>
        </InArgument>
      </twsba1:LoadSupplierPriceListData.PriceListDate>
      <twsba1:LoadSupplierPriceListData.SupplierPriceListTemplateId>
        <InArgument x:TypeArguments="x:Int32">
          <mca:CSharpValue x:TypeArguments="x:Int32">Input.SupplierPriceListTemplateId</mca:CSharpValue>
        </InArgument>
      </twsba1:LoadSupplierPriceListData.SupplierPriceListTemplateId>
    </twsba1:LoadSupplierPriceListData>
    <twsba1:ShifTime sap2010:WorkflowViewState.IdRef="ShifTime_1">
      <twsba1:ShifTime.ImportedCodes>
        <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedCode)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedCode)">ImportedCodes</mca:CSharpValue>
        </InArgument>
      </twsba1:ShifTime.ImportedCodes>
      <twsba1:ShifTime.ImportedRates>
        <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedRate)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedRate)">ImportedRates</mca:CSharpValue>
        </InArgument>
      </twsba1:ShifTime.ImportedRates>
      <twsba1:ShifTime.ImportedZonesServices>
        <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedZoneService)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedZoneService)">ImportedZonesServices</mca:CSharpValue>
        </InArgument>
      </twsba1:ShifTime.ImportedZonesServices>
      <twsba1:ShifTime.MinimumDate>
        <InArgument x:TypeArguments="s:DateTime">
          <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
        </InArgument>
      </twsba1:ShifTime.MinimumDate>
      <twsba1:ShifTime.ShiftedMinimumDate>
        <OutArgument x:TypeArguments="s:DateTime">
          <mca:CSharpReference x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpReference>
        </OutArgument>
      </twsba1:ShifTime.ShiftedMinimumDate>
      <twsba1:ShifTime.SupplierId>
        <InArgument x:TypeArguments="x:Int32">
          <mca:CSharpValue x:TypeArguments="x:Int32">Input.SupplierAccountId</mca:CSharpValue>
        </InArgument>
      </twsba1:ShifTime.SupplierId>
    </twsba1:ShifTime>
    <vbw:CombineLists x:TypeArguments="vbe:IRuleTarget" sap2010:WorkflowViewState.IdRef="CombineLists`1_5">
      <vbw:CombineLists.InputLists>
        <InArgument x:TypeArguments="scg:List(sc:IEnumerable)">
          <mca:CSharpValue x:TypeArguments="scg:List(sc:IEnumerable)">new List&lt;System.Collections.IEnumerable&gt;() {new List&lt;Vanrise.BusinessProcess.Entities.IRuleTarget&gt;() { AllImportedCodes }};</mca:CSharpValue>
        </InArgument>
      </vbw:CombineLists.InputLists>
      <vbw:CombineLists.OutputList>
        <OutArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedCodesRatesToValidate</mca:CSharpReference>
        </OutArgument>
      </vbw:CombineLists.OutputList>
    </vbw:CombineLists>
    <vbw:ExecuteRules DoNotThrowExceptionOnRulesViolation="{x:Null}" GetRulesFromParentProcess="{x:Null}" ParentMessagePrefix="{x:Null}" ViolatedRulesExist="{x:Null}" WriteMessagesToParentProcess="{x:Null}" BusinessRulesKey="ValidateCodesRates" sap2010:WorkflowViewState.IdRef="ExecuteRules_4">
      <vbw:ExecuteRules.ImportedDataToValidate>
        <InArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedCodesRatesToValidate</mca:CSharpValue>
        </InArgument>
      </vbw:ExecuteRules.ImportedDataToValidate>
    </vbw:ExecuteRules>
    <twsba1:StructureDataByZones sap2010:WorkflowViewState.IdRef="StructureDataByZones_1">
      <twsba1:StructureDataByZones.AllImportedDataByZone>
        <OutArgument x:TypeArguments="twse:AllImportedDataByZone">
          <mca:CSharpReference x:TypeArguments="twse:AllImportedDataByZone">AllImportedDataByZone</mca:CSharpReference>
        </OutArgument>
      </twsba1:StructureDataByZones.AllImportedDataByZone>
      <twsba1:StructureDataByZones.FilteredImportedCodes>
        <InArgument x:TypeArguments="scg:IEnumerable(twse:PriceListCode)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:PriceListCode)">FilteredImportedCodes</mca:CSharpValue>
        </InArgument>
      </twsba1:StructureDataByZones.FilteredImportedCodes>
      <twsba1:StructureDataByZones.ImportedCodes>
        <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedCode)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedCode)">ImportedCodes</mca:CSharpValue>
        </InArgument>
      </twsba1:StructureDataByZones.ImportedCodes>
      <twsba1:StructureDataByZones.ImportedDataByZone>
        <OutArgument x:TypeArguments="scg:IEnumerable(twses:ImportedDataByZone)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:ImportedDataByZone)">ImportedDataByZone</mca:CSharpReference>
        </OutArgument>
      </twsba1:StructureDataByZones.ImportedDataByZone>
      <twsba1:StructureDataByZones.ImportedRates>
        <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedRate)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedRate)">ImportedRates</mca:CSharpValue>
        </InArgument>
      </twsba1:StructureDataByZones.ImportedRates>
      <twsba1:StructureDataByZones.ImportedZonesServices>
        <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedZoneService)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedZoneService)">ImportedZonesServices</mca:CSharpValue>
        </InArgument>
      </twsba1:StructureDataByZones.ImportedZonesServices>
    </twsba1:StructureDataByZones>
    <vbw:CombineLists x:TypeArguments="vbe:IRuleTarget" sap2010:WorkflowViewState.IdRef="CombineLists`1_1">
      <vbw:CombineLists.InputLists>
        <InArgument x:TypeArguments="scg:List(sc:IEnumerable)">
          <mca:CSharpValue x:TypeArguments="scg:List(sc:IEnumerable)" xml:space="preserve">new List&lt;System.Collections.IEnumerable&gt;()
{
    ImportedDataByZone,
    new List&lt;Vanrise.BusinessProcess.Entities.IRuleTarget&gt;(){ AllImportedDataByZone },
    new List&lt;Vanrise.BusinessProcess.Entities.IRuleTarget&gt;(){ AllImportedCodes }
};</mca:CSharpValue>
        </InArgument>
      </vbw:CombineLists.InputLists>
      <vbw:CombineLists.OutputList>
        <OutArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedDataToValidate</mca:CSharpReference>
        </OutArgument>
      </vbw:CombineLists.OutputList>
    </vbw:CombineLists>
    <vbw:ExecuteRules DoNotThrowExceptionOnRulesViolation="{x:Null}" GetRulesFromParentProcess="{x:Null}" ParentMessagePrefix="{x:Null}" ViolatedRulesExist="{x:Null}" WriteMessagesToParentProcess="{x:Null}" BusinessRulesKey="ValidateZones" sap2010:WorkflowViewState.IdRef="ExecuteRules_1">
      <vbw:ExecuteRules.ImportedDataToValidate>
        <InArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedDataToValidate</mca:CSharpValue>
        </InArgument>
      </vbw:ExecuteRules.ImportedDataToValidate>
    </vbw:ExecuteRules>
    <twsba1:StructureImportedZones sap2010:WorkflowViewState.IdRef="StructureImportedZones_1">
      <twsba1:StructureImportedZones.AllImportedZones>
        <OutArgument x:TypeArguments="twses:AllImportedZones">
          <mca:CSharpReference x:TypeArguments="twses:AllImportedZones">AllImportedZones</mca:CSharpReference>
        </OutArgument>
      </twsba1:StructureImportedZones.AllImportedZones>
      <twsba1:StructureImportedZones.ImportedDataByZone>
        <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedDataByZone)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedDataByZone)">ImportedDataByZone</mca:CSharpValue>
        </InArgument>
      </twsba1:StructureImportedZones.ImportedDataByZone>
      <twsba1:StructureImportedZones.ImportedZones>
        <OutArgument x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">ImportedZones</mca:CSharpReference>
        </OutArgument>
      </twsba1:StructureImportedZones.ImportedZones>
    </twsba1:StructureImportedZones>
    <vbw:CombineLists x:TypeArguments="vbe:IRuleTarget" sap2010:WorkflowViewState.IdRef="CombineLists`1_6">
      <vbw:CombineLists.InputLists>
        <InArgument x:TypeArguments="scg:List(sc:IEnumerable)">
          <mca:CSharpValue x:TypeArguments="scg:List(sc:IEnumerable)" xml:space="preserve">new List&lt;System.Collections.IEnumerable&gt;() 
            {
                ImportedZones,
                new List&lt;Vanrise.BusinessProcess.Entities.IRuleTarget&gt;(){AllImportedZones}
            };</mca:CSharpValue>
        </InArgument>
      </vbw:CombineLists.InputLists>
      <vbw:CombineLists.OutputList>
        <OutArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedZonesToValidate</mca:CSharpReference>
        </OutArgument>
      </vbw:CombineLists.OutputList>
    </vbw:CombineLists>
    <vbw:ExecuteRules DoNotThrowExceptionOnRulesViolation="{x:Null}" GetRulesFromParentProcess="{x:Null}" ParentMessagePrefix="{x:Null}" ViolatedRulesExist="{x:Null}" WriteMessagesToParentProcess="{x:Null}" BusinessRulesKey="ISP_ValidateImportedZones" sap2010:WorkflowViewState.IdRef="ExecuteRules_5">
      <vbw:ExecuteRules.ImportedDataToValidate>
        <InArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedZonesToValidate</mca:CSharpValue>
        </InArgument>
      </vbw:ExecuteRules.ImportedDataToValidate>
    </vbw:ExecuteRules>
    <Parallel DisplayName="GetExistingEntities" sap2010:WorkflowViewState.IdRef="Parallel_7">
      <twsba1:GetExistingZones Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingZones_3">
        <twsba1:GetExistingZones.ExistingZoneEntities>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:SupplierZone)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SupplierZone)">ExistingZoneEntities</mca:CSharpReference>
          </OutArgument>
        </twsba1:GetExistingZones.ExistingZoneEntities>
        <twsba1:GetExistingZones.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingZones.MinimumDate>
        <twsba1:GetExistingZones.SupplierId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.SupplierAccountId</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingZones.SupplierId>
      </twsba1:GetExistingZones>
      <twsba1:GetExistingCodes Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingCodes_3">
        <twsba1:GetExistingCodes.ExistingCodeEntities>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:SupplierCode)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SupplierCode)">ExistingCodeEntities</mca:CSharpReference>
          </OutArgument>
        </twsba1:GetExistingCodes.ExistingCodeEntities>
        <twsba1:GetExistingCodes.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingCodes.MinimumDate>
        <twsba1:GetExistingCodes.SupplierId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.SupplierAccountId</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingCodes.SupplierId>
      </twsba1:GetExistingCodes>
      <twsba1:GetExistingRates Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingRates_3">
        <twsba1:GetExistingRates.ExistingRateEntities>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:SupplierRate)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SupplierRate)">ExistingRateEntities</mca:CSharpReference>
          </OutArgument>
        </twsba1:GetExistingRates.ExistingRateEntities>
        <twsba1:GetExistingRates.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingRates.MinimumDate>
        <twsba1:GetExistingRates.SupplierId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.SupplierAccountId</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingRates.SupplierId>
      </twsba1:GetExistingRates>
      <twsba1:GetExistingZonesServices Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingZonesServices_1">
        <twsba1:GetExistingZonesServices.ExistingZoneServiceEntities>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:SupplierZoneService)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SupplierZoneService)">ExistingZoneServiceEntities</mca:CSharpReference>
          </OutArgument>
        </twsba1:GetExistingZonesServices.ExistingZoneServiceEntities>
        <twsba1:GetExistingZonesServices.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingZonesServices.MinimumDate>
        <twsba1:GetExistingZonesServices.SupplierId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.SupplierAccountId</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingZonesServices.SupplierId>
      </twsba1:GetExistingZonesServices>
    </Parallel>
    <twsba1:UpdateImportedBEDs sap2010:WorkflowViewState.IdRef="UpdateImportedBEDs_1">
      <twsba1:UpdateImportedBEDs.ExistingCodeEntities>
        <InArgument x:TypeArguments="scg:IEnumerable(twbe:SupplierCode)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SupplierCode)">ExistingCodeEntities</mca:CSharpValue>
        </InArgument>
      </twsba1:UpdateImportedBEDs.ExistingCodeEntities>
      <twsba1:UpdateImportedBEDs.ExistingRateEntities>
        <InArgument x:TypeArguments="scg:IEnumerable(twbe:SupplierRate)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SupplierRate)">ExistingRateEntities</mca:CSharpValue>
        </InArgument>
      </twsba1:UpdateImportedBEDs.ExistingRateEntities>
      <twsba1:UpdateImportedBEDs.ExistingZoneServiceEntities>
        <InArgument x:TypeArguments="scg:IEnumerable(twbe:SupplierZoneService)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SupplierZoneService)">ExistingZoneServiceEntities</mca:CSharpValue>
        </InArgument>
      </twsba1:UpdateImportedBEDs.ExistingZoneServiceEntities>
      <twsba1:UpdateImportedBEDs.ImportedCodes>
        <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedCode)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedCode)">ImportedCodes</mca:CSharpValue>
        </InArgument>
      </twsba1:UpdateImportedBEDs.ImportedCodes>
      <twsba1:UpdateImportedBEDs.ImportedRates>
        <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedRate)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedRate)">ImportedRates</mca:CSharpValue>
        </InArgument>
      </twsba1:UpdateImportedBEDs.ImportedRates>
      <twsba1:UpdateImportedBEDs.ImportedZones>
        <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">ImportedZones</mca:CSharpValue>
        </InArgument>
      </twsba1:UpdateImportedBEDs.ImportedZones>
    </twsba1:UpdateImportedBEDs>
    <twsba1:StructureDataByCountries sap2010:WorkflowViewState.IdRef="StructureDataByCountries_2">
      <twsba1:StructureDataByCountries.ExistingZoneEntities>
        <InArgument x:TypeArguments="scg:IEnumerable(twbe:SupplierZone)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SupplierZone)">ExistingZoneEntities</mca:CSharpValue>
        </InArgument>
      </twsba1:StructureDataByCountries.ExistingZoneEntities>
      <twsba1:StructureDataByCountries.ImportedCountries>
        <OutArgument x:TypeArguments="scg:IEnumerable(twses:ImportedCountry)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:ImportedCountry)">ImportedCountries</mca:CSharpReference>
        </OutArgument>
      </twsba1:StructureDataByCountries.ImportedCountries>
      <twsba1:StructureDataByCountries.ImportedZones>
        <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">ImportedZones</mca:CSharpValue>
        </InArgument>
      </twsba1:StructureDataByCountries.ImportedZones>
    </twsba1:StructureDataByCountries>
    <vbw:CombineLists x:TypeArguments="vbe:IRuleTarget" sap2010:WorkflowViewState.IdRef="CombineLists`1_2">
      <vbw:CombineLists.InputLists>
        <InArgument x:TypeArguments="scg:List(sc:IEnumerable)">
          <mca:CSharpValue x:TypeArguments="scg:List(sc:IEnumerable)">new List&lt;System.Collections.IEnumerable&gt;() { ImportedCountries };</mca:CSharpValue>
        </InArgument>
      </vbw:CombineLists.InputLists>
      <vbw:CombineLists.OutputList>
        <OutArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedCountriesToValidate</mca:CSharpReference>
        </OutArgument>
      </vbw:CombineLists.OutputList>
    </vbw:CombineLists>
    <vbw:ExecuteRules DoNotThrowExceptionOnRulesViolation="{x:Null}" GetRulesFromParentProcess="{x:Null}" ParentMessagePrefix="{x:Null}" ViolatedRulesExist="{x:Null}" WriteMessagesToParentProcess="{x:Null}" BusinessRulesKey="ValidateCountries" sap2010:WorkflowViewState.IdRef="ExecuteRules_2">
      <vbw:ExecuteRules.ImportedDataToValidate>
        <InArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedCountriesToValidate</mca:CSharpValue>
        </InArgument>
      </vbw:ExecuteRules.ImportedDataToValidate>
    </vbw:ExecuteRules>
    <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_2" Message="Imported data is validated">
      <vbw:WriteTrackingMessage.Severity>
        <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
          <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Severity>
    </vbw:WriteTrackingMessage>
    <twsba1:ReserveIdForPriceList sap2010:WorkflowViewState.IdRef="ReserveIdForPriceList_3">
      <twsba1:ReserveIdForPriceList.PriceListId>
        <OutArgument x:TypeArguments="x:Int32">
          <mca:CSharpReference x:TypeArguments="x:Int32">PriceListId</mca:CSharpReference>
        </OutArgument>
      </twsba1:ReserveIdForPriceList.PriceListId>
    </twsba1:ReserveIdForPriceList>
    <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_3">
      <vbw:WriteTrackingMessage.Message>
        <InArgument x:TypeArguments="x:String">
          <mca:CSharpValue x:TypeArguments="x:String">String.Format("Retrieved existing {0} zones, {1} codes and {2} rates. Ready to start processing imported data.", ExistingZoneEntities.Count(), ExistingCodeEntities.Count(), ExistingRateEntities.Count())</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Message>
      <vbw:WriteTrackingMessage.Severity>
        <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
          <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Severity>
    </vbw:WriteTrackingMessage>
    <Parallel sap2010:WorkflowViewState.IdRef="Parallel_10">
      <Parallel.Variables>
        <Variable x:TypeArguments="x:Int32" Name="ProcessingCountryCompleted" />
      </Parallel.Variables>
      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_7">
        <ForEach x:TypeArguments="twses:ImportedCountry" DisplayName="ForEach&lt;ImportedCountry&gt;" sap2010:WorkflowViewState.IdRef="ForEach`1_4">
          <ForEach.Values>
            <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedCountry)">
              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedCountry)">ImportedCountries</mca:CSharpValue>
            </InArgument>
          </ForEach.Values>
          <ActivityAction x:TypeArguments="twses:ImportedCountry">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="twses:ImportedCountry" Name="country" />
            </ActivityAction.Argument>
            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_16">
              <If sap2010:WorkflowViewState.IdRef="If_4">
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">country.ImportedZones.Count &gt; 0 || Input.SupplierPriceListType == SupplierPriceListType.Full</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_17">
                    <Parallel sap2010:WorkflowViewState.IdRef="Parallel_14">
                      <Sequence DisplayName="ProcessData" sap2010:WorkflowViewState.IdRef="Sequence_15">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="twses:ZonesByName" Name="NewAndExistingZones" />
                          <Variable x:TypeArguments="twses:ExistingCodesByCodeValue" Name="ExistingCodesByCodeValue" />
                        </Sequence.Variables>
                        <twsba1:PrepareExistingZones sap2010:WorkflowViewState.IdRef="PrepareExistingZones_4">
                          <twsba1:PrepareExistingZones.CountryId>
                            <InArgument x:TypeArguments="x:Int32">
                              <mca:CSharpValue x:TypeArguments="x:Int32">country.CountryId</mca:CSharpValue>
                            </InArgument>
                          </twsba1:PrepareExistingZones.CountryId>
                          <twsba1:PrepareExistingZones.ExistingZoneEntities>
                            <InArgument x:TypeArguments="scg:IEnumerable(twbe:SupplierZone)">
                              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SupplierZone)">ExistingZoneEntities</mca:CSharpValue>
                            </InArgument>
                          </twsba1:PrepareExistingZones.ExistingZoneEntities>
                          <twsba1:PrepareExistingZones.ExistingZonesByZoneId>
                            <OutArgument x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">
                              <mca:CSharpReference x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">ExistingZonesByZoneId</mca:CSharpReference>
                            </OutArgument>
                          </twsba1:PrepareExistingZones.ExistingZonesByZoneId>
                        </twsba1:PrepareExistingZones>
                        <Sequence DisplayName="Sequence" sap2010:WorkflowViewState.IdRef="Sequence_14">
                          <Parallel DisplayName="PrepareExistingCodesAndRates" sap2010:WorkflowViewState.IdRef="Parallel_12">
                            <twsba1:PrepareExistingCodes sap2010:WorkflowViewState.IdRef="PrepareExistingCodes_4">
                              <twsba1:PrepareExistingCodes.ExistingCodeEntities>
                                <InArgument x:TypeArguments="scg:IEnumerable(twbe:SupplierCode)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SupplierCode)">ExistingCodeEntities</mca:CSharpValue>
                                </InArgument>
                              </twsba1:PrepareExistingCodes.ExistingCodeEntities>
                              <twsba1:PrepareExistingCodes.ExistingCodes>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twses:ExistingCode)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:ExistingCode)">ExistingCodes</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:PrepareExistingCodes.ExistingCodes>
                              <twsba1:PrepareExistingCodes.ExistingZonesByZoneId>
                                <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                                </InArgument>
                              </twsba1:PrepareExistingCodes.ExistingZonesByZoneId>
                            </twsba1:PrepareExistingCodes>
                            <twsba1:PrepareExistingRates sap2010:WorkflowViewState.IdRef="PrepareExistingRates_2">
                              <twsba1:PrepareExistingRates.CurrencyId>
                                <InArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpValue x:TypeArguments="x:Int32">Input.CurrencyId</mca:CSharpValue>
                                </InArgument>
                              </twsba1:PrepareExistingRates.CurrencyId>
                              <twsba1:PrepareExistingRates.ExistingRateEntities>
                                <InArgument x:TypeArguments="scg:IEnumerable(twbe:SupplierRate)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SupplierRate)">ExistingRateEntities</mca:CSharpValue>
                                </InArgument>
                              </twsba1:PrepareExistingRates.ExistingRateEntities>
                              <twsba1:PrepareExistingRates.ExistingRates>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twses:ExistingRate)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:ExistingRate)">ExistingRates</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:PrepareExistingRates.ExistingRates>
                              <twsba1:PrepareExistingRates.ExistingZonesByZoneId>
                                <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                                </InArgument>
                              </twsba1:PrepareExistingRates.ExistingZonesByZoneId>
                            </twsba1:PrepareExistingRates>
                            <twsba1:PrepareExistingZonesServices sap2010:WorkflowViewState.IdRef="PrepareExistingZonesServices_2">
                              <twsba1:PrepareExistingZonesServices.ExistingZoneServiceEntities>
                                <InArgument x:TypeArguments="scg:IEnumerable(twbe:SupplierZoneService)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SupplierZoneService)">ExistingZoneServiceEntities</mca:CSharpValue>
                                </InArgument>
                              </twsba1:PrepareExistingZonesServices.ExistingZoneServiceEntities>
                              <twsba1:PrepareExistingZonesServices.ExistingZonesByZoneId>
                                <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                                </InArgument>
                              </twsba1:PrepareExistingZonesServices.ExistingZonesByZoneId>
                              <twsba1:PrepareExistingZonesServices.ExistingZonesServices>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twses:ExistingZoneService)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:ExistingZoneService)">ExistingZonesServices</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:PrepareExistingZonesServices.ExistingZonesServices>
                            </twsba1:PrepareExistingZonesServices>
                          </Parallel>
                          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_13">
                            <twsba1:ProcessCountryCodes Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessCountryCodes_2">
                              <twsba1:ProcessCountryCodes.ChangedCodes>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twses:ChangedCode)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:ChangedCode)">ChangedCodes</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:ProcessCountryCodes.ChangedCodes>
                              <twsba1:ProcessCountryCodes.ChangedZones>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twses:ChangedZone)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:ChangedZone)">ChangedZones</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:ProcessCountryCodes.ChangedZones>
                              <twsba1:ProcessCountryCodes.CountryId>
                                <InArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpValue x:TypeArguments="x:Int32">country.CountryId</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryCodes.CountryId>
                              <twsba1:ProcessCountryCodes.ExistingCodes>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ExistingCode)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ExistingCode)">ExistingCodes</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryCodes.ExistingCodes>
                              <twsba1:ProcessCountryCodes.ExistingZonesByZoneId>
                                <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryCodes.ExistingZonesByZoneId>
                              <twsba1:ProcessCountryCodes.ImportedCodes>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedCode)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedCode)">country.ImportedCodes</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryCodes.ImportedCodes>
                              <twsba1:ProcessCountryCodes.ImportedZones>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">country.ImportedZones</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryCodes.ImportedZones>
                              <twsba1:ProcessCountryCodes.NewAndExistingZones>
                                <OutArgument x:TypeArguments="twses:ZonesByName">
                                  <mca:CSharpReference x:TypeArguments="twses:ZonesByName">NewAndExistingZones</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:ProcessCountryCodes.NewAndExistingZones>
                              <twsba1:ProcessCountryCodes.NewCodes>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twses:NewCode)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:NewCode)">NewCodes</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:ProcessCountryCodes.NewCodes>
                              <twsba1:ProcessCountryCodes.NewZones>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twses:NewZone)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:NewZone)">NewZones</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:ProcessCountryCodes.NewZones>
                              <twsba1:ProcessCountryCodes.NotImportedCodes>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twses:NotImportedCode)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:NotImportedCode)">NotImportedCodes</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:ProcessCountryCodes.NotImportedCodes>
                              <twsba1:ProcessCountryCodes.PriceListDate>
                                <InArgument x:TypeArguments="s:DateTime">
                                  <mca:CSharpValue x:TypeArguments="s:DateTime">Input.PriceListDate</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryCodes.PriceListDate>
                              <twsba1:ProcessCountryCodes.SupplierPriceListType>
                                <InArgument x:TypeArguments="twse:SupplierPriceListType">
                                  <mca:CSharpValue x:TypeArguments="twse:SupplierPriceListType">Input.SupplierPriceListType</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryCodes.SupplierPriceListType>
                            </twsba1:ProcessCountryCodes>
                            <twsba1:ProcessCountryZones Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessCountryZones_2">
                              <twsba1:ProcessCountryZones.ExistingZones>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ExistingZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ExistingZone)">ExistingZonesByZoneId.Values</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryZones.ExistingZones>
                              <twsba1:ProcessCountryZones.ImportedZones>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">country.ImportedZones</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryZones.ImportedZones>
                              <twsba1:ProcessCountryZones.NewAndExistingZones>
                                <InArgument x:TypeArguments="twses:ZonesByName">
                                  <mca:CSharpValue x:TypeArguments="twses:ZonesByName">NewAndExistingZones</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryZones.NewAndExistingZones>
                              <twsba1:ProcessCountryZones.NotImportedZones>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twses:NotImportedZone)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:NotImportedZone)">NotImportedZones</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:ProcessCountryZones.NotImportedZones>
                            </twsba1:ProcessCountryZones>
                            <twsba1:ProcessCountryRates Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessCountryRates_2">
                              <twsba1:ProcessCountryRates.ChangedRates>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twses:ChangedRate)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:ChangedRate)">ChangedRates</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:ProcessCountryRates.ChangedRates>
                              <twsba1:ProcessCountryRates.ExistingRates>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ExistingRate)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ExistingRate)">ExistingRates</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryRates.ExistingRates>
                              <twsba1:ProcessCountryRates.ExistingZonesByZoneId>
                                <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryRates.ExistingZonesByZoneId>
                              <twsba1:ProcessCountryRates.ImportedRateTypeIds>
                                <InArgument x:TypeArguments="scg:IEnumerable(x:Int32)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:Int32)">ImportedRateTypeIds</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryRates.ImportedRateTypeIds>
                              <twsba1:ProcessCountryRates.ImportedZones>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">country.ImportedZones</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryRates.ImportedZones>
                              <twsba1:ProcessCountryRates.NewAndExistingZones>
                                <InArgument x:TypeArguments="twses:ZonesByName">
                                  <mca:CSharpValue x:TypeArguments="twses:ZonesByName">NewAndExistingZones</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryRates.NewAndExistingZones>
                              <twsba1:ProcessCountryRates.NewRates>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twses:NewRate)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:NewRate)">NewRates</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:ProcessCountryRates.NewRates>
                              <twsba1:ProcessCountryRates.NotImportedZones>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:NotImportedZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:NotImportedZone)">NotImportedZones</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryRates.NotImportedZones>
                              <twsba1:ProcessCountryRates.PriceListDate>
                                <InArgument x:TypeArguments="s:DateTime">
                                  <mca:CSharpValue x:TypeArguments="s:DateTime">Input.PriceListDate</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryRates.PriceListDate>
                            </twsba1:ProcessCountryRates>
                            <twsba1:ProcessCountryZonesServices Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessCountryZonesServices_2">
                              <twsba1:ProcessCountryZonesServices.ChangedZonesServices>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twses:ChangedZoneService)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:ChangedZoneService)">ChangedZonesServices</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:ProcessCountryZonesServices.ChangedZonesServices>
                              <twsba1:ProcessCountryZonesServices.ExistingZonesByZoneId>
                                <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twses:ExistingZone)">ExistingZonesByZoneId</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryZonesServices.ExistingZonesByZoneId>
                              <twsba1:ProcessCountryZonesServices.ExistingZonesServices>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ExistingZoneService)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ExistingZoneService)">ExistingZonesServices</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryZonesServices.ExistingZonesServices>
                              <twsba1:ProcessCountryZonesServices.ImportedServiceTypeIds>
                                <InArgument x:TypeArguments="scg:IEnumerable(x:Int32)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:Int32)">ImportedServiceTypeIds</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryZonesServices.ImportedServiceTypeIds>
                              <twsba1:ProcessCountryZonesServices.ImportedZones>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">country.ImportedZones</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryZonesServices.ImportedZones>
                              <twsba1:ProcessCountryZonesServices.IncludeServices>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">IncludeServices</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryZonesServices.IncludeServices>
                              <twsba1:ProcessCountryZonesServices.MinimumDate>
                                <InArgument x:TypeArguments="s:DateTime">
                                  <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryZonesServices.MinimumDate>
                              <twsba1:ProcessCountryZonesServices.NewAndExistingZones>
                                <InArgument x:TypeArguments="twses:ZonesByName">
                                  <mca:CSharpValue x:TypeArguments="twses:ZonesByName">NewAndExistingZones</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryZonesServices.NewAndExistingZones>
                              <twsba1:ProcessCountryZonesServices.NewZonesServices>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twses:NewZoneService)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twses:NewZoneService)">NewZonesServices</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:ProcessCountryZonesServices.NewZonesServices>
                              <twsba1:ProcessCountryZonesServices.NotImportedZones>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:NotImportedZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:NotImportedZone)">NotImportedZones</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryZonesServices.NotImportedZones>
                              <twsba1:ProcessCountryZonesServices.PriceListDate>
                                <InArgument x:TypeArguments="s:DateTime">
                                  <mca:CSharpValue x:TypeArguments="s:DateTime">Input.PriceListDate</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryZonesServices.PriceListDate>
                              <twsba1:ProcessCountryZonesServices.SupplierId>
                                <InArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpValue x:TypeArguments="x:Int32">Input.SupplierAccountId</mca:CSharpValue>
                                </InArgument>
                              </twsba1:ProcessCountryZonesServices.SupplierId>
                            </twsba1:ProcessCountryZonesServices>
                          </Sequence>
                          <vbw:CombineLists x:TypeArguments="vbe:IRuleTarget" sap2010:WorkflowViewState.IdRef="CombineLists`1_7">
                            <vbw:CombineLists.InputLists>
                              <InArgument x:TypeArguments="scg:List(sc:IEnumerable)">
                                <mca:CSharpValue x:TypeArguments="scg:List(sc:IEnumerable)" xml:space="preserve">new List&lt;System.Collections.IEnumerable&gt;()
{
    country.ImportedZones,
    country.ImportedCodes,
    NotImportedCodes,
    country.ImportedRates,
    NotImportedZones,
    new List&lt;Vanrise.BusinessProcess.Entities.IRuleTarget&gt;() { country },
    new List&lt;Vanrise.BusinessProcess.Entities.IRuleTarget&gt;()
    {
        new CountryNotImportedCodes() { CountryId = country.CountryId, NotImportedCodes = NotImportedCodes }
    },
    new List&lt;Vanrise.BusinessProcess.Entities.IRuleTarget&gt;()
    {
        new CountryNotImportedZones() { CountryId = country.CountryId, NotImportedZones = NotImportedZones }
    }
};</mca:CSharpValue>
                              </InArgument>
                            </vbw:CombineLists.InputLists>
                            <vbw:CombineLists.OutputList>
                              <OutArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
                                <mca:CSharpReference x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">AfterProcessingDataToValidate</mca:CSharpReference>
                              </OutArgument>
                            </vbw:CombineLists.OutputList>
                          </vbw:CombineLists>
                          <vbw:ExecuteRules DoNotThrowExceptionOnRulesViolation="{x:Null}" GetRulesFromParentProcess="{x:Null}" ParentMessagePrefix="{x:Null}" ViolatedRulesExist="{x:Null}" WriteMessagesToParentProcess="{x:Null}" BusinessRulesKey="ValidateAfterProcessing" sap2010:WorkflowViewState.IdRef="ExecuteRules_6">
                            <vbw:ExecuteRules.ImportedDataToValidate>
                              <InArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
                                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">AfterProcessingDataToValidate</mca:CSharpValue>
                              </InArgument>
                            </vbw:ExecuteRules.ImportedDataToValidate>
                          </vbw:ExecuteRules>
                          <twsba1:ReserveIdsForNewEntities Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ReserveIdsForNewEntities_4">
                            <twsba1:ReserveIdsForNewEntities.NewCodes>
                              <InArgument x:TypeArguments="scg:IEnumerable(twses:NewCode)">
                                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:NewCode)">NewCodes</mca:CSharpValue>
                              </InArgument>
                            </twsba1:ReserveIdsForNewEntities.NewCodes>
                            <twsba1:ReserveIdsForNewEntities.NewRates>
                              <InArgument x:TypeArguments="scg:IEnumerable(twses:NewRate)">
                                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:NewRate)">NewRates</mca:CSharpValue>
                              </InArgument>
                            </twsba1:ReserveIdsForNewEntities.NewRates>
                            <twsba1:ReserveIdsForNewEntities.NewZones>
                              <InArgument x:TypeArguments="scg:IEnumerable(twses:NewZone)">
                                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:NewZone)">NewZones</mca:CSharpValue>
                              </InArgument>
                            </twsba1:ReserveIdsForNewEntities.NewZones>
                            <twsba1:ReserveIdsForNewEntities.NewZonesServices>
                              <InArgument x:TypeArguments="scg:IEnumerable(twses:NewZoneService)">
                                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:NewZoneService)">NewZonesServices</mca:CSharpValue>
                              </InArgument>
                            </twsba1:ReserveIdsForNewEntities.NewZonesServices>
                          </twsba1:ReserveIdsForNewEntities>
                          <Parallel DisplayName="Parallel_PrepareQueuesForDBApplyProcess" sap2010:WorkflowViewState.IdRef="Parallel_13">
                            <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twses:NewZone)" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_9">
                              <vbw:EnqueueItem.Item>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:NewZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:NewZone)">NewZones</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Item>
                              <vbw:EnqueueItem.Queue>
                                <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewZone))">
                                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewZone))">NewZonesQueue</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Queue>
                            </vbw:EnqueueItem>
                            <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twses:NewCode)" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_10">
                              <vbw:EnqueueItem.Item>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:NewCode)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:NewCode)">NewCodes</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Item>
                              <vbw:EnqueueItem.Queue>
                                <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewCode))">
                                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewCode))">NewCodesQueue</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Queue>
                            </vbw:EnqueueItem>
                            <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twses:NewRate)" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_11">
                              <vbw:EnqueueItem.Item>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:NewRate)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:NewRate)">NewRates</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Item>
                              <vbw:EnqueueItem.Queue>
                                <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewRate))">
                                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewRate))">NewRatesQueue</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Queue>
                            </vbw:EnqueueItem>
                            <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twses:NewZoneService)" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_12">
                              <vbw:EnqueueItem.Item>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:NewZoneService)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:NewZoneService)">NewZonesServices</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Item>
                              <vbw:EnqueueItem.Queue>
                                <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewZoneService))">
                                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewZoneService))">NewZonesServicesQueue</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Queue>
                            </vbw:EnqueueItem>
                            <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twses:ChangedZone)" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_13">
                              <vbw:EnqueueItem.Item>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ChangedZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ChangedZone)">ChangedZones</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Item>
                              <vbw:EnqueueItem.Queue>
                                <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedZone))">
                                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedZone))">ChangedZonesQueue</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Queue>
                            </vbw:EnqueueItem>
                            <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twses:ChangedCode)" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_14">
                              <vbw:EnqueueItem.Item>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ChangedCode)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ChangedCode)">ChangedCodes</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Item>
                              <vbw:EnqueueItem.Queue>
                                <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedCode))">
                                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedCode))">ChangedCodesQueue</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Queue>
                            </vbw:EnqueueItem>
                            <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twses:ChangedRate)" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_15">
                              <vbw:EnqueueItem.Item>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ChangedRate)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ChangedRate)">ChangedRates</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Item>
                              <vbw:EnqueueItem.Queue>
                                <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedRate))">
                                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedRate))">ChangedRatesQueue</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Queue>
                            </vbw:EnqueueItem>
                            <vbw:EnqueueItem x:TypeArguments="scg:IEnumerable(twses:ChangedZoneService)" sap2010:WorkflowViewState.IdRef="EnqueueItem`1_16">
                              <vbw:EnqueueItem.Item>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ChangedZoneService)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ChangedZoneService)">ChangedZonesServices</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Item>
                              <vbw:EnqueueItem.Queue>
                                <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedZoneService))">
                                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedZoneService))">ChangedZonesServicesQueue</mca:CSharpValue>
                                </InArgument>
                              </vbw:EnqueueItem.Queue>
                            </vbw:EnqueueItem>
                            <twsba1:GenerateZonesRatesPreview sap2010:WorkflowViewState.IdRef="GenerateZonesRatesPreview_2">
                              <twsba1:GenerateZonesRatesPreview.CountryId>
                                <InArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpValue x:TypeArguments="x:Int32">country.CountryId</mca:CSharpValue>
                                </InArgument>
                              </twsba1:GenerateZonesRatesPreview.CountryId>
                              <twsba1:GenerateZonesRatesPreview.ImportedZones>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">country.ImportedZones</mca:CSharpValue>
                                </InArgument>
                              </twsba1:GenerateZonesRatesPreview.ImportedZones>
                              <twsba1:GenerateZonesRatesPreview.NotImportedZones>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:NotImportedZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:NotImportedZone)">NotImportedZones</mca:CSharpValue>
                                </InArgument>
                              </twsba1:GenerateZonesRatesPreview.NotImportedZones>
                              <twsba1:GenerateZonesRatesPreview.PreviewZonesRatesQueue>
                                <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:ZoneRatePreview))">
                                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:ZoneRatePreview))">PreviewZonesRatesQueue</mca:CSharpValue>
                                </InArgument>
                              </twsba1:GenerateZonesRatesPreview.PreviewZonesRatesQueue>
                            </twsba1:GenerateZonesRatesPreview>
                            <twsba1:GenerateCodesPreview sap2010:WorkflowViewState.IdRef="GenerateCodesPreview_2">
                              <twsba1:GenerateCodesPreview.ImportedCodes>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedCode)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedCode)">country.ImportedCodes</mca:CSharpValue>
                                </InArgument>
                              </twsba1:GenerateCodesPreview.ImportedCodes>
                              <twsba1:GenerateCodesPreview.NotImportedCodes>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:NotImportedCode)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:NotImportedCode)">NotImportedCodes</mca:CSharpValue>
                                </InArgument>
                              </twsba1:GenerateCodesPreview.NotImportedCodes>
                              <twsba1:GenerateCodesPreview.PreviewCodeQueue>
                                <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:CodePreview))">
                                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:CodePreview))">PreviewCodesQueue</mca:CSharpValue>
                                </InArgument>
                              </twsba1:GenerateCodesPreview.PreviewCodeQueue>
                            </twsba1:GenerateCodesPreview>
                            <twsba1:GenerateOtherRatesPreview sap2010:WorkflowViewState.IdRef="GenerateOtherRatesPreview_2">
                              <twsba1:GenerateOtherRatesPreview.ImportedZones>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:ImportedZone)">country.ImportedZones</mca:CSharpValue>
                                </InArgument>
                              </twsba1:GenerateOtherRatesPreview.ImportedZones>
                              <twsba1:GenerateOtherRatesPreview.NotImportedZones>
                                <InArgument x:TypeArguments="scg:IEnumerable(twses:NotImportedZone)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twses:NotImportedZone)">NotImportedZones</mca:CSharpValue>
                                </InArgument>
                              </twsba1:GenerateOtherRatesPreview.NotImportedZones>
                              <twsba1:GenerateOtherRatesPreview.PreviewOtherRatesQueue>
                                <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:OtherRatePreview))">
                                  <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:OtherRatePreview))">PreviewOtherRatesQueue</mca:CSharpValue>
                                </InArgument>
                              </twsba1:GenerateOtherRatesPreview.PreviewOtherRatesQueue>
                            </twsba1:GenerateOtherRatesPreview>
                          </Parallel>
                          <Assign sap2010:WorkflowViewState.IdRef="Assign_3">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Int32">
                                <mca:CSharpReference x:TypeArguments="x:Int32">ProcessingCountryCompleted</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Int32">
                                <mca:CSharpValue x:TypeArguments="x:Int32">ProcessingCountryCompleted + 1</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_13">
                            <vbw:WriteTrackingMessage.Message>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">String.Format("Processing '{0}' country is completed. {1} countries are remaining.", new Vanrise.Common.Business.CountryManager().GetCountry(country.CountryId).Name, (ImportedCountries.Count() - ProcessingCountryCompleted))</mca:CSharpValue>
                              </InArgument>
                            </vbw:WriteTrackingMessage.Message>
                            <vbw:WriteTrackingMessage.Severity>
                              <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                                <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
                              </InArgument>
                            </vbw:WriteTrackingMessage.Severity>
                          </vbw:WriteTrackingMessage>
                        </Sequence>
                      </Sequence>
                    </Parallel>
                  </Sequence>
                </If.Then>
              </If>
            </Sequence>
          </ActivityAction>
        </ForEach>
        <Assign sap2010:WorkflowViewState.IdRef="Assign_1">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Boolean">
              <mca:CSharpReference x:TypeArguments="x:Boolean">CountriesProcessingStatus.IsComplete</mca:CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Boolean">True</InArgument>
          </Assign.Value>
        </Assign>
      </Sequence>
      <local:ApplyEntitiesToDBProcess sap2010:WorkflowViewState.IdRef="ApplyEntitiesToDBProcess_1">
        <local:ApplyEntitiesToDBProcess.ChangedCodesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedCode))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedCode))">ChangedCodesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.ChangedCodesQueue>
        <local:ApplyEntitiesToDBProcess.ChangedRatesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedRate))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedRate))">ChangedRatesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.ChangedRatesQueue>
        <local:ApplyEntitiesToDBProcess.ChangedZonesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedZone))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedZone))">ChangedZonesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.ChangedZonesQueue>
        <local:ApplyEntitiesToDBProcess.ChangedZonesServicesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedZoneService))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:ChangedZoneService))">ChangedZonesServicesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.ChangedZonesServicesQueue>
        <local:ApplyEntitiesToDBProcess.ImportSupplierPriceListMainProcessStatus>
          <InArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">CountriesProcessingStatus</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.ImportSupplierPriceListMainProcessStatus>
        <local:ApplyEntitiesToDBProcess.NewCodesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewCode))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewCode))">NewCodesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.NewCodesQueue>
        <local:ApplyEntitiesToDBProcess.NewRatesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewRate))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewRate))">NewRatesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.NewRatesQueue>
        <local:ApplyEntitiesToDBProcess.NewZonesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewZone))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewZone))">NewZonesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.NewZonesQueue>
        <local:ApplyEntitiesToDBProcess.NewZonesServicesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewZoneService))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twses:NewZoneService))">NewZonesServicesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.NewZonesServicesQueue>
        <local:ApplyEntitiesToDBProcess.PreviewCodesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:CodePreview))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:CodePreview))">PreviewCodesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.PreviewCodesQueue>
        <local:ApplyEntitiesToDBProcess.PreviewOtherRatesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:OtherRatePreview))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:OtherRatePreview))">PreviewOtherRatesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.PreviewOtherRatesQueue>
        <local:ApplyEntitiesToDBProcess.PreviewZonesRatesQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:ZoneRatePreview))">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(scg:IEnumerable(twse:ZoneRatePreview))">PreviewZonesRatesQueue</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.PreviewZonesRatesQueue>
        <local:ApplyEntitiesToDBProcess.SupplierId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.SupplierAccountId</mca:CSharpValue>
          </InArgument>
        </local:ApplyEntitiesToDBProcess.SupplierId>
      </local:ApplyEntitiesToDBProcess>
    </Parallel>
    <twsba1:GetImportSPLContext sap2010:WorkflowViewState.IdRef="GetImportSPLContext_1">
      <twsba1:GetImportSPLContext.ProcessHasChanges>
        <OutArgument x:TypeArguments="x:Boolean">
          <mca:CSharpReference x:TypeArguments="x:Boolean">ProcessHasChanges</mca:CSharpReference>
        </OutArgument>
      </twsba1:GetImportSPLContext.ProcessHasChanges>
    </twsba1:GetImportSPLContext>
    <If sap2010:WorkflowViewState.IdRef="If_3">
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <mca:CSharpValue x:TypeArguments="x:Boolean">ProcessHasChanges</mca:CSharpValue>
        </InArgument>
      </If.Condition>
      <If.Then>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_12">
          <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_4" Message="Finished processing input data. Ready to start synchronization with existing entities.">
            <vbw:WriteTrackingMessage.Severity>
              <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
              </InArgument>
            </vbw:WriteTrackingMessage.Severity>
          </vbw:WriteTrackingMessage>
          <vbw:AssignTask x:TypeArguments="twsbat:PreviewTaskExecutionInformation" ExecutedTask="{x:Null}" sap2010:WorkflowViewState.IdRef="AssignTask`1_2" TaskTitle="Approve Price List Changes">
            <vbw:AssignTask.AssignedTo>
              <InArgument x:TypeArguments="vbe:BPTaskAssignee">
                <mca:CSharpValue x:TypeArguments="vbe:BPTaskAssignee">new Vanrise.BusinessProcess.MainExtensions.InitiatorBPTaskAssignee()</mca:CSharpValue>
              </InArgument>
            </vbw:AssignTask.AssignedTo>
            <vbw:AssignTask.TaskData>
              <InArgument x:TypeArguments="vbe:BPTaskData">
                <mca:CSharpValue x:TypeArguments="vbe:BPTaskData">new TOne.WhS.SupplierPriceList.BP.Arguments.Tasks.PreviewTaskData()</mca:CSharpValue>
              </InArgument>
            </vbw:AssignTask.TaskData>
            <vbw:AssignTask.TaskExecutionInformation>
              <OutArgument x:TypeArguments="twsbat:PreviewTaskExecutionInformation">
                <mca:CSharpReference x:TypeArguments="twsbat:PreviewTaskExecutionInformation">ContinueExecution</mca:CSharpReference>
              </OutArgument>
            </vbw:AssignTask.TaskExecutionInformation>
          </vbw:AssignTask>
          <If sap2010:WorkflowViewState.IdRef="If_2">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">ContinueExecution.Decision</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_9">
                <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_9" Message="Backup started">
                  <vbw:WriteTrackingMessage.Severity>
                    <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                      <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
                    </InArgument>
                  </vbw:WriteTrackingMessage.Severity>
                </vbw:WriteTrackingMessage>
                <twsba1:BackupData sap2010:WorkflowViewState.IdRef="BackupData_1">
                  <twsba1:BackupData.StateBackupId>
                    <OutArgument x:TypeArguments="x:Int64">
                      <mca:CSharpReference x:TypeArguments="x:Int64">StateBackupId</mca:CSharpReference>
                    </OutArgument>
                  </twsba1:BackupData.StateBackupId>
                  <twsba1:BackupData.SupplierId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.SupplierAccountId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:BackupData.SupplierId>
                  <twsba1:BackupData.UserId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.UserId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:BackupData.UserId>
                </twsba1:BackupData>
                <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_10" Message="Backup ended">
                  <vbw:WriteTrackingMessage.Severity>
                    <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                      <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
                    </InArgument>
                  </vbw:WriteTrackingMessage.Severity>
                </vbw:WriteTrackingMessage>
                <twsba1:SyncImportedDataWithDB sap2010:WorkflowViewState.IdRef="SyncImportedDataWithDB_3">
                  <twsba1:SyncImportedDataWithDB.CurrencyId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.CurrencyId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SyncImportedDataWithDB.CurrencyId>
                  <twsba1:SyncImportedDataWithDB.EffectiveOn>
                    <InArgument x:TypeArguments="s:DateTime">
                      <mca:CSharpValue x:TypeArguments="s:DateTime">Input.PriceListDate</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SyncImportedDataWithDB.EffectiveOn>
                  <twsba1:SyncImportedDataWithDB.FileId>
                    <InArgument x:TypeArguments="x:Int64">
                      <mca:CSharpValue x:TypeArguments="x:Int64">Input.FileId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SyncImportedDataWithDB.FileId>
                  <twsba1:SyncImportedDataWithDB.PriceListId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">PriceListId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SyncImportedDataWithDB.PriceListId>
                  <twsba1:SyncImportedDataWithDB.StateBackupId>
                    <InArgument x:TypeArguments="x:Int64">
                      <mca:CSharpValue x:TypeArguments="x:Int64">StateBackupId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SyncImportedDataWithDB.StateBackupId>
                  <twsba1:SyncImportedDataWithDB.SupplierId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.SupplierAccountId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SyncImportedDataWithDB.SupplierId>
                </twsba1:SyncImportedDataWithDB>
                <vbw:WriteTrackingMessage Severity="{x:Null}" sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_5" Message="Finished synchronizing with existing entities." />
              </Sequence>
            </If.Then>
            <If.Else>
              <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_7" Message="Process is canceled">
                <vbw:WriteTrackingMessage.Severity>
                  <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                    <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
                  </InArgument>
                </vbw:WriteTrackingMessage.Severity>
              </vbw:WriteTrackingMessage>
            </If.Else>
          </If>
        </Sequence>
      </If.Then>
      <If.Else>
        <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_8" Message="Pricelist has no changes">
          <vbw:WriteTrackingMessage.Severity>
            <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
              <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Warning</mca:CSharpValue>
            </InArgument>
          </vbw:WriteTrackingMessage.Severity>
        </vbw:WriteTrackingMessage>
      </If.Else>
    </If>
    <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_11" Message="Started cleaning temporary data.">
      <vbw:WriteTrackingMessage.Severity>
        <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
          <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Severity>
    </vbw:WriteTrackingMessage>
    <twsba1:CleanTemporaryTables sap2010:WorkflowViewState.IdRef="CleanTemporaryTables_2" />
    <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_12" Message="Finished cleaning temporary data.">
      <vbw:WriteTrackingMessage.Severity>
        <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
          <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
        </InArgument>
      </vbw:WriteTrackingMessage.Severity>
    </vbw:WriteTrackingMessage>
    <sads:DebugSymbol.Symbol>d1RDOlxURlNcVE9uZVYyXENvZGVcVE9uZVYyXFRPbmUuV2hTLlN1cHBsaWVyUHJpY2VMaXN0LkJQXEltcG9ydFN1cHBsaWVyUHJpY2VMaXN0LnhhbWyvAkwDzwoOAgEBYgticAMBlwVnC2fIAQMB4ARsC2zIAQMBqQRxC3HIAQMB8gN2C3bQAQMBuwN7C3vQAQMBhAOAAQuAAdABAwHNAoUBC4UBywEDAZYCiwELiwG6AQMB3wGTAQuTAdMBAwGoAZwBC5wB1gECAXGmAQumAa4BAgE6qwELqwG2AQIBA64BNa4BPAIBArgBBcgBIgMBpVvJAQWLAigDAdlVjAIFqwIXAwGOU6wCBbcCGAMBn1K4AgW+AhgDAeZRvwIF3gIjAwGbT98CBe8CGAMBrE7wAgX2AhgDAfNN9wIFhwMlAwHNTIgDBZcDGAMB3kuYAwWeAxgDAaVLnwMF5AMQAwGMRuUDBYQEIQMBwUOFBAWVBCcDAZtClgQFoQQYAwGsQaIEBagEGAMB80CpBAWvBCADAbpAsAQFtgQkAwGCQLcEBcIEIAMBkz/DBAW3CRADAaIPuAkFvgkiAwHqDr8JBb4KCgMBwQa/CgXFCiADAYgGxgoFxgpdAwGHBscKBc0KIAMBzgXFAQvFAV8DAZRcwAELwAFeAwHdW7sBC7sBWAMBplvvAQvvAXcDAe5agwILgwJeAwG3WtEBC9EBWAMBgFr+AQv+AV4DAclZiAILiAJpAwGSWdsBC9sBgQEDAdtYzAELzAFvAwGkWPQBC/QBiAEDAe1X6gEL6gF5AwG2V9YBC9YBVAMB/1blAQvlAXQDAchW4AEL4AF5AwGRVvkBC/kBYQMB2lWoAguoAl8DAaJVngILngJWAwHrVKMCC6MCXgMBtFSZAguZAoABAwH9U5QCC5QCcQMBxlOPAguPAnEDAY9TrwILrwLgAQMB11K0Agu0AoUBAwGgUrgC4QG4AvUBAwGeUrsCC7sCfQMB51HCAgvCAngDAa9RxwILxwJ5AwH4UNECC9EChAEDAcFQ2wIL2wKAAQMBilDWAgvWAnEDAdNPzAILzAJxAwGcT+ICC+cCFQMB5E7sAgvsAn8DAa1O8ALhAfAC8AEDAatO8wIL8wJ3AwH0TYQDC4QDeQMBvE3/Agv/AnwDAYVN+gIL+gJvAwHOTIsDC48DIQMBlkyUAwuUA4ABAwHfS5gD4QGYA/wBAwHdS5sDC5sDeAMBpkugAwewAyEDAf9JsQMHwQMhAwHZSMIDB9IDIQMBs0fTAwfjAykDAY1G6AML6AN3AwHVRe0DC+0DdwMBnkWBBAuBBHEDAedE/AML/ANxAwGwRPIDC/IDhQEDAflD9wML9wNxAwHCQ4gEC4gEdwMBikONBAuNBIABAwHTQpIEC5IEcQMBnEKZBAuZBKABAwHkQZ4EC54EhAEDAa1BogThAaIE9AEDAatBpQQLpQR8AwH0QKwEC6wEhQEDAbxAqQRgqQR8AwG7QLMEC7MEWwMBg0C/BAu/BIUBAwHLP7oEC7oEkwIDAZQ/xwQH8wgSAwH8FPQIB7YJKAMBow+7CQu7CWMDAesOwgkLwglbAwHCBsYJCbMKFAMBsge2Cgm8CiQDAfkGwgoLwgqFAQMBiga/CmG/CoMBAwGJBsoKC8oKhQEDAdAFxwphxwqEAQMBzwWjAw2jA4EBAwHuSq0DDa0DYQMBt0qoAw2oA1gDAYBKtAMNtAOBAQMByEm+Aw2+A2EDAZFJuQMNuQNYAwHaSM8DDc8DYQMBokjFAw3FA4EBAwHrR8oDDcoDWAMBtEfgAw3gA2EDAfxG2wMN2wNYAwHFRtYDDdYDjwEDAY5GyAQJ6AgTAwG3FekICfIIEgMB/RSpCQ2pCY0BAwHEFIsJDYsJcgMBjBSzCQ2zCWEDAdQTmgkNmgl8AwGcE/wIDfwIhAEDAeQSrgkNrgmMAQMBrBL3CA33CIQBAwH0EYYJDYYJkwEDAbwRpAkNpAmDAQMBhBGfCQ2fCYsBAwHMEIEJDYEJhAEDAZQQlQkNlQl8AwHcD5AJDZAJfAMBpA/HCQvNCSYDAbEOzgkL3gkcAwGKDd8JC7IKEAMBswe5Cg+5CoUBAwH7BrYKZLYKfgMB+gbLBA/LBHwDAds+0gQN5ggYAwG4FfAINfAIOQMBthXsCA/sCHoDAf4UygkRygmLAQMBsw7HCWbHCb4BAwGyDtsJEdsJhgEDAfoN1gkR1gmYAQMBww3OCacBzgnDAQMBwg3RCRHRCZ0BAwGLDeIJEeIJagMBtAfmCQ+nChoDAaQIqgoPsAoqAwHrB9MED+UIFAMBuRXnCRHtCSwDAdEM7gkR/gklAwGrC/8JEYUKLAMB8gqGChGlCjEDAacIpgoRpgqzAQMBpQitChWtCo8BAwHtB6oKaqoKfwMB7AfWBBXWBLMBAwG6FdoEE+MIHgMB8xXqCRfqCZEBAwHTDOcJbOcJfAMB0gz2CRf2CWsDAZoM8QkX8QlpAwHjC/sJF/sJYAMBrAuCCheCCpEBAwH0Cv8Jbf8JewMB8wqYCheYCl8DAbsKogoXogprAwGECokKF4kKZAMBzQmOCheOCmoDAZYJnQoXnQphAwHfCJMKF5MKYAMBqAimCoABpgqwAQMBpgjbBBXiCCADAfQV3AQX4QgiAwH1FeEEGfEENwMBqT3yBBngCCQDAfYV6QQf6QSLAQMBoD7uBB/uBJ0BAwHlPeQEH+QEbQMBqj3zBBusBSYDAdc4rQUb9AYmAwGQJ/UGG5AHLgMBmSaRBxuXBy4DAdwlmAcbrQc9AwHvI64HG8cIJgMB5RfICBvTCCQDAe4W1Agb3wg2AwH3FfQEHYQFOwMB9zuFBR2aBTsDAYo6mwUdqwVDAwHYOK4FHfAFOgMB1zLxBR2GBjoDAeowhwYdtQY6AwHWLLYGHfMGQgMBkSf4BiGIBxUDAdUmjQchjQecAQMBmiaRB/cBkQeQAgMBmCaUByGUB5QBAwHdJZsHIZsHfQMBoSWgByGgB30DAeYkqgchqgeMAQMBqySlByGlB30DAfAjrwcdugcvAwH4IrsHHcYHLwMBgSLHBx3SBy8DAYoh0wcd3gcvAwGTIN8HHeoHLwMBnB/rBx32By8DAaUe9wcdgggvAwGuHYMIHY4ILwMBtxyPCB2kCEADAcoapQgdtQg7AwGYGbYIHcYIQAMB5hfQCCHQCHwDAaoXywghywiAAQMB7xbcCCHcCJsBAwGzFtcIIdcIvgIDAfgV/AQj/ASRAQMB7jz3BCP3BI8BAwGzPIEFI4EFmQEDAfg7jQUjjQWPAQMBvDuIBSOIBXADAYE7kgUjkgWRAQMBxjqXBSOXBZkBAwGLOqMFI6MFmQEDAc85ngUjngWdAQMBlDmoBSOoBaABAwHZOO0FI+0FjgEDAZw44wUj4wWXAQMB4TfABSPABYkBAwGmN9kFI9kFhwEDAes26AUj6AV2AwGwNs8FI88FkQEDAfU1sQUjsQWPAQMBujXeBSPeBYcBAwH/NMUFI8UFmQEDAcQ01AUj1AWFAQMBiTS2BSO2BY8BAwHOM7sFI7sFcQMBkzPKBSPKBZEBAwHYMvkFI/kFkQEDAZwy9AUj9AWYAQMB4TGDBiODBpcBAwGmMf4FI/4FfQMB6zCKBiOKBo8BAwGvMLIGI7IGdgMB9C+oBiOoBocBAwG5L54GI54GkQEDAf4ujwYjjwaJAQMBwy6UBiOUBpkBAwGILq0GI60GjwEDAc0towYjowZ9AwGSLZkGI5kGhAEDAdcsyAYjyAaHAQMBmyzwBiPwBncDAeAr6wYj6wZ2AwGlK9cGI9cGbgMB6irNBiPNBpEBAwGvKuEGI+EGlgEDAfQpuQYjuQaeAQMBuSm+BiO+BpkBAwH+KOYGI+YGjwEDAcMo3AYj3AZ9AwGIKMMGI8MGmAEDAc0n0gYj0gZxAwGSJ7cHI7cHkgEDAbQjsgcjsgd/AwH5IsMHI8MHkgEDAb0ivgcjvgd/AwGCIs8HI88HkgEDAcYhygcjygd/AwGLIdsHI9sHoQEDAc8g1gcj1geOAQMBlCDnByPnB5oBAwHYH+IHI+IHhwEDAZ0f8wcj8weaAQMB4R7uByPuB4cBAwGmHv8HI/8HmgEDAeod+gcj+geHAQMBrx2LCCOLCKkBAwHzHIYII4YIlgEDAbgcoQgjoQiiAQMB/BuXCCOXCJEBAwHBG5wII5wIjwEDAYYbkggjkghxAwHLGq0II60IjwEDAY8asggjsgiZAQMB1BmoCCOoCJEBAwGZGcMII8MIowEDAd0YuQgjuQiRAQMBohi+CCO+CI8BAwHnFw==</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="SetImportSPLContext_1" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="LoadSupplierPriceListData_1" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="ShifTime_1" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="CombineLists`1_5" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="ExecuteRules_4" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="StructureDataByZones_1" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="CombineLists`1_1" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="ExecuteRules_1" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="StructureImportedZones_1" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="CombineLists`1_6" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="ExecuteRules_5" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="GetExistingZones_3" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetExistingCodes_3" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetExistingRates_3" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetExistingZonesServices_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_7" sap:VirtualizedContainerService.HintSize="3447,86">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="UpdateImportedBEDs_1" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="StructureDataByCountries_2" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="CombineLists`1_2" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="ExecuteRules_2" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_2" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="ReserveIdForPriceList_3" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_3" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="PrepareExistingZones_4" sap:VirtualizedContainerService.HintSize="2736,22" />
      <sap2010:ViewStateData Id="PrepareExistingCodes_4" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareExistingRates_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareExistingZonesServices_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_12" sap:VirtualizedContainerService.HintSize="2714,86">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ProcessCountryCodes_2" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="ProcessCountryZones_2" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="ProcessCountryRates_2" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="ProcessCountryZonesServices_2" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_13" sap:VirtualizedContainerService.HintSize="2714,332">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="CombineLists`1_7" sap:VirtualizedContainerService.HintSize="2714,22" />
      <sap2010:ViewStateData Id="ExecuteRules_6" sap:VirtualizedContainerService.HintSize="2714,22" />
      <sap2010:ViewStateData Id="ReserveIdsForNewEntities_4" sap:VirtualizedContainerService.HintSize="2714,22" />
      <sap2010:ViewStateData Id="EnqueueItem`1_9" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_10" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_11" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_12" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_13" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_14" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_15" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="EnqueueItem`1_16" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GenerateZonesRatesPreview_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GenerateCodesPreview_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GenerateOtherRatesPreview_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_13" sap:VirtualizedContainerService.HintSize="2714,86">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_3" sap:VirtualizedContainerService.HintSize="2714,62" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_13" sap:VirtualizedContainerService.HintSize="2714,22" />
      <sap2010:ViewStateData Id="Sequence_14" sap:VirtualizedContainerService.HintSize="2736,1058">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_15" sap:VirtualizedContainerService.HintSize="2758,1244">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Parallel_14" sap:VirtualizedContainerService.HintSize="2872,1290">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_17" sap:VirtualizedContainerService.HintSize="2894,1414">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_4" sap:VirtualizedContainerService.HintSize="3019,1564">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_16" sap:VirtualizedContainerService.HintSize="3041,1688">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ForEach`1_4" sap:VirtualizedContainerService.HintSize="3071,1838">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="3071,62" />
      <sap2010:ViewStateData Id="Sequence_7" sap:VirtualizedContainerService.HintSize="3093,2064">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ApplyEntitiesToDBProcess_1" sap:VirtualizedContainerService.HintSize="200,2064" />
      <sap2010:ViewStateData Id="Parallel_10" sap:VirtualizedContainerService.HintSize="3447,2110">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetImportSPLContext_1" sap:VirtualizedContainerService.HintSize="3447,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_4" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="AssignTask`1_2" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_9" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="BackupData_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_10" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="SyncImportedDataWithDB_3" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_5" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_9" sap:VirtualizedContainerService.HintSize="222,394">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteTrackingMessage_7" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_2" sap:VirtualizedContainerService.HintSize="464,544">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_12" sap:VirtualizedContainerService.HintSize="486,792">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteTrackingMessage_8" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_3" sap:VirtualizedContainerService.HintSize="3447,942">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteTrackingMessage_11" sap:VirtualizedContainerService.HintSize="1527,22" />
      <sap2010:ViewStateData Id="CleanTemporaryTables_2" sap:VirtualizedContainerService.HintSize="1527,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_12" sap:VirtualizedContainerService.HintSize="1527,22" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="3469,4706">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TOne.WhS.SupplierPriceList.BP.ImportSupplierPriceList_1" sap:VirtualizedContainerService.HintSize="3509,4786">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="ShouldExpandAll">False</x:Boolean>
            <x:Boolean x:Key="ShouldCollapseAll">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>