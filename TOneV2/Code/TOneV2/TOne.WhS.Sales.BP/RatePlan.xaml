<Activity mc:Ignorable="sap sap2010 sads" x:Class="TOne.WhS.Sales.BP.RatePlan"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:sc="clr-namespace:System.Collections;assembly=mscorlib"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:twbe="clr-namespace:TOne.WhS.BusinessEntity.Entities;assembly=TOne.WhS.BusinessEntity.Entities"
 xmlns:twsba="clr-namespace:TOne.WhS.Sales.BP.Arguments;assembly=TOne.WhS.Sales.BP.Arguments"
 xmlns:twsba1="clr-namespace:TOne.WhS.Sales.BP.Activities;assembly=TOne.WhS.Sales.BP.Activities"
 xmlns:twsbat="clr-namespace:TOne.WhS.Sales.BP.Arguments.Tasks;assembly=TOne.WhS.Sales.BP.Arguments"
 xmlns:twse="clr-namespace:TOne.WhS.Sales.Entities;assembly=TOne.WhS.Sales.Entities"
 xmlns:vbe="clr-namespace:Vanrise.BusinessProcess.Entities;assembly=Vanrise.BusinessProcess.Entities"
 xmlns:vbw="clr-namespace:Vanrise.BusinessProcess.WFActivities;assembly=Vanrise.BusinessProcess.WFActivities"
 xmlns:ve="clr-namespace:Vanrise.Entities;assembly=Vanrise.Entities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="Input" Type="InArgument(twsba:RatePlanInput)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap2010:WorkflowViewState.IdRef>TOne.WhS.Sales.BP.RatePlan_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>TOne.WhS.Sales.BP.Arguments</x:String>
      <x:String>TOne.WhS.Sales.Entities</x:String>
      <x:String>TOne.WhS.Sales.BP.Arguments.Tasks</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>TOne.WhS.BusinessEntity.Business</AssemblyReference>
      <AssemblyReference>TOne.WhS.BusinessEntity.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.MainExtensions</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.WFActivities</AssemblyReference>
      <AssemblyReference>Vanrise.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.GenericData.Entities</AssemblyReference>
      <AssemblyReference>TOne.WhS.Sales.BP.Activities</AssemblyReference>
      <AssemblyReference>TOne.WhS.Sales.BP.Arguments</AssemblyReference>
      <AssemblyReference>TOne.WhS.Sales.Entities</AssemblyReference>
      <AssemblyReference>TOne.WhS.SupplierPriceList.BP.Activities</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>TOne.WhS.Sales.BP</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Root" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="twse:Changes" Name="Changes" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:RateToChange)" Name="RatesToChange" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:RateToClose)" Name="RatesToClose" />
      <Variable x:TypeArguments="s:DateTime" Name="MinimumDate" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SaleZone)" Name="ExistingSaleZones" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SaleRate)" Name="ExistingSaleRates" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ExistingZone)" Name="ExistingZones" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ExistingRate)" Name="ExistingRates" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:NewRate)" Name="NewRates" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ChangedRate)" Name="ChangedRates" />
      <Variable x:TypeArguments="s:Nullable(x:Int32)" Name="ReservedSalePriceListId" />
      <Variable x:TypeArguments="twse:DefaultRoutingProductToAdd" Name="DefaultRoutingProductToAdd" />
      <Variable x:TypeArguments="twse:DefaultRoutingProductToClose" Name="DefaultRoutingProductToClose" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ExistingDefaultRoutingProduct)" Name="ExistingDefaultRoutingProducts" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:DefaultRoutingProduct)" Name="ExistingSaleEntityDefaultRoutingProducts" />
      <Variable x:TypeArguments="twse:NewDefaultRoutingProduct" Name="NewDefaultRoutingProduct" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ChangedDefaultRoutingProduct)" Name="ChangedDefaultRoutingProducts" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToAdd)" Name="SaleZoneRoutingProductsToAdd" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToClose)" Name="SaleZoneRoutingProductsToClose" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SaleZoneRoutingProduct)" Name="ExistingSaleEntityZoneRoutingProducts" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneRoutingProduct)" Name="NewSaleZoneRoutingProducts" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ChangedSaleZoneRoutingProduct)" Name="ChangedSaleZoneRoutingProducts" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ExistingSaleZoneRoutingProduct)" Name="ExistingSaleZoneRoutingProducts" />
      <Variable x:TypeArguments="twsbat:PreviewTaskExecutionInformation" Name="ContinueExecution">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="twsbat:PreviewTaskExecutionInformation">new PreviewTaskExecutionInformation()</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="scg:IEnumerable(twse:RatePreview)" Name="RatePreviews" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductPreview)" Name="SaleZoneRoutingProductPreviews" />
      <Variable x:TypeArguments="twse:RatePlanPreviewSummary" Name="RatePlanPreviewSummary" />
      <Variable x:TypeArguments="scg:Dictionary(x:Int64, twse:ExistingZone)" Name="ExistingZonesById" />
      <Variable x:TypeArguments="twse:DefaultRoutingProductPreview" Name="DefaultRoutingProductPreview" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:DataByZone)" Name="DataByZone" />
      <Variable x:TypeArguments="twse:DefaultServiceToAdd" Name="DefaultServiceToAdd" />
      <Variable x:TypeArguments="twse:DefaultServiceToClose" Name="DefaultServiceToClose" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToAdd)" Name="SaleZoneServicesToAdd" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToClose)" Name="SaleZoneServicesToClose" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SaleEntityDefaultService)" Name="ExistingSaleEntityDefaultServices" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SaleEntityZoneService)" Name="ExistingSaleEntityZoneServices" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ExistingDefaultService)" Name="ExistingDefaultServices" />
      <Variable x:TypeArguments="twse:NewDefaultService" Name="NewDefaultService" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ChangedDefaultService)" Name="ChangedDefaultServices" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ExistingSaleZoneService)" Name="ExistingSaleZoneServices" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneService)" Name="NewSaleZoneServices" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ChangedSaleZoneService)" Name="ChangedSaleZoneServices" />
      <Variable x:TypeArguments="twse:DefaultServicePreview" Name="DefaultServicePreview" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:SaleZoneServicePreview)" Name="SaleZoneServicePreviews" />
      <Variable x:TypeArguments="twse:DefaultData" Name="DefaultData" />
      <Variable x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)" Name="ImportedDataToValidate" />
      <Variable x:TypeArguments="twsbat:EmailTaskExecutionInformation" Name="EmailTaskExecutionInformation" />
      <Variable x:TypeArguments="scg:IEnumerable(x:Int32)" Name="CustomerIdsToEmail" />
      <Variable x:TypeArguments="x:Boolean" Name="ShouldNotifyCustomers" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:SalePLZoneChange)" Name="SalePLZoneChanges" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToAdd)" Name="CustomerCountriesToAdd" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)" Name="CustomerCountriesToChange" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:CustomerCountry2)" Name="ExistingSaleCustomerCountries" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ExistingCustomerCountry)" Name="ExistingCustomerCountries" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:NewCustomerCountry)" Name="NewCustomerCountries" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ChangedCustomerCountry)" Name="ChangedCustomerCountries" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:DraftNewCountry)" Name="DraftNewCountries" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ExistingCustomerCountry)" Name="ExplicitlyChangedExistingCustomerCountries" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:ChangedCustomerCountryPreview)" Name="ChangedCustomerCountryPreviews" />
      <Variable x:TypeArguments="scg:IEnumerable(twse:NewCustomerCountryPreview)" Name="NewCustomerCountryPreviews" />
      <Variable x:TypeArguments="twsbat:EmailCustomerTaskExecutionInformation" Name="EmailCustomerTaskExecutionInformation" />
      <Variable x:TypeArguments="scg:IEnumerable(x:Int32)" Name="CustomerIdsWithPriceList" />
      <Variable x:TypeArguments="scg:IEnumerable(twbe:CarrierAccountInfo)" Name="CustomersWithPriceList" />
      <Variable x:TypeArguments="x:Boolean" Name="ProcessHasChanges" />
    </Sequence.Variables>
    <twsba1:SetRatePlanContext sap2010:WorkflowViewState.IdRef="SetRatePlanContext_1">
      <twsba1:SetRatePlanContext.EffectiveDate>
        <InArgument x:TypeArguments="s:DateTime">
          <mca:CSharpValue x:TypeArguments="s:DateTime">Input.EffectiveDate</mca:CSharpValue>
        </InArgument>
      </twsba1:SetRatePlanContext.EffectiveDate>
      <twsba1:SetRatePlanContext.OwnerId>
        <InArgument x:TypeArguments="x:Int32">
          <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
        </InArgument>
      </twsba1:SetRatePlanContext.OwnerId>
      <twsba1:SetRatePlanContext.OwnerType>
        <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
          <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
        </InArgument>
      </twsba1:SetRatePlanContext.OwnerType>
    </twsba1:SetRatePlanContext>
    <twsba1:GetChanges sap2010:WorkflowViewState.IdRef="GetChanges_1">
      <twsba1:GetChanges.Changes>
        <OutArgument x:TypeArguments="twse:Changes">
          <mca:CSharpReference x:TypeArguments="twse:Changes">Changes</mca:CSharpReference>
        </OutArgument>
      </twsba1:GetChanges.Changes>
      <twsba1:GetChanges.OwnerId>
        <InArgument x:TypeArguments="x:Int32">
          <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
        </InArgument>
      </twsba1:GetChanges.OwnerId>
      <twsba1:GetChanges.OwnerType>
        <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
          <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
        </InArgument>
      </twsba1:GetChanges.OwnerType>
    </twsba1:GetChanges>
    <vbw:WriteTrackingMessage Severity="{x:Null}" sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_2" Message="Rate plan changes have been validated" />
    <vbw:WriteTrackingMessage Severity="{x:Null}" sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_3" Message="Preparing changes for processing" />
    <twsba1:PrepareActions sap2010:WorkflowViewState.IdRef="PrepareActions_1">
      <twsba1:PrepareActions.Changes>
        <InArgument x:TypeArguments="twse:Changes">
          <mca:CSharpValue x:TypeArguments="twse:Changes">Changes</mca:CSharpValue>
        </InArgument>
      </twsba1:PrepareActions.Changes>
      <twsba1:PrepareActions.CurrencyId>
        <InArgument x:TypeArguments="x:Int32">
          <mca:CSharpValue x:TypeArguments="x:Int32">Input.CurrencyId</mca:CSharpValue>
        </InArgument>
      </twsba1:PrepareActions.CurrencyId>
      <twsba1:PrepareActions.CustomerCountriesToAdd>
        <OutArgument x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToAdd)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToAdd)">CustomerCountriesToAdd</mca:CSharpReference>
        </OutArgument>
      </twsba1:PrepareActions.CustomerCountriesToAdd>
      <twsba1:PrepareActions.CustomerCountriesToChange>
        <OutArgument x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">CustomerCountriesToChange</mca:CSharpReference>
        </OutArgument>
      </twsba1:PrepareActions.CustomerCountriesToChange>
      <twsba1:PrepareActions.DefaultRoutingProductToAdd>
        <OutArgument x:TypeArguments="twse:DefaultRoutingProductToAdd">
          <mca:CSharpReference x:TypeArguments="twse:DefaultRoutingProductToAdd">DefaultRoutingProductToAdd</mca:CSharpReference>
        </OutArgument>
      </twsba1:PrepareActions.DefaultRoutingProductToAdd>
      <twsba1:PrepareActions.DefaultRoutingProductToClose>
        <OutArgument x:TypeArguments="twse:DefaultRoutingProductToClose">
          <mca:CSharpReference x:TypeArguments="twse:DefaultRoutingProductToClose">DefaultRoutingProductToClose</mca:CSharpReference>
        </OutArgument>
      </twsba1:PrepareActions.DefaultRoutingProductToClose>
      <twsba1:PrepareActions.DefaultServiceToAdd>
        <OutArgument x:TypeArguments="twse:DefaultServiceToAdd">
          <mca:CSharpReference x:TypeArguments="twse:DefaultServiceToAdd">DefaultServiceToAdd</mca:CSharpReference>
        </OutArgument>
      </twsba1:PrepareActions.DefaultServiceToAdd>
      <twsba1:PrepareActions.DefaultServiceToClose>
        <OutArgument x:TypeArguments="twse:DefaultServiceToClose">
          <mca:CSharpReference x:TypeArguments="twse:DefaultServiceToClose">DefaultServiceToClose</mca:CSharpReference>
        </OutArgument>
      </twsba1:PrepareActions.DefaultServiceToClose>
      <twsba1:PrepareActions.EffectiveDate>
        <InArgument x:TypeArguments="s:DateTime">
          <mca:CSharpValue x:TypeArguments="s:DateTime">Input.EffectiveDate</mca:CSharpValue>
        </InArgument>
      </twsba1:PrepareActions.EffectiveDate>
      <twsba1:PrepareActions.MinimumDate>
        <OutArgument x:TypeArguments="s:DateTime">
          <mca:CSharpReference x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpReference>
        </OutArgument>
      </twsba1:PrepareActions.MinimumDate>
      <twsba1:PrepareActions.OwnerId>
        <InArgument x:TypeArguments="x:Int32">
          <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
        </InArgument>
      </twsba1:PrepareActions.OwnerId>
      <twsba1:PrepareActions.OwnerType>
        <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
          <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
        </InArgument>
      </twsba1:PrepareActions.OwnerType>
      <twsba1:PrepareActions.RatesToChange>
        <OutArgument x:TypeArguments="scg:IEnumerable(twse:RateToChange)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:RateToChange)">RatesToChange</mca:CSharpReference>
        </OutArgument>
      </twsba1:PrepareActions.RatesToChange>
      <twsba1:PrepareActions.RatesToClose>
        <OutArgument x:TypeArguments="scg:IEnumerable(twse:RateToClose)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:RateToClose)">RatesToClose</mca:CSharpReference>
        </OutArgument>
      </twsba1:PrepareActions.RatesToClose>
      <twsba1:PrepareActions.SaleZoneRoutingProductsToAdd>
        <OutArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToAdd)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToAdd)">SaleZoneRoutingProductsToAdd</mca:CSharpReference>
        </OutArgument>
      </twsba1:PrepareActions.SaleZoneRoutingProductsToAdd>
      <twsba1:PrepareActions.SaleZoneRoutingProductsToClose>
        <OutArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToClose)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToClose)">SaleZoneRoutingProductsToClose</mca:CSharpReference>
        </OutArgument>
      </twsba1:PrepareActions.SaleZoneRoutingProductsToClose>
      <twsba1:PrepareActions.SaleZoneServicesToAdd>
        <OutArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToAdd)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToAdd)">SaleZoneServicesToAdd</mca:CSharpReference>
        </OutArgument>
      </twsba1:PrepareActions.SaleZoneServicesToAdd>
      <twsba1:PrepareActions.SaleZoneServicesToClose>
        <OutArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToClose)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToClose)">SaleZoneServicesToClose</mca:CSharpReference>
        </OutArgument>
      </twsba1:PrepareActions.SaleZoneServicesToClose>
    </twsba1:PrepareActions>
    <Parallel DisplayName="Parallel_StructureData" sap2010:WorkflowViewState.IdRef="Parallel_6">
      <twsba1:StructureDefaultData sap2010:WorkflowViewState.IdRef="StructureDefaultData_4">
        <twsba1:StructureDefaultData.DefaultData>
          <OutArgument x:TypeArguments="twse:DefaultData">
            <mca:CSharpReference x:TypeArguments="twse:DefaultData">DefaultData</mca:CSharpReference>
          </OutArgument>
        </twsba1:StructureDefaultData.DefaultData>
        <twsba1:StructureDefaultData.DefaultRoutingProductToAdd>
          <InArgument x:TypeArguments="twse:DefaultRoutingProductToAdd">
            <mca:CSharpValue x:TypeArguments="twse:DefaultRoutingProductToAdd">DefaultRoutingProductToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:StructureDefaultData.DefaultRoutingProductToAdd>
        <twsba1:StructureDefaultData.EffectiveOn>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">Input.EffectiveDate</mca:CSharpValue>
          </InArgument>
        </twsba1:StructureDefaultData.EffectiveOn>
        <twsba1:StructureDefaultData.OwnerId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
          </InArgument>
        </twsba1:StructureDefaultData.OwnerId>
        <twsba1:StructureDefaultData.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:StructureDefaultData.OwnerType>
      </twsba1:StructureDefaultData>
      <twsba1:StructureDataByZones sap2010:WorkflowViewState.IdRef="StructureDataByZones_5">
        <twsba1:StructureDataByZones.CurrencyId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.CurrencyId</mca:CSharpValue>
          </InArgument>
        </twsba1:StructureDataByZones.CurrencyId>
        <twsba1:StructureDataByZones.CustomerCountriesToAdd>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToAdd)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToAdd)">CustomerCountriesToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:StructureDataByZones.CustomerCountriesToAdd>
        <twsba1:StructureDataByZones.CustomerCountriesToChange>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">CustomerCountriesToChange</mca:CSharpValue>
          </InArgument>
        </twsba1:StructureDataByZones.CustomerCountriesToChange>
        <twsba1:StructureDataByZones.DataByZone>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:DataByZone)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:DataByZone)">DataByZone</mca:CSharpReference>
          </OutArgument>
        </twsba1:StructureDataByZones.DataByZone>
        <twsba1:StructureDataByZones.RatesToChange>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:RateToChange)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:RateToChange)">RatesToChange</mca:CSharpValue>
          </InArgument>
        </twsba1:StructureDataByZones.RatesToChange>
        <twsba1:StructureDataByZones.RatesToClose>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:RateToClose)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:RateToClose)">RatesToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:StructureDataByZones.RatesToClose>
        <twsba1:StructureDataByZones.SaleZoneRoutingProductsToAdd>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToAdd)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToAdd)">SaleZoneRoutingProductsToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:StructureDataByZones.SaleZoneRoutingProductsToAdd>
        <twsba1:StructureDataByZones.SaleZoneRoutingProductsToClose>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToClose)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToClose)">SaleZoneRoutingProductsToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:StructureDataByZones.SaleZoneRoutingProductsToClose>
        <twsba1:StructureDataByZones.SaleZoneServicesToAdd>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToAdd)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToAdd)">SaleZoneServicesToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:StructureDataByZones.SaleZoneServicesToAdd>
        <twsba1:StructureDataByZones.SaleZoneServicesToClose>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToClose)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToClose)">SaleZoneServicesToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:StructureDataByZones.SaleZoneServicesToClose>
      </twsba1:StructureDataByZones>
    </Parallel>
    <twsba1:SetContextEffectiveAfterCustomerZoneRatesByZone sap2010:WorkflowViewState.IdRef="SetContextEffectiveAfterCustomerZoneRatesByZone_1">
      <twsba1:SetContextEffectiveAfterCustomerZoneRatesByZone.DataByZone>
        <InArgument x:TypeArguments="scg:IEnumerable(twse:DataByZone)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:DataByZone)">DataByZone</mca:CSharpValue>
        </InArgument>
      </twsba1:SetContextEffectiveAfterCustomerZoneRatesByZone.DataByZone>
    </twsba1:SetContextEffectiveAfterCustomerZoneRatesByZone>
    <Parallel DisplayName="Parallel_GetExistingEntities" sap2010:WorkflowViewState.IdRef="Parallel_1">
      <Parallel.Variables>
        <Variable x:TypeArguments="scg:IEnumerable(twbe:SaleEntityDefaultService)" Name="SaleEntityDefaultServices" />
      </Parallel.Variables>
      <twsba1:GetExistingSaleZones Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingSaleZones_1">
        <twsba1:GetExistingSaleZones.ExistingSaleZones>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">ExistingSaleZones</mca:CSharpReference>
          </OutArgument>
        </twsba1:GetExistingSaleZones.ExistingSaleZones>
        <twsba1:GetExistingSaleZones.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleZones.MinimumDate>
        <twsba1:GetExistingSaleZones.OwnerId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleZones.OwnerId>
        <twsba1:GetExistingSaleZones.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleZones.OwnerType>
      </twsba1:GetExistingSaleZones>
      <twsba1:GetExistingSaleRates Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingSaleRates_1">
        <twsba1:GetExistingSaleRates.ExistingSaleRates>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:SaleRate)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SaleRate)">ExistingSaleRates</mca:CSharpReference>
          </OutArgument>
        </twsba1:GetExistingSaleRates.ExistingSaleRates>
        <twsba1:GetExistingSaleRates.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleRates.MinimumDate>
        <twsba1:GetExistingSaleRates.OwnerId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleRates.OwnerId>
        <twsba1:GetExistingSaleRates.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleRates.OwnerType>
      </twsba1:GetExistingSaleRates>
      <twsba1:GetExistingSaleEntityDefaultRoutingProducts Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingSaleEntityDefaultRoutingProducts_1">
        <twsba1:GetExistingSaleEntityDefaultRoutingProducts.ExistingSaleEntityDefaultRoutingProducts>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:DefaultRoutingProduct)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:DefaultRoutingProduct)">ExistingSaleEntityDefaultRoutingProducts</mca:CSharpReference>
          </OutArgument>
        </twsba1:GetExistingSaleEntityDefaultRoutingProducts.ExistingSaleEntityDefaultRoutingProducts>
        <twsba1:GetExistingSaleEntityDefaultRoutingProducts.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleEntityDefaultRoutingProducts.MinimumDate>
        <twsba1:GetExistingSaleEntityDefaultRoutingProducts.OwnerId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleEntityDefaultRoutingProducts.OwnerId>
        <twsba1:GetExistingSaleEntityDefaultRoutingProducts.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleEntityDefaultRoutingProducts.OwnerType>
      </twsba1:GetExistingSaleEntityDefaultRoutingProducts>
      <twsba1:GetExistingSaleEntityZoneRoutingProducts Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingSaleEntityZoneRoutingProducts_2">
        <twsba1:GetExistingSaleEntityZoneRoutingProducts.ExistingSaleEntityZoneRoutingProducts>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:SaleZoneRoutingProduct)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SaleZoneRoutingProduct)">ExistingSaleEntityZoneRoutingProducts</mca:CSharpReference>
          </OutArgument>
        </twsba1:GetExistingSaleEntityZoneRoutingProducts.ExistingSaleEntityZoneRoutingProducts>
        <twsba1:GetExistingSaleEntityZoneRoutingProducts.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleEntityZoneRoutingProducts.MinimumDate>
        <twsba1:GetExistingSaleEntityZoneRoutingProducts.OwnerId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleEntityZoneRoutingProducts.OwnerId>
        <twsba1:GetExistingSaleEntityZoneRoutingProducts.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleEntityZoneRoutingProducts.OwnerType>
      </twsba1:GetExistingSaleEntityZoneRoutingProducts>
      <twsba1:GetExistingSaleEntityDefaultServices Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingSaleEntityDefaultServices_1">
        <twsba1:GetExistingSaleEntityDefaultServices.ExistingSaleEntityDefaultServices>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:SaleEntityDefaultService)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SaleEntityDefaultService)">ExistingSaleEntityDefaultServices</mca:CSharpReference>
          </OutArgument>
        </twsba1:GetExistingSaleEntityDefaultServices.ExistingSaleEntityDefaultServices>
        <twsba1:GetExistingSaleEntityDefaultServices.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleEntityDefaultServices.MinimumDate>
        <twsba1:GetExistingSaleEntityDefaultServices.OwnerId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleEntityDefaultServices.OwnerId>
        <twsba1:GetExistingSaleEntityDefaultServices.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleEntityDefaultServices.OwnerType>
      </twsba1:GetExistingSaleEntityDefaultServices>
      <twsba1:GetExistingSaleEntityZoneServices Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingSaleEntityZoneServices_1">
        <twsba1:GetExistingSaleEntityZoneServices.ExistingSaleEntityZoneServices>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:SaleEntityZoneService)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:SaleEntityZoneService)">ExistingSaleEntityZoneServices</mca:CSharpReference>
          </OutArgument>
        </twsba1:GetExistingSaleEntityZoneServices.ExistingSaleEntityZoneServices>
        <twsba1:GetExistingSaleEntityZoneServices.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleEntityZoneServices.MinimumDate>
        <twsba1:GetExistingSaleEntityZoneServices.OwnerId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleEntityZoneServices.OwnerId>
        <twsba1:GetExistingSaleEntityZoneServices.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingSaleEntityZoneServices.OwnerType>
      </twsba1:GetExistingSaleEntityZoneServices>
      <twsba1:GetExistingCustomerCountries Status="{x:Null}" sap2010:WorkflowViewState.IdRef="GetExistingCustomerCountries_2">
        <twsba1:GetExistingCustomerCountries.ExistingSaleCustomerCountries>
          <OutArgument x:TypeArguments="scg:IEnumerable(twbe:CustomerCountry2)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:CustomerCountry2)">ExistingSaleCustomerCountries</mca:CSharpReference>
          </OutArgument>
        </twsba1:GetExistingCustomerCountries.ExistingSaleCustomerCountries>
        <twsba1:GetExistingCustomerCountries.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingCustomerCountries.MinimumDate>
        <twsba1:GetExistingCustomerCountries.OwnerId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingCustomerCountries.OwnerId>
        <twsba1:GetExistingCustomerCountries.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:GetExistingCustomerCountries.OwnerType>
      </twsba1:GetExistingCustomerCountries>
    </Parallel>
    <Parallel DisplayName="Parallel_PrepareExistingEntities" sap2010:WorkflowViewState.IdRef="Parallel_3">
      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_2">
        <twsba1:PrepareExistingZones sap2010:WorkflowViewState.IdRef="PrepareExistingZones_3">
          <twsba1:PrepareExistingZones.ExistingSaleZones>
            <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">
              <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">ExistingSaleZones</mca:CSharpValue>
            </InArgument>
          </twsba1:PrepareExistingZones.ExistingSaleZones>
          <twsba1:PrepareExistingZones.ExistingZones>
            <OutArgument x:TypeArguments="scg:IEnumerable(twse:ExistingZone)">
              <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ExistingZone)">ExistingZones</mca:CSharpReference>
            </OutArgument>
          </twsba1:PrepareExistingZones.ExistingZones>
          <twsba1:PrepareExistingZones.ExistingZonesById>
            <OutArgument x:TypeArguments="scg:Dictionary(x:Int64, twse:ExistingZone)">
              <mca:CSharpReference x:TypeArguments="scg:Dictionary(x:Int64, twse:ExistingZone)">ExistingZonesById</mca:CSharpReference>
            </OutArgument>
          </twsba1:PrepareExistingZones.ExistingZonesById>
        </twsba1:PrepareExistingZones>
        <Parallel sap2010:WorkflowViewState.IdRef="Parallel_7">
          <twsba1:PrepareExistingRates sap2010:WorkflowViewState.IdRef="PrepareExistingRates_2">
            <twsba1:PrepareExistingRates.CurrencyId>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">Input.CurrencyId</mca:CSharpValue>
              </InArgument>
            </twsba1:PrepareExistingRates.CurrencyId>
            <twsba1:PrepareExistingRates.ExistingRates>
              <OutArgument x:TypeArguments="scg:IEnumerable(twse:ExistingRate)">
                <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ExistingRate)">ExistingRates</mca:CSharpReference>
              </OutArgument>
            </twsba1:PrepareExistingRates.ExistingRates>
            <twsba1:PrepareExistingRates.ExistingSaleRates>
              <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleRate)">
                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleRate)">ExistingSaleRates</mca:CSharpValue>
              </InArgument>
            </twsba1:PrepareExistingRates.ExistingSaleRates>
            <twsba1:PrepareExistingRates.ExistingZonesById>
              <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twse:ExistingZone)">
                <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twse:ExistingZone)">ExistingZonesById</mca:CSharpValue>
              </InArgument>
            </twsba1:PrepareExistingRates.ExistingZonesById>
          </twsba1:PrepareExistingRates>
          <twsba1:PrepareExistingSaleZoneRoutingProducts sap2010:WorkflowViewState.IdRef="PrepareExistingSaleZoneRoutingProducts_2">
            <twsba1:PrepareExistingSaleZoneRoutingProducts.ExistingSaleEntityZoneRoutingProducts>
              <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleZoneRoutingProduct)">
                <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleZoneRoutingProduct)">ExistingSaleEntityZoneRoutingProducts</mca:CSharpValue>
              </InArgument>
            </twsba1:PrepareExistingSaleZoneRoutingProducts.ExistingSaleEntityZoneRoutingProducts>
            <twsba1:PrepareExistingSaleZoneRoutingProducts.ExistingSaleZoneRoutingProducts>
              <OutArgument x:TypeArguments="scg:IEnumerable(twse:ExistingSaleZoneRoutingProduct)">
                <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ExistingSaleZoneRoutingProduct)">ExistingSaleZoneRoutingProducts</mca:CSharpReference>
              </OutArgument>
            </twsba1:PrepareExistingSaleZoneRoutingProducts.ExistingSaleZoneRoutingProducts>
            <twsba1:PrepareExistingSaleZoneRoutingProducts.ExistingZonesById>
              <InArgument x:TypeArguments="scg:Dictionary(x:Int64, twse:ExistingZone)">
                <mca:CSharpValue x:TypeArguments="scg:Dictionary(x:Int64, twse:ExistingZone)">ExistingZonesById</mca:CSharpValue>
              </InArgument>
            </twsba1:PrepareExistingSaleZoneRoutingProducts.ExistingZonesById>
          </twsba1:PrepareExistingSaleZoneRoutingProducts>
        </Parallel>
      </Sequence>
      <twsba1:PrepareExistingDefaultRoutingProducts sap2010:WorkflowViewState.IdRef="PrepareExistingDefaultRoutingProducts_1">
        <twsba1:PrepareExistingDefaultRoutingProducts.ExistingDefaultRoutingProducts>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:ExistingDefaultRoutingProduct)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ExistingDefaultRoutingProduct)">ExistingDefaultRoutingProducts</mca:CSharpReference>
          </OutArgument>
        </twsba1:PrepareExistingDefaultRoutingProducts.ExistingDefaultRoutingProducts>
        <twsba1:PrepareExistingDefaultRoutingProducts.ExistingSaleEntityDefaultRoutingProducts>
          <InArgument x:TypeArguments="scg:IEnumerable(twbe:DefaultRoutingProduct)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:DefaultRoutingProduct)">ExistingSaleEntityDefaultRoutingProducts</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareExistingDefaultRoutingProducts.ExistingSaleEntityDefaultRoutingProducts>
      </twsba1:PrepareExistingDefaultRoutingProducts>
      <twsba1:PrepareExistingDefaultServices sap2010:WorkflowViewState.IdRef="PrepareExistingDefaultServices_1">
        <twsba1:PrepareExistingDefaultServices.ExistingDefaultServices>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:ExistingDefaultService)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ExistingDefaultService)">ExistingDefaultServices</mca:CSharpReference>
          </OutArgument>
        </twsba1:PrepareExistingDefaultServices.ExistingDefaultServices>
        <twsba1:PrepareExistingDefaultServices.ExistingSaleEntityDefaultServices>
          <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleEntityDefaultService)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleEntityDefaultService)">ExistingSaleEntityDefaultServices</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareExistingDefaultServices.ExistingSaleEntityDefaultServices>
      </twsba1:PrepareExistingDefaultServices>
      <twsba1:PrepareExistingSaleZoneServices sap2010:WorkflowViewState.IdRef="PrepareExistingSaleZoneServices_1">
        <twsba1:PrepareExistingSaleZoneServices.ExistingSaleEntityZoneServices>
          <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleEntityZoneService)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleEntityZoneService)">ExistingSaleEntityZoneServices</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareExistingSaleZoneServices.ExistingSaleEntityZoneServices>
        <twsba1:PrepareExistingSaleZoneServices.ExistingSaleZoneServices>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:ExistingSaleZoneService)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ExistingSaleZoneService)">ExistingSaleZoneServices</mca:CSharpReference>
          </OutArgument>
        </twsba1:PrepareExistingSaleZoneServices.ExistingSaleZoneServices>
      </twsba1:PrepareExistingSaleZoneServices>
      <twsba1:PrepareExistingCustomerCountries sap2010:WorkflowViewState.IdRef="PrepareExistingCustomerCountries_2">
        <twsba1:PrepareExistingCustomerCountries.ExistingCustomerCountries>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:ExistingCustomerCountry)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ExistingCustomerCountry)">ExistingCustomerCountries</mca:CSharpReference>
          </OutArgument>
        </twsba1:PrepareExistingCustomerCountries.ExistingCustomerCountries>
        <twsba1:PrepareExistingCustomerCountries.ExistingSaleCustomerCountries>
          <InArgument x:TypeArguments="scg:IEnumerable(twbe:CustomerCountry2)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:CustomerCountry2)">ExistingSaleCustomerCountries</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareExistingCustomerCountries.ExistingSaleCustomerCountries>
        <twsba1:PrepareExistingCustomerCountries.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareExistingCustomerCountries.OwnerType>
      </twsba1:PrepareExistingCustomerCountries>
    </Parallel>
    <twsba1:SetContextExistingZonesByCountry sap2010:WorkflowViewState.IdRef="SetContextExistingZonesByCountry_1">
      <twsba1:SetContextExistingZonesByCountry.ExistingZones>
        <InArgument x:TypeArguments="scg:IEnumerable(twse:ExistingZone)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ExistingZone)">ExistingZones</mca:CSharpValue>
        </InArgument>
      </twsba1:SetContextExistingZonesByCountry.ExistingZones>
    </twsba1:SetContextExistingZonesByCountry>
    <twsba1:SetContextIntersectedSellingProductZoneRatesByZone sap2010:WorkflowViewState.IdRef="SetContextIntersectedSellingProductZoneRatesByZone_2">
      <twsba1:SetContextIntersectedSellingProductZoneRatesByZone.CustomerCountriesToAdd>
        <InArgument x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToAdd)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToAdd)">CustomerCountriesToAdd</mca:CSharpValue>
        </InArgument>
      </twsba1:SetContextIntersectedSellingProductZoneRatesByZone.CustomerCountriesToAdd>
      <twsba1:SetContextIntersectedSellingProductZoneRatesByZone.MinimumDate>
        <InArgument x:TypeArguments="s:DateTime">
          <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
        </InArgument>
      </twsba1:SetContextIntersectedSellingProductZoneRatesByZone.MinimumDate>
    </twsba1:SetContextIntersectedSellingProductZoneRatesByZone>
    <vbw:WriteTrackingMessage Severity="{x:Null}" sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_4" Message="Processing changes..." />
    <twsba1:ProcessCustomerCountries Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessCustomerCountries_1">
      <twsba1:ProcessCustomerCountries.ChangedCustomerCountries>
        <OutArgument x:TypeArguments="scg:IEnumerable(twse:ChangedCustomerCountry)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ChangedCustomerCountry)">ChangedCustomerCountries</mca:CSharpReference>
        </OutArgument>
      </twsba1:ProcessCustomerCountries.ChangedCustomerCountries>
      <twsba1:ProcessCustomerCountries.CustomerCountriesToAdd>
        <InArgument x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToAdd)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToAdd)">CustomerCountriesToAdd</mca:CSharpValue>
        </InArgument>
      </twsba1:ProcessCustomerCountries.CustomerCountriesToAdd>
      <twsba1:ProcessCustomerCountries.CustomerCountriesToChange>
        <InArgument x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">CustomerCountriesToChange</mca:CSharpValue>
        </InArgument>
      </twsba1:ProcessCustomerCountries.CustomerCountriesToChange>
      <twsba1:ProcessCustomerCountries.ExistingCustomerCountries>
        <InArgument x:TypeArguments="scg:IEnumerable(twse:ExistingCustomerCountry)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ExistingCustomerCountry)">ExistingCustomerCountries</mca:CSharpValue>
        </InArgument>
      </twsba1:ProcessCustomerCountries.ExistingCustomerCountries>
      <twsba1:ProcessCustomerCountries.ExplicitlyChangedExistingCustomerCountries>
        <OutArgument x:TypeArguments="scg:IEnumerable(twse:ExistingCustomerCountry)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ExistingCustomerCountry)">ExplicitlyChangedExistingCustomerCountries</mca:CSharpReference>
        </OutArgument>
      </twsba1:ProcessCustomerCountries.ExplicitlyChangedExistingCustomerCountries>
      <twsba1:ProcessCustomerCountries.NewCustomerCountries>
        <OutArgument x:TypeArguments="scg:IEnumerable(twse:NewCustomerCountry)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:NewCustomerCountry)">NewCustomerCountries</mca:CSharpReference>
        </OutArgument>
      </twsba1:ProcessCustomerCountries.NewCustomerCountries>
      <twsba1:ProcessCustomerCountries.OwnerType>
        <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
          <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
        </InArgument>
      </twsba1:ProcessCustomerCountries.OwnerType>
    </twsba1:ProcessCustomerCountries>
    <Parallel DisplayName="Parallel_ProcessActions" sap2010:WorkflowViewState.IdRef="Parallel_4">
      <twsba1:ProcessRates Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessRates_3">
        <twsba1:ProcessRates.ChangedRates>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:ChangedRate)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ChangedRate)">ChangedRates</mca:CSharpReference>
          </OutArgument>
        </twsba1:ProcessRates.ChangedRates>
        <twsba1:ProcessRates.ExistingRates>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ExistingRate)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ExistingRate)">ExistingRates</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessRates.ExistingRates>
        <twsba1:ProcessRates.ExistingZones>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ExistingZone)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ExistingZone)">ExistingZones</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessRates.ExistingZones>
        <twsba1:ProcessRates.ExplicitlyChangedExistingCustomerCountries>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ExistingCustomerCountry)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ExistingCustomerCountry)">ExplicitlyChangedExistingCustomerCountries</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessRates.ExplicitlyChangedExistingCustomerCountries>
        <twsba1:ProcessRates.NewRates>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:NewRate)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:NewRate)">NewRates</mca:CSharpReference>
          </OutArgument>
        </twsba1:ProcessRates.NewRates>
        <twsba1:ProcessRates.RatesToChange>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:RateToChange)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:RateToChange)">RatesToChange</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessRates.RatesToChange>
        <twsba1:ProcessRates.RatesToClose>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:RateToClose)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:RateToClose)">RatesToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessRates.RatesToClose>
      </twsba1:ProcessRates>
      <twsba1:ProcessDefaultRoutingProduct Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessDefaultRoutingProduct_1">
        <twsba1:ProcessDefaultRoutingProduct.ChangedDefaultRoutingProducts>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:ChangedDefaultRoutingProduct)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ChangedDefaultRoutingProduct)">ChangedDefaultRoutingProducts</mca:CSharpReference>
          </OutArgument>
        </twsba1:ProcessDefaultRoutingProduct.ChangedDefaultRoutingProducts>
        <twsba1:ProcessDefaultRoutingProduct.DefaultRoutingProductToAdd>
          <InArgument x:TypeArguments="twse:DefaultRoutingProductToAdd">
            <mca:CSharpValue x:TypeArguments="twse:DefaultRoutingProductToAdd">DefaultRoutingProductToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessDefaultRoutingProduct.DefaultRoutingProductToAdd>
        <twsba1:ProcessDefaultRoutingProduct.DefaultRoutingProductToClose>
          <InArgument x:TypeArguments="twse:DefaultRoutingProductToClose">
            <mca:CSharpValue x:TypeArguments="twse:DefaultRoutingProductToClose">DefaultRoutingProductToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessDefaultRoutingProduct.DefaultRoutingProductToClose>
        <twsba1:ProcessDefaultRoutingProduct.ExistingDefaultRoutingProducts>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ExistingDefaultRoutingProduct)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ExistingDefaultRoutingProduct)">ExistingDefaultRoutingProducts</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessDefaultRoutingProduct.ExistingDefaultRoutingProducts>
        <twsba1:ProcessDefaultRoutingProduct.NewDefaultRoutingProduct>
          <OutArgument x:TypeArguments="twse:NewDefaultRoutingProduct">
            <mca:CSharpReference x:TypeArguments="twse:NewDefaultRoutingProduct">NewDefaultRoutingProduct</mca:CSharpReference>
          </OutArgument>
        </twsba1:ProcessDefaultRoutingProduct.NewDefaultRoutingProduct>
      </twsba1:ProcessDefaultRoutingProduct>
      <twsba1:ProcessSaleZoneRoutingProducts Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessSaleZoneRoutingProducts_1">
        <twsba1:ProcessSaleZoneRoutingProducts.ChangedSaleZoneRoutingProducts>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:ChangedSaleZoneRoutingProduct)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ChangedSaleZoneRoutingProduct)">ChangedSaleZoneRoutingProducts</mca:CSharpReference>
          </OutArgument>
        </twsba1:ProcessSaleZoneRoutingProducts.ChangedSaleZoneRoutingProducts>
        <twsba1:ProcessSaleZoneRoutingProducts.ExistingSaleZoneRoutingProducts>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ExistingSaleZoneRoutingProduct)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ExistingSaleZoneRoutingProduct)">ExistingSaleZoneRoutingProducts</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessSaleZoneRoutingProducts.ExistingSaleZoneRoutingProducts>
        <twsba1:ProcessSaleZoneRoutingProducts.ExistingZones>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ExistingZone)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ExistingZone)">ExistingZones</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessSaleZoneRoutingProducts.ExistingZones>
        <twsba1:ProcessSaleZoneRoutingProducts.ExplicitlyChangedExistingCustomerCountries>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ExistingCustomerCountry)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ExistingCustomerCountry)">ExplicitlyChangedExistingCustomerCountries</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessSaleZoneRoutingProducts.ExplicitlyChangedExistingCustomerCountries>
        <twsba1:ProcessSaleZoneRoutingProducts.NewSaleZoneRoutingProducts>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneRoutingProduct)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneRoutingProduct)">NewSaleZoneRoutingProducts</mca:CSharpReference>
          </OutArgument>
        </twsba1:ProcessSaleZoneRoutingProducts.NewSaleZoneRoutingProducts>
        <twsba1:ProcessSaleZoneRoutingProducts.SaleZoneRoutingProductsToAdd>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToAdd)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToAdd)">SaleZoneRoutingProductsToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessSaleZoneRoutingProducts.SaleZoneRoutingProductsToAdd>
        <twsba1:ProcessSaleZoneRoutingProducts.SaleZoneRoutingProductsToClose>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToClose)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToClose)">SaleZoneRoutingProductsToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessSaleZoneRoutingProducts.SaleZoneRoutingProductsToClose>
      </twsba1:ProcessSaleZoneRoutingProducts>
      <twsba1:ProcessDefaultService Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessDefaultService_1">
        <twsba1:ProcessDefaultService.ChangedDefaultServices>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:ChangedDefaultService)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ChangedDefaultService)">ChangedDefaultServices</mca:CSharpReference>
          </OutArgument>
        </twsba1:ProcessDefaultService.ChangedDefaultServices>
        <twsba1:ProcessDefaultService.DefaultServiceToAdd>
          <InArgument x:TypeArguments="twse:DefaultServiceToAdd">
            <mca:CSharpValue x:TypeArguments="twse:DefaultServiceToAdd">DefaultServiceToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessDefaultService.DefaultServiceToAdd>
        <twsba1:ProcessDefaultService.DefaultServiceToClose>
          <InArgument x:TypeArguments="twse:DefaultServiceToClose">
            <mca:CSharpValue x:TypeArguments="twse:DefaultServiceToClose">DefaultServiceToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessDefaultService.DefaultServiceToClose>
        <twsba1:ProcessDefaultService.ExistingDefaultServices>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ExistingDefaultService)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ExistingDefaultService)">ExistingDefaultServices</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessDefaultService.ExistingDefaultServices>
        <twsba1:ProcessDefaultService.NewDefaultService>
          <OutArgument x:TypeArguments="twse:NewDefaultService">
            <mca:CSharpReference x:TypeArguments="twse:NewDefaultService">NewDefaultService</mca:CSharpReference>
          </OutArgument>
        </twsba1:ProcessDefaultService.NewDefaultService>
      </twsba1:ProcessDefaultService>
      <twsba1:ProcessSaleZoneServices Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ProcessSaleZoneServices_1">
        <twsba1:ProcessSaleZoneServices.ChangedSaleZoneServices>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:ChangedSaleZoneService)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ChangedSaleZoneService)">ChangedSaleZoneServices</mca:CSharpReference>
          </OutArgument>
        </twsba1:ProcessSaleZoneServices.ChangedSaleZoneServices>
        <twsba1:ProcessSaleZoneServices.ExistingSaleZoneServices>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ExistingSaleZoneService)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ExistingSaleZoneService)">ExistingSaleZoneServices</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessSaleZoneServices.ExistingSaleZoneServices>
        <twsba1:ProcessSaleZoneServices.ExistingZones>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ExistingZone)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ExistingZone)">ExistingZones</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessSaleZoneServices.ExistingZones>
        <twsba1:ProcessSaleZoneServices.NewSaleZoneServices>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneService)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneService)">NewSaleZoneServices</mca:CSharpReference>
          </OutArgument>
        </twsba1:ProcessSaleZoneServices.NewSaleZoneServices>
        <twsba1:ProcessSaleZoneServices.SaleZoneServicesToAdd>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToAdd)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToAdd)">SaleZoneServicesToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessSaleZoneServices.SaleZoneServicesToAdd>
        <twsba1:ProcessSaleZoneServices.SaleZoneServicesToClose>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToClose)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToClose)">SaleZoneServicesToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:ProcessSaleZoneServices.SaleZoneServicesToClose>
      </twsba1:ProcessSaleZoneServices>
    </Parallel>
    <twsba1:UpdateZonesData sap2010:WorkflowViewState.IdRef="UpdateZonesData_1">
      <twsba1:UpdateZonesData.DataByZone>
        <InArgument x:TypeArguments="scg:IEnumerable(twse:DataByZone)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:DataByZone)">DataByZone</mca:CSharpValue>
        </InArgument>
      </twsba1:UpdateZonesData.DataByZone>
      <twsba1:UpdateZonesData.ExistingZones>
        <InArgument x:TypeArguments="scg:IEnumerable(twse:ExistingZone)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ExistingZone)">ExistingZones</mca:CSharpValue>
        </InArgument>
      </twsba1:UpdateZonesData.ExistingZones>
    </twsba1:UpdateZonesData>
    <vbw:CombineLists x:TypeArguments="vbe:IRuleTarget" sap2010:WorkflowViewState.IdRef="CombineLists`1_1">
      <vbw:CombineLists.InputLists>
        <InArgument x:TypeArguments="scg:List(sc:IEnumerable)">
          <mca:CSharpValue x:TypeArguments="scg:List(sc:IEnumerable)">new List&lt;System.Collections.IEnumerable&gt;() { DataByZone, new List&lt;DefaultData&gt;() { DefaultData }, CustomerCountriesToAdd, CustomerCountriesToChange };</mca:CSharpValue>
        </InArgument>
      </vbw:CombineLists.InputLists>
      <vbw:CombineLists.OutputList>
        <OutArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpReference x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedDataToValidate</mca:CSharpReference>
        </OutArgument>
      </vbw:CombineLists.OutputList>
    </vbw:CombineLists>
    <vbw:ExecuteRules BusinessRulesKey="RatePlan_ValidateAfterProcessing" DisplayName="ExecuteRules_ValidateZonesAfterProcessing" sap2010:WorkflowViewState.IdRef="ExecuteRules_1">
      <vbw:ExecuteRules.ImportedDataToValidate>
        <InArgument x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(vbe:IRuleTarget)">ImportedDataToValidate</mca:CSharpValue>
        </InArgument>
      </vbw:ExecuteRules.ImportedDataToValidate>
    </vbw:ExecuteRules>
    <vbw:WriteTrackingMessage Severity="{x:Null}" sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_5" Message="Changes have been processed" />
    <Parallel DisplayName="Parallel_PrepareForDBApply" sap2010:WorkflowViewState.IdRef="Parallel_5">
      <twsba1:ReserveIdsForNewEntities Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ReserveIdsForNewEntities_1">
        <twsba1:ReserveIdsForNewEntities.NewCustomerCountries>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:NewCustomerCountry)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:NewCustomerCountry)">NewCustomerCountries</mca:CSharpValue>
          </InArgument>
        </twsba1:ReserveIdsForNewEntities.NewCustomerCountries>
        <twsba1:ReserveIdsForNewEntities.NewDefaultRoutingProduct>
          <InArgument x:TypeArguments="twse:NewDefaultRoutingProduct">
            <mca:CSharpValue x:TypeArguments="twse:NewDefaultRoutingProduct">NewDefaultRoutingProduct</mca:CSharpValue>
          </InArgument>
        </twsba1:ReserveIdsForNewEntities.NewDefaultRoutingProduct>
        <twsba1:ReserveIdsForNewEntities.NewDefaultService>
          <InArgument x:TypeArguments="twse:NewDefaultService">
            <mca:CSharpValue x:TypeArguments="twse:NewDefaultService">NewDefaultService</mca:CSharpValue>
          </InArgument>
        </twsba1:ReserveIdsForNewEntities.NewDefaultService>
        <twsba1:ReserveIdsForNewEntities.NewRates>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:NewRate)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:NewRate)">NewRates</mca:CSharpValue>
          </InArgument>
        </twsba1:ReserveIdsForNewEntities.NewRates>
        <twsba1:ReserveIdsForNewEntities.NewSaleZoneRoutingProducts>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneRoutingProduct)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneRoutingProduct)">NewSaleZoneRoutingProducts</mca:CSharpValue>
          </InArgument>
        </twsba1:ReserveIdsForNewEntities.NewSaleZoneRoutingProducts>
        <twsba1:ReserveIdsForNewEntities.NewSaleZoneServices>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneService)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneService)">NewSaleZoneServices</mca:CSharpValue>
          </InArgument>
        </twsba1:ReserveIdsForNewEntities.NewSaleZoneServices>
      </twsba1:ReserveIdsForNewEntities>
      <twsba1:PrepareRatePlanPreviewSummary Status="{x:Null}" sap2010:WorkflowViewState.IdRef="PrepareRatePlanPreviewSummary_1">
        <twsba1:PrepareRatePlanPreviewSummary.CustomerCountriesToChange>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">CustomerCountriesToChange</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareRatePlanPreviewSummary.CustomerCountriesToChange>
        <twsba1:PrepareRatePlanPreviewSummary.DefaultRoutingProductToAdd>
          <InArgument x:TypeArguments="twse:DefaultRoutingProductToAdd">
            <mca:CSharpValue x:TypeArguments="twse:DefaultRoutingProductToAdd">DefaultRoutingProductToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareRatePlanPreviewSummary.DefaultRoutingProductToAdd>
        <twsba1:PrepareRatePlanPreviewSummary.DefaultRoutingProductToClose>
          <InArgument x:TypeArguments="twse:DefaultRoutingProductToClose">
            <mca:CSharpValue x:TypeArguments="twse:DefaultRoutingProductToClose">DefaultRoutingProductToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareRatePlanPreviewSummary.DefaultRoutingProductToClose>
        <twsba1:PrepareRatePlanPreviewSummary.DefaultServiceToAdd>
          <InArgument x:TypeArguments="twse:DefaultServiceToAdd">
            <mca:CSharpValue x:TypeArguments="twse:DefaultServiceToAdd">DefaultServiceToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareRatePlanPreviewSummary.DefaultServiceToAdd>
        <twsba1:PrepareRatePlanPreviewSummary.DefaultServiceToClose>
          <InArgument x:TypeArguments="twse:DefaultServiceToClose">
            <mca:CSharpValue x:TypeArguments="twse:DefaultServiceToClose">DefaultServiceToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareRatePlanPreviewSummary.DefaultServiceToClose>
        <twsba1:PrepareRatePlanPreviewSummary.RatePlanPreviewSummary>
          <OutArgument x:TypeArguments="twse:RatePlanPreviewSummary">
            <mca:CSharpReference x:TypeArguments="twse:RatePlanPreviewSummary">RatePlanPreviewSummary</mca:CSharpReference>
          </OutArgument>
        </twsba1:PrepareRatePlanPreviewSummary.RatePlanPreviewSummary>
        <twsba1:PrepareRatePlanPreviewSummary.RatesToChange>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:RateToChange)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:RateToChange)">RatesToChange</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareRatePlanPreviewSummary.RatesToChange>
        <twsba1:PrepareRatePlanPreviewSummary.RatesToClose>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:RateToClose)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:RateToClose)">RatesToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareRatePlanPreviewSummary.RatesToClose>
        <twsba1:PrepareRatePlanPreviewSummary.SaleZoneRoutingProductsToAdd>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToAdd)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToAdd)">SaleZoneRoutingProductsToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareRatePlanPreviewSummary.SaleZoneRoutingProductsToAdd>
        <twsba1:PrepareRatePlanPreviewSummary.SaleZoneRoutingProductsToClose>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToClose)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToClose)">SaleZoneRoutingProductsToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareRatePlanPreviewSummary.SaleZoneRoutingProductsToClose>
        <twsba1:PrepareRatePlanPreviewSummary.SaleZoneServicesToAdd>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToAdd)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToAdd)">SaleZoneServicesToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareRatePlanPreviewSummary.SaleZoneServicesToAdd>
        <twsba1:PrepareRatePlanPreviewSummary.SaleZoneServicesToClose>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToClose)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToClose)">SaleZoneServicesToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareRatePlanPreviewSummary.SaleZoneServicesToClose>
      </twsba1:PrepareRatePlanPreviewSummary>
      <twsba1:PrepareRatePreviews Status="{x:Null}" sap2010:WorkflowViewState.IdRef="PrepareRatePreviews_2">
        <twsba1:PrepareRatePreviews.DataByZone>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:DataByZone)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:DataByZone)">DataByZone</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareRatePreviews.DataByZone>
        <twsba1:PrepareRatePreviews.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareRatePreviews.OwnerType>
        <twsba1:PrepareRatePreviews.RatePreviews>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:RatePreview)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:RatePreview)">RatePreviews</mca:CSharpReference>
          </OutArgument>
        </twsba1:PrepareRatePreviews.RatePreviews>
      </twsba1:PrepareRatePreviews>
      <twsba1:PrepareDefaultRoutingProductPreview Status="{x:Null}" sap2010:WorkflowViewState.IdRef="PrepareDefaultRoutingProductPreview_1">
        <twsba1:PrepareDefaultRoutingProductPreview.DefaultRoutingProductPreview>
          <OutArgument x:TypeArguments="twse:DefaultRoutingProductPreview">
            <mca:CSharpReference x:TypeArguments="twse:DefaultRoutingProductPreview">DefaultRoutingProductPreview</mca:CSharpReference>
          </OutArgument>
        </twsba1:PrepareDefaultRoutingProductPreview.DefaultRoutingProductPreview>
        <twsba1:PrepareDefaultRoutingProductPreview.DefaultRoutingProductToAdd>
          <InArgument x:TypeArguments="twse:DefaultRoutingProductToAdd">
            <mca:CSharpValue x:TypeArguments="twse:DefaultRoutingProductToAdd">DefaultRoutingProductToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareDefaultRoutingProductPreview.DefaultRoutingProductToAdd>
        <twsba1:PrepareDefaultRoutingProductPreview.DefaultRoutingProductToClose>
          <InArgument x:TypeArguments="twse:DefaultRoutingProductToClose">
            <mca:CSharpValue x:TypeArguments="twse:DefaultRoutingProductToClose">DefaultRoutingProductToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareDefaultRoutingProductPreview.DefaultRoutingProductToClose>
        <twsba1:PrepareDefaultRoutingProductPreview.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareDefaultRoutingProductPreview.MinimumDate>
        <twsba1:PrepareDefaultRoutingProductPreview.OwnerId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareDefaultRoutingProductPreview.OwnerId>
        <twsba1:PrepareDefaultRoutingProductPreview.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareDefaultRoutingProductPreview.OwnerType>
      </twsba1:PrepareDefaultRoutingProductPreview>
      <twsba1:PrepareSaleZoneRoutingProductPreviews Status="{x:Null}" sap2010:WorkflowViewState.IdRef="PrepareSaleZoneRoutingProductPreviews_1">
        <twsba1:PrepareSaleZoneRoutingProductPreviews.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareSaleZoneRoutingProductPreviews.MinimumDate>
        <twsba1:PrepareSaleZoneRoutingProductPreviews.OwnerId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareSaleZoneRoutingProductPreviews.OwnerId>
        <twsba1:PrepareSaleZoneRoutingProductPreviews.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareSaleZoneRoutingProductPreviews.OwnerType>
        <twsba1:PrepareSaleZoneRoutingProductPreviews.SaleZoneRoutingProductPreviews>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductPreview)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductPreview)">SaleZoneRoutingProductPreviews</mca:CSharpReference>
          </OutArgument>
        </twsba1:PrepareSaleZoneRoutingProductPreviews.SaleZoneRoutingProductPreviews>
        <twsba1:PrepareSaleZoneRoutingProductPreviews.SaleZoneRoutingProductsToAdd>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToAdd)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToAdd)">SaleZoneRoutingProductsToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareSaleZoneRoutingProductPreviews.SaleZoneRoutingProductsToAdd>
        <twsba1:PrepareSaleZoneRoutingProductPreviews.SaleZoneRoutingProductsToClose>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToClose)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductToClose)">SaleZoneRoutingProductsToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareSaleZoneRoutingProductPreviews.SaleZoneRoutingProductsToClose>
      </twsba1:PrepareSaleZoneRoutingProductPreviews>
      <twsba1:PrepareDefaultServicePreview Status="{x:Null}" sap2010:WorkflowViewState.IdRef="PrepareDefaultServicePreview_1">
        <twsba1:PrepareDefaultServicePreview.DefaultServicePreview>
          <OutArgument x:TypeArguments="twse:DefaultServicePreview">
            <mca:CSharpReference x:TypeArguments="twse:DefaultServicePreview">DefaultServicePreview</mca:CSharpReference>
          </OutArgument>
        </twsba1:PrepareDefaultServicePreview.DefaultServicePreview>
        <twsba1:PrepareDefaultServicePreview.DefaultServiceToAdd>
          <InArgument x:TypeArguments="twse:DefaultServiceToAdd">
            <mca:CSharpValue x:TypeArguments="twse:DefaultServiceToAdd">DefaultServiceToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareDefaultServicePreview.DefaultServiceToAdd>
        <twsba1:PrepareDefaultServicePreview.DefaultServiceToClose>
          <InArgument x:TypeArguments="twse:DefaultServiceToClose">
            <mca:CSharpValue x:TypeArguments="twse:DefaultServiceToClose">DefaultServiceToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareDefaultServicePreview.DefaultServiceToClose>
        <twsba1:PrepareDefaultServicePreview.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareDefaultServicePreview.MinimumDate>
        <twsba1:PrepareDefaultServicePreview.OwnerId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareDefaultServicePreview.OwnerId>
        <twsba1:PrepareDefaultServicePreview.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareDefaultServicePreview.OwnerType>
      </twsba1:PrepareDefaultServicePreview>
      <twsba1:PrepareSaleZoneServicePreviews Status="{x:Null}" sap2010:WorkflowViewState.IdRef="PrepareSaleZoneServicePreviews_1">
        <twsba1:PrepareSaleZoneServicePreviews.MinimumDate>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareSaleZoneServicePreviews.MinimumDate>
        <twsba1:PrepareSaleZoneServicePreviews.OwnerId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareSaleZoneServicePreviews.OwnerId>
        <twsba1:PrepareSaleZoneServicePreviews.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareSaleZoneServicePreviews.OwnerType>
        <twsba1:PrepareSaleZoneServicePreviews.SaleZoneServicePreviews>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneServicePreview)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:SaleZoneServicePreview)">SaleZoneServicePreviews</mca:CSharpReference>
          </OutArgument>
        </twsba1:PrepareSaleZoneServicePreviews.SaleZoneServicePreviews>
        <twsba1:PrepareSaleZoneServicePreviews.SaleZoneServicesToAdd>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToAdd)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToAdd)">SaleZoneServicesToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareSaleZoneServicePreviews.SaleZoneServicesToAdd>
        <twsba1:PrepareSaleZoneServicePreviews.SaleZoneServicesToClose>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToClose)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneServiceToClose)">SaleZoneServicesToClose</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareSaleZoneServicePreviews.SaleZoneServicesToClose>
      </twsba1:PrepareSaleZoneServicePreviews>
      <twsba1:PrepareCustomerCountryPreviews Status="{x:Null}" sap2010:WorkflowViewState.IdRef="PrepareCustomerCountryPreviews_1">
        <twsba1:PrepareCustomerCountryPreviews.ChangedCustomerCountryPreviews>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:ChangedCustomerCountryPreview)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:ChangedCustomerCountryPreview)">ChangedCustomerCountryPreviews</mca:CSharpReference>
          </OutArgument>
        </twsba1:PrepareCustomerCountryPreviews.ChangedCustomerCountryPreviews>
        <twsba1:PrepareCustomerCountryPreviews.CustomerCountriesToAdd>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToAdd)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToAdd)">CustomerCountriesToAdd</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareCustomerCountryPreviews.CustomerCountriesToAdd>
        <twsba1:PrepareCustomerCountryPreviews.CustomerCountriesToChange>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">CustomerCountriesToChange</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareCustomerCountryPreviews.CustomerCountriesToChange>
        <twsba1:PrepareCustomerCountryPreviews.NewCustomerCountryPreviews>
          <OutArgument x:TypeArguments="scg:IEnumerable(twse:NewCustomerCountryPreview)">
            <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twse:NewCustomerCountryPreview)">NewCustomerCountryPreviews</mca:CSharpReference>
          </OutArgument>
        </twsba1:PrepareCustomerCountryPreviews.NewCustomerCountryPreviews>
        <twsba1:PrepareCustomerCountryPreviews.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:PrepareCustomerCountryPreviews.OwnerType>
      </twsba1:PrepareCustomerCountryPreviews>
    </Parallel>
    <vbw:WriteTrackingMessage Severity="{x:Null}" sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_6" Message="Preparing preview page..." />
    <Parallel DisplayName="Parallel_ApplyToDB" sap2010:WorkflowViewState.IdRef="Parallel_2">
      <twsba1:ApplyNewRatesToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyNewRatesToDB_1">
        <twsba1:ApplyNewRatesToDB.NewRates>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:NewRate)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:NewRate)">NewRates</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyNewRatesToDB.NewRates>
      </twsba1:ApplyNewRatesToDB>
      <twsba1:ApplyChangedRatesToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyChangedRatesToDB_1">
        <twsba1:ApplyChangedRatesToDB.ChangedRates>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ChangedRate)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ChangedRate)">ChangedRates</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyChangedRatesToDB.ChangedRates>
      </twsba1:ApplyChangedRatesToDB>
      <twsba1:ApplyNewDefaultRoutingProductToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyNewDefaultRoutingProductToDB_1">
        <twsba1:ApplyNewDefaultRoutingProductToDB.NewDefaultRoutingProduct>
          <InArgument x:TypeArguments="twse:NewDefaultRoutingProduct">
            <mca:CSharpValue x:TypeArguments="twse:NewDefaultRoutingProduct">NewDefaultRoutingProduct</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyNewDefaultRoutingProductToDB.NewDefaultRoutingProduct>
      </twsba1:ApplyNewDefaultRoutingProductToDB>
      <twsba1:ApplyChangedDefaultRoutingProductsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyChangedDefaultRoutingProductsToDB_1">
        <twsba1:ApplyChangedDefaultRoutingProductsToDB.ChangedDefaultRoutingProducts>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ChangedDefaultRoutingProduct)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ChangedDefaultRoutingProduct)">ChangedDefaultRoutingProducts</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyChangedDefaultRoutingProductsToDB.ChangedDefaultRoutingProducts>
      </twsba1:ApplyChangedDefaultRoutingProductsToDB>
      <twsba1:ApplyDefaultRoutingProductPreviewToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyDefaultRoutingProductPreviewToDB_1">
        <twsba1:ApplyDefaultRoutingProductPreviewToDB.DefaultRoutingProductPreview>
          <InArgument x:TypeArguments="twse:DefaultRoutingProductPreview">
            <mca:CSharpValue x:TypeArguments="twse:DefaultRoutingProductPreview">DefaultRoutingProductPreview</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyDefaultRoutingProductPreviewToDB.DefaultRoutingProductPreview>
      </twsba1:ApplyDefaultRoutingProductPreviewToDB>
      <twsba1:ApplyNewSaleZoneRoutingProductsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyNewSaleZoneRoutingProductsToDB_1">
        <twsba1:ApplyNewSaleZoneRoutingProductsToDB.NewSaleZoneRoutingProducts>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneRoutingProduct)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneRoutingProduct)">NewSaleZoneRoutingProducts</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyNewSaleZoneRoutingProductsToDB.NewSaleZoneRoutingProducts>
      </twsba1:ApplyNewSaleZoneRoutingProductsToDB>
      <twsba1:ApplyChangedSaleZoneRoutingProductsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyChangedSaleZoneRoutingProductsToDB_1">
        <twsba1:ApplyChangedSaleZoneRoutingProductsToDB.ChangedSaleZoneRoutingProducts>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ChangedSaleZoneRoutingProduct)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ChangedSaleZoneRoutingProduct)">ChangedSaleZoneRoutingProducts</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyChangedSaleZoneRoutingProductsToDB.ChangedSaleZoneRoutingProducts>
      </twsba1:ApplyChangedSaleZoneRoutingProductsToDB>
      <twsba1:ApplyRatePreviewsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyRatePreviewsToDB_1">
        <twsba1:ApplyRatePreviewsToDB.RatePreviews>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:RatePreview)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:RatePreview)">RatePreviews</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyRatePreviewsToDB.RatePreviews>
      </twsba1:ApplyRatePreviewsToDB>
      <twsba1:ApplySaleZoneRoutingProductPreviewsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplySaleZoneRoutingProductPreviewsToDB_1">
        <twsba1:ApplySaleZoneRoutingProductPreviewsToDB.SaleZoneRoutingProductPreviews>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductPreview)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneRoutingProductPreview)">SaleZoneRoutingProductPreviews</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplySaleZoneRoutingProductPreviewsToDB.SaleZoneRoutingProductPreviews>
      </twsba1:ApplySaleZoneRoutingProductPreviewsToDB>
      <twsba1:ApplyRatePlanPreviewSummaryToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyRatePlanPreviewSummaryToDB_1">
        <twsba1:ApplyRatePlanPreviewSummaryToDB.RatePlanPreviewSummary>
          <InArgument x:TypeArguments="twse:RatePlanPreviewSummary">
            <mca:CSharpValue x:TypeArguments="twse:RatePlanPreviewSummary">RatePlanPreviewSummary</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyRatePlanPreviewSummaryToDB.RatePlanPreviewSummary>
      </twsba1:ApplyRatePlanPreviewSummaryToDB>
      <twsba1:ApplyNewDefaultServiceToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyNewDefaultServiceToDB_1">
        <twsba1:ApplyNewDefaultServiceToDB.NewDefaultService>
          <InArgument x:TypeArguments="twse:NewDefaultService">
            <mca:CSharpValue x:TypeArguments="twse:NewDefaultService">NewDefaultService</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyNewDefaultServiceToDB.NewDefaultService>
      </twsba1:ApplyNewDefaultServiceToDB>
      <twsba1:ApplyChangedDefaultServicesToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyChangedDefaultServicesToDB_1">
        <twsba1:ApplyChangedDefaultServicesToDB.ChangedDefaultServices>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ChangedDefaultService)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ChangedDefaultService)">ChangedDefaultServices</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyChangedDefaultServicesToDB.ChangedDefaultServices>
      </twsba1:ApplyChangedDefaultServicesToDB>
      <twsba1:ApplyDefaultServicePreviewToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyDefaultServicePreviewToDB_1">
        <twsba1:ApplyDefaultServicePreviewToDB.DefaultServicePreview>
          <InArgument x:TypeArguments="twse:DefaultServicePreview">
            <mca:CSharpValue x:TypeArguments="twse:DefaultServicePreview">DefaultServicePreview</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyDefaultServicePreviewToDB.DefaultServicePreview>
      </twsba1:ApplyDefaultServicePreviewToDB>
      <twsba1:ApplyNewSaleZoneServicesToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyNewSaleZoneServicesToDB_1">
        <twsba1:ApplyNewSaleZoneServicesToDB.NewSaleZoneServices>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneService)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:NewSaleZoneService)">NewSaleZoneServices</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyNewSaleZoneServicesToDB.NewSaleZoneServices>
      </twsba1:ApplyNewSaleZoneServicesToDB>
      <twsba1:ApplyChangedSaleZoneServicesToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyChangedSaleZoneServicesToDB_1">
        <twsba1:ApplyChangedSaleZoneServicesToDB.ChangedSaleZoneServices>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ChangedSaleZoneService)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ChangedSaleZoneService)">ChangedSaleZoneServices</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyChangedSaleZoneServicesToDB.ChangedSaleZoneServices>
      </twsba1:ApplyChangedSaleZoneServicesToDB>
      <twsba1:ApplySaleZoneServicePreviewsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplySaleZoneServicePreviewsToDB_1">
        <twsba1:ApplySaleZoneServicePreviewsToDB.SaleZoneServicePreviews>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:SaleZoneServicePreview)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:SaleZoneServicePreview)">SaleZoneServicePreviews</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplySaleZoneServicePreviewsToDB.SaleZoneServicePreviews>
      </twsba1:ApplySaleZoneServicePreviewsToDB>
      <twsba1:ApplyNewCustomerCountriesToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyNewCustomerCountriesToDB_1">
        <twsba1:ApplyNewCustomerCountriesToDB.NewCustomerCountries>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:NewCustomerCountry)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:NewCustomerCountry)">NewCustomerCountries</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyNewCustomerCountriesToDB.NewCustomerCountries>
        <twsba1:ApplyNewCustomerCountriesToDB.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyNewCustomerCountriesToDB.OwnerType>
      </twsba1:ApplyNewCustomerCountriesToDB>
      <twsba1:ApplyChangedCustomerCountriesToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyChangedCustomerCountriesToDB_1">
        <twsba1:ApplyChangedCustomerCountriesToDB.ChangedCustomerCountries>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ChangedCustomerCountry)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ChangedCustomerCountry)">ChangedCustomerCountries</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyChangedCustomerCountriesToDB.ChangedCustomerCountries>
        <twsba1:ApplyChangedCustomerCountriesToDB.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyChangedCustomerCountriesToDB.OwnerType>
      </twsba1:ApplyChangedCustomerCountriesToDB>
      <twsba1:ApplyChangedCustomerCountryPreviewsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyChangedCustomerCountryPreviewsToDB_1">
        <twsba1:ApplyChangedCustomerCountryPreviewsToDB.ChangedCustomerCountryPreviews>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:ChangedCustomerCountryPreview)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:ChangedCustomerCountryPreview)">ChangedCustomerCountryPreviews</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyChangedCustomerCountryPreviewsToDB.ChangedCustomerCountryPreviews>
        <twsba1:ApplyChangedCustomerCountryPreviewsToDB.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyChangedCustomerCountryPreviewsToDB.OwnerType>
      </twsba1:ApplyChangedCustomerCountryPreviewsToDB>
      <twsba1:ApplyNewCustomerCountryPreviewsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyNewCustomerCountryPreviewsToDB_1">
        <twsba1:ApplyNewCustomerCountryPreviewsToDB.NewCustomerCountryPreviews>
          <InArgument x:TypeArguments="scg:IEnumerable(twse:NewCustomerCountryPreview)">
            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:NewCustomerCountryPreview)">NewCustomerCountryPreviews</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyNewCustomerCountryPreviewsToDB.NewCustomerCountryPreviews>
        <twsba1:ApplyNewCustomerCountryPreviewsToDB.OwnerType>
          <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
            <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
          </InArgument>
        </twsba1:ApplyNewCustomerCountryPreviewsToDB.OwnerType>
      </twsba1:ApplyNewCustomerCountryPreviewsToDB>
    </Parallel>
    <twsba1:ReadRatePlanContext sap2010:WorkflowViewState.IdRef="ReadRatePlanContext_1">
      <twsba1:ReadRatePlanContext.ProcessHasChanges>
        <OutArgument x:TypeArguments="x:Boolean">
          <mca:CSharpReference x:TypeArguments="x:Boolean">ProcessHasChanges</mca:CSharpReference>
        </OutArgument>
      </twsba1:ReadRatePlanContext.ProcessHasChanges>
    </twsba1:ReadRatePlanContext>
    <If sap2010:WorkflowViewState.IdRef="If_8">
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <mca:CSharpValue x:TypeArguments="x:Boolean">ProcessHasChanges</mca:CSharpValue>
        </InArgument>
      </If.Condition>
      <If.Then>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_9">
          <vbw:AssignTask x:TypeArguments="twsbat:PreviewTaskExecutionInformation" ExecutedTask="{x:Null}" sap2010:WorkflowViewState.IdRef="AssignTask`1_1" TaskTitle="Rate Plan Preview">
            <vbw:AssignTask.AssignedTo>
              <InArgument x:TypeArguments="vbe:BPTaskAssignee">
                <mca:CSharpValue x:TypeArguments="vbe:BPTaskAssignee">new Vanrise.BusinessProcess.MainExtensions.InitiatorBPTaskAssignee()</mca:CSharpValue>
              </InArgument>
            </vbw:AssignTask.AssignedTo>
            <vbw:AssignTask.TaskData>
              <InArgument x:TypeArguments="vbe:BPTaskData">
                <mca:CSharpValue x:TypeArguments="vbe:BPTaskData" xml:space="preserve">new TOne.WhS.Sales.BP.Arguments.Tasks.PreviewTaskData()
{
	OwnerType = Input.OwnerType
}</mca:CSharpValue>
              </InArgument>
            </vbw:AssignTask.TaskData>
            <vbw:AssignTask.TaskExecutionInformation>
              <OutArgument x:TypeArguments="twsbat:PreviewTaskExecutionInformation">
                <mca:CSharpReference x:TypeArguments="twsbat:PreviewTaskExecutionInformation">ContinueExecution</mca:CSharpReference>
              </OutArgument>
            </vbw:AssignTask.TaskExecutionInformation>
          </vbw:AssignTask>
          <If sap2010:WorkflowViewState.IdRef="If_1">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <mca:CSharpValue x:TypeArguments="x:Boolean">ContinueExecution.Decision</mca:CSharpValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_3">
                <Sequence.Variables>
                  <Variable x:TypeArguments="scg:IEnumerable(twbe:CustomerPriceListChange)" Name="CustomerChanges" />
                </Sequence.Variables>
                <vbw:WriteTrackingMessage Severity="{x:Null}" sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_7" Message="Syncing with existing entities..." />
                <twsba1:ReserveSalePriceListId sap2010:WorkflowViewState.IdRef="ReserveSalePriceListId_1">
                  <twsba1:ReserveSalePriceListId.ChangedDefaultServicesCount>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">ChangedDefaultServices.Count()</mca:CSharpValue>
                    </InArgument>
                  </twsba1:ReserveSalePriceListId.ChangedDefaultServicesCount>
                  <twsba1:ReserveSalePriceListId.ChangedRatesCount>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">ChangedRates.Count()</mca:CSharpValue>
                    </InArgument>
                  </twsba1:ReserveSalePriceListId.ChangedRatesCount>
                  <twsba1:ReserveSalePriceListId.ChangedSaleZoneServicesCount>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">ChangedSaleZoneServices.Count()</mca:CSharpValue>
                    </InArgument>
                  </twsba1:ReserveSalePriceListId.ChangedSaleZoneServicesCount>
                  <twsba1:ReserveSalePriceListId.DoesNewDefaultServiceExist>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">NewDefaultService != null ? true : false</mca:CSharpValue>
                    </InArgument>
                  </twsba1:ReserveSalePriceListId.DoesNewDefaultServiceExist>
                  <twsba1:ReserveSalePriceListId.NewRatesCount>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">NewRates.Count()</mca:CSharpValue>
                    </InArgument>
                  </twsba1:ReserveSalePriceListId.NewRatesCount>
                  <twsba1:ReserveSalePriceListId.NewSaleZoneServicesCount>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">NewSaleZoneServices.Count()</mca:CSharpValue>
                    </InArgument>
                  </twsba1:ReserveSalePriceListId.NewSaleZoneServicesCount>
                  <twsba1:ReserveSalePriceListId.SalePriceListId>
                    <OutArgument x:TypeArguments="s:Nullable(x:Int32)">
                      <mca:CSharpReference x:TypeArguments="s:Nullable(x:Int32)">ReservedSalePriceListId</mca:CSharpReference>
                    </OutArgument>
                  </twsba1:ReserveSalePriceListId.SalePriceListId>
                </twsba1:ReserveSalePriceListId>
                <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_9" Message="Backup Started">
                  <vbw:WriteTrackingMessage.Severity>
                    <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                      <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
                    </InArgument>
                  </vbw:WriteTrackingMessage.Severity>
                </vbw:WriteTrackingMessage>
                <twsba1:BackupData sap2010:WorkflowViewState.IdRef="BackupData_1">
                  <twsba1:BackupData.OwnerId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:BackupData.OwnerId>
                  <twsba1:BackupData.OwnerType>
                    <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
                      <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
                    </InArgument>
                  </twsba1:BackupData.OwnerType>
                  <twsba1:BackupData.UserId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.UserId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:BackupData.UserId>
                </twsba1:BackupData>
                <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_10" Message="Backup Ended">
                  <vbw:WriteTrackingMessage.Severity>
                    <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                      <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
                    </InArgument>
                  </vbw:WriteTrackingMessage.Severity>
                </vbw:WriteTrackingMessage>
                <twsba1:StructureSalePriceListZoneChange sap2010:WorkflowViewState.IdRef="StructureSalePriceListZoneChange_1">
                  <twsba1:StructureSalePriceListZoneChange.CustomerChange>
                    <OutArgument x:TypeArguments="scg:IEnumerable(twbe:CustomerPriceListChange)">
                      <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:CustomerPriceListChange)">CustomerChanges</mca:CSharpReference>
                    </OutArgument>
                  </twsba1:StructureSalePriceListZoneChange.CustomerChange>
                  <twsba1:StructureSalePriceListZoneChange.CustomerCountriesToAdd>
                    <InArgument x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToAdd)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToAdd)">CustomerCountriesToAdd</mca:CSharpValue>
                    </InArgument>
                  </twsba1:StructureSalePriceListZoneChange.CustomerCountriesToAdd>
                  <twsba1:StructureSalePriceListZoneChange.CustomerCountriesToChange>
                    <InArgument x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">CustomerCountriesToChange</mca:CSharpValue>
                    </InArgument>
                  </twsba1:StructureSalePriceListZoneChange.CustomerCountriesToChange>
                  <twsba1:StructureSalePriceListZoneChange.DataByZone>
                    <InArgument x:TypeArguments="scg:IEnumerable(twse:DataByZone)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:DataByZone)">DataByZone</mca:CSharpValue>
                    </InArgument>
                  </twsba1:StructureSalePriceListZoneChange.DataByZone>
                  <twsba1:StructureSalePriceListZoneChange.DefaultRoutingProductToAdd>
                    <InArgument x:TypeArguments="twse:DefaultRoutingProductToAdd">
                      <mca:CSharpValue x:TypeArguments="twse:DefaultRoutingProductToAdd">DefaultRoutingProductToAdd</mca:CSharpValue>
                    </InArgument>
                  </twsba1:StructureSalePriceListZoneChange.DefaultRoutingProductToAdd>
                  <twsba1:StructureSalePriceListZoneChange.DefaultRoutingProductToClose>
                    <InArgument x:TypeArguments="twse:DefaultRoutingProductToClose">
                      <mca:CSharpValue x:TypeArguments="twse:DefaultRoutingProductToClose">DefaultRoutingProductToClose</mca:CSharpValue>
                    </InArgument>
                  </twsba1:StructureSalePriceListZoneChange.DefaultRoutingProductToClose>
                  <twsba1:StructureSalePriceListZoneChange.Draft>
                    <InArgument x:TypeArguments="twse:Changes">
                      <mca:CSharpValue x:TypeArguments="twse:Changes">Changes</mca:CSharpValue>
                    </InArgument>
                  </twsba1:StructureSalePriceListZoneChange.Draft>
                  <twsba1:StructureSalePriceListZoneChange.EffectiveOn>
                    <InArgument x:TypeArguments="s:DateTime">
                      <mca:CSharpValue x:TypeArguments="s:DateTime">Input.EffectiveDate</mca:CSharpValue>
                    </InArgument>
                  </twsba1:StructureSalePriceListZoneChange.EffectiveOn>
                  <twsba1:StructureSalePriceListZoneChange.MinimumDateTime>
                    <InArgument x:TypeArguments="s:DateTime">
                      <mca:CSharpValue x:TypeArguments="s:DateTime">MinimumDate</mca:CSharpValue>
                    </InArgument>
                  </twsba1:StructureSalePriceListZoneChange.MinimumDateTime>
                  <twsba1:StructureSalePriceListZoneChange.OwnerId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:StructureSalePriceListZoneChange.OwnerId>
                  <twsba1:StructureSalePriceListZoneChange.OwnerType>
                    <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
                      <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
                    </InArgument>
                  </twsba1:StructureSalePriceListZoneChange.OwnerType>
                  <twsba1:StructureSalePriceListZoneChange.SaleRates>
                    <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleRate)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleRate)">ExistingSaleRates</mca:CSharpValue>
                    </InArgument>
                  </twsba1:StructureSalePriceListZoneChange.SaleRates>
                  <twsba1:StructureSalePriceListZoneChange.SaleZones>
                    <InArgument x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SaleZone)">ExistingSaleZones</mca:CSharpValue>
                    </InArgument>
                  </twsba1:StructureSalePriceListZoneChange.SaleZones>
                </twsba1:StructureSalePriceListZoneChange>
                <twsba1:SavePricelistFiles sap2010:WorkflowViewState.IdRef="SavePricelistFiles_3">
                  <twsba1:SavePricelistFiles.CurrencyId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.CurrencyId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SavePricelistFiles.CurrencyId>
                  <twsba1:SavePricelistFiles.CustomerChanges>
                    <InArgument x:TypeArguments="scg:IEnumerable(twbe:CustomerPriceListChange)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:CustomerPriceListChange)">CustomerChanges</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SavePricelistFiles.CustomerChanges>
                  <twsba1:SavePricelistFiles.CustomerCountriesToChange>
                    <InArgument x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twse:CustomerCountryToChange)">CustomerCountriesToChange</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SavePricelistFiles.CustomerCountriesToChange>
                  <twsba1:SavePricelistFiles.CustomerIdsWithPriceList>
                    <OutArgument x:TypeArguments="scg:IEnumerable(x:Int32)">
                      <mca:CSharpReference x:TypeArguments="scg:IEnumerable(x:Int32)">CustomerIdsWithPriceList</mca:CSharpReference>
                    </OutArgument>
                  </twsba1:SavePricelistFiles.CustomerIdsWithPriceList>
                  <twsba1:SavePricelistFiles.OwnerId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SavePricelistFiles.OwnerId>
                  <twsba1:SavePricelistFiles.OwnerType>
                    <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
                      <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SavePricelistFiles.OwnerType>
                  <twsba1:SavePricelistFiles.RerservedSalePriceListId>
                    <InArgument x:TypeArguments="s:Nullable(x:Int32)">
                      <mca:CSharpValue x:TypeArguments="s:Nullable(x:Int32)">ReservedSalePriceListId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SavePricelistFiles.RerservedSalePriceListId>
                  <twsba1:SavePricelistFiles.SalePLZoneChanges>
                    <InArgument x:TypeArguments="scg:IEnumerable(twbe:SalePLZoneChange)">
                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(twbe:SalePLZoneChange)">SalePLZoneChanges</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SavePricelistFiles.SalePLZoneChanges>
                </twsba1:SavePricelistFiles>
                <twsba1:SyncImportedDataWithDB sap2010:WorkflowViewState.IdRef="SyncImportedDataWithDB_1">
                  <twsba1:SyncImportedDataWithDB.CurrencyId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.CurrencyId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SyncImportedDataWithDB.CurrencyId>
                  <twsba1:SyncImportedDataWithDB.EffectiveOn>
                    <InArgument x:TypeArguments="s:DateTime">
                      <mca:CSharpValue x:TypeArguments="s:DateTime">Input.EffectiveDate</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SyncImportedDataWithDB.EffectiveOn>
                  <twsba1:SyncImportedDataWithDB.OwnerId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SyncImportedDataWithDB.OwnerId>
                  <twsba1:SyncImportedDataWithDB.OwnerType>
                    <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
                      <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SyncImportedDataWithDB.OwnerType>
                  <twsba1:SyncImportedDataWithDB.RerservedSalePriceListId>
                    <InArgument x:TypeArguments="s:Nullable(x:Int32)">
                      <mca:CSharpValue x:TypeArguments="s:Nullable(x:Int32)">ReservedSalePriceListId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:SyncImportedDataWithDB.RerservedSalePriceListId>
                </twsba1:SyncImportedDataWithDB>
                <twsba1:UpdateState sap2010:WorkflowViewState.IdRef="UpdateState_1">
                  <twsba1:UpdateState.OwnerId>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">Input.OwnerId</mca:CSharpValue>
                    </InArgument>
                  </twsba1:UpdateState.OwnerId>
                  <twsba1:UpdateState.OwnerType>
                    <InArgument x:TypeArguments="twbe:SalePriceListOwnerType">
                      <mca:CSharpValue x:TypeArguments="twbe:SalePriceListOwnerType">Input.OwnerType</mca:CSharpValue>
                    </InArgument>
                  </twsba1:UpdateState.OwnerType>
                </twsba1:UpdateState>
                <Assign sap2010:WorkflowViewState.IdRef="Assign_3">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpReference x:TypeArguments="x:Boolean">ShouldNotifyCustomers</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                  </Assign.Value>
                </Assign>
                <If sap2010:WorkflowViewState.IdRef="If_2">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">Input.OwnerType == BusinessEntity.Entities.SalePriceListOwnerType.SellingProduct</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <Sequence sap2010:WorkflowViewState.IdRef="Sequence_4">
                      <If sap2010:WorkflowViewState.IdRef="If_6">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">CustomerIdsWithPriceList != null &amp;&amp; CustomerIdsWithPriceList.Count() &gt; 0</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_7">
                            <twsba1:PrepareCustomersWithPriceList sap2010:WorkflowViewState.IdRef="PrepareCustomersWithPriceList_1">
                              <twsba1:PrepareCustomersWithPriceList.CustomerIdsWithPriceList>
                                <InArgument x:TypeArguments="scg:IEnumerable(x:Int32)">
                                  <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:Int32)">CustomerIdsWithPriceList</mca:CSharpValue>
                                </InArgument>
                              </twsba1:PrepareCustomersWithPriceList.CustomerIdsWithPriceList>
                              <twsba1:PrepareCustomersWithPriceList.CustomersWithPriceList>
                                <OutArgument x:TypeArguments="scg:IEnumerable(twbe:CarrierAccountInfo)">
                                  <mca:CSharpReference x:TypeArguments="scg:IEnumerable(twbe:CarrierAccountInfo)">CustomersWithPriceList</mca:CSharpReference>
                                </OutArgument>
                              </twsba1:PrepareCustomersWithPriceList.CustomersWithPriceList>
                            </twsba1:PrepareCustomersWithPriceList>
                            <vbw:AssignTask x:TypeArguments="twsbat:EmailTaskExecutionInformation" ExecutedTask="{x:Null}" sap2010:WorkflowViewState.IdRef="AssignTask`1_2" TaskTitle="Notify Customers">
                              <vbw:AssignTask.AssignedTo>
                                <InArgument x:TypeArguments="vbe:BPTaskAssignee">
                                  <mca:CSharpValue x:TypeArguments="vbe:BPTaskAssignee">new Vanrise.BusinessProcess.MainExtensions.InitiatorBPTaskAssignee()</mca:CSharpValue>
                                </InArgument>
                              </vbw:AssignTask.AssignedTo>
                              <vbw:AssignTask.TaskData>
                                <InArgument x:TypeArguments="vbe:BPTaskData">
                                  <mca:CSharpValue x:TypeArguments="vbe:BPTaskData" xml:space="preserve">new EmailTaskData() {  Customers = CustomersWithPriceList }</mca:CSharpValue>
                                </InArgument>
                              </vbw:AssignTask.TaskData>
                              <vbw:AssignTask.TaskExecutionInformation>
                                <OutArgument x:TypeArguments="twsbat:EmailTaskExecutionInformation">
                                  <mca:CSharpReference x:TypeArguments="twsbat:EmailTaskExecutionInformation">EmailTaskExecutionInformation</mca:CSharpReference>
                                </OutArgument>
                              </vbw:AssignTask.TaskExecutionInformation>
                            </vbw:AssignTask>
                            <If sap2010:WorkflowViewState.IdRef="If_3">
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">EmailTaskExecutionInformation.Decision</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <Assign sap2010:WorkflowViewState.IdRef="Assign_1">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="scg:IEnumerable(x:Int32)">
                                      <mca:CSharpReference x:TypeArguments="scg:IEnumerable(x:Int32)">CustomerIdsToEmail</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="scg:IEnumerable(x:Int32)">
                                      <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:Int32)">EmailTaskExecutionInformation.CustomerIds</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                              <If.Else>
                                <Assign sap2010:WorkflowViewState.IdRef="Assign_4">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Boolean">
                                      <mca:CSharpReference x:TypeArguments="x:Boolean">ShouldNotifyCustomers</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Else>
                            </If>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <Assign sap2010:WorkflowViewState.IdRef="Assign_6">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpReference x:TypeArguments="x:Boolean">ShouldNotifyCustomers</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                            </Assign.Value>
                          </Assign>
                        </If.Else>
                      </If>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <Sequence sap2010:WorkflowViewState.IdRef="Sequence_6">
                      <If sap2010:WorkflowViewState.IdRef="If_7">
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">CustomerIdsWithPriceList != null &amp;&amp; CustomerIdsWithPriceList.Count() &gt; 0</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_8">
                            <vbw:AssignTask x:TypeArguments="twsbat:EmailCustomerTaskExecutionInformation" ExecutedTask="{x:Null}" sap2010:WorkflowViewState.IdRef="AssignTask`1_3" TaskTitle="Notify Customer">
                              <vbw:AssignTask.AssignedTo>
                                <InArgument x:TypeArguments="vbe:BPTaskAssignee">
                                  <mca:CSharpValue x:TypeArguments="vbe:BPTaskAssignee">new Vanrise.BusinessProcess.MainExtensions.InitiatorBPTaskAssignee()</mca:CSharpValue>
                                </InArgument>
                              </vbw:AssignTask.AssignedTo>
                              <vbw:AssignTask.TaskData>
                                <InArgument x:TypeArguments="vbe:BPTaskData">
                                  <mca:CSharpValue x:TypeArguments="vbe:BPTaskData">new EmailCustomerTaskData() { CustomerName = new TOne.WhS.BusinessEntity.Business.CarrierAccountManager().GetCarrierAccountName(Input.OwnerId) }</mca:CSharpValue>
                                </InArgument>
                              </vbw:AssignTask.TaskData>
                              <vbw:AssignTask.TaskExecutionInformation>
                                <OutArgument x:TypeArguments="twsbat:EmailCustomerTaskExecutionInformation">
                                  <mca:CSharpReference x:TypeArguments="twsbat:EmailCustomerTaskExecutionInformation">EmailCustomerTaskExecutionInformation</mca:CSharpReference>
                                </OutArgument>
                              </vbw:AssignTask.TaskExecutionInformation>
                            </vbw:AssignTask>
                            <If sap2010:WorkflowViewState.IdRef="If_5">
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">EmailCustomerTaskExecutionInformation.Decision</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <Assign sap2010:WorkflowViewState.IdRef="Assign_2">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="scg:IEnumerable(x:Int32)">
                                      <mca:CSharpReference x:TypeArguments="scg:IEnumerable(x:Int32)">CustomerIdsToEmail</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="scg:List(x:Int32)">
                                      <mca:CSharpValue x:TypeArguments="scg:List(x:Int32)">new List&lt;int&gt;() { Input.OwnerId }</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                              <If.Else>
                                <Assign sap2010:WorkflowViewState.IdRef="Assign_5">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Boolean">
                                      <mca:CSharpReference x:TypeArguments="x:Boolean">ShouldNotifyCustomers</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Else>
                            </If>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <Assign sap2010:WorkflowViewState.IdRef="Assign_7">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpReference x:TypeArguments="x:Boolean">ShouldNotifyCustomers</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                            </Assign.Value>
                          </Assign>
                        </If.Else>
                      </If>
                    </Sequence>
                  </If.Else>
                </If>
                <If sap2010:WorkflowViewState.IdRef="If_4">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">ShouldNotifyCustomers</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <Sequence sap2010:WorkflowViewState.IdRef="Sequence_5">
                      <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_11" Message="Sending pricelists">
                        <vbw:WriteTrackingMessage.Severity>
                          <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                            <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
                          </InArgument>
                        </vbw:WriteTrackingMessage.Severity>
                      </vbw:WriteTrackingMessage>
                      <twsba1:LogEmailedCustomers sap2010:WorkflowViewState.IdRef="LogEmailedCustomers_1">
                        <twsba1:LogEmailedCustomers.CustomerIdsToEmail>
                          <InArgument x:TypeArguments="scg:IEnumerable(x:Int32)">
                            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:Int32)">CustomerIdsToEmail</mca:CSharpValue>
                          </InArgument>
                        </twsba1:LogEmailedCustomers.CustomerIdsToEmail>
                      </twsba1:LogEmailedCustomers>
                      <twsba1:NotifyCustomers sap2010:WorkflowViewState.IdRef="NotifyCustomers_1">
                        <twsba1:NotifyCustomers.CustomerIds>
                          <InArgument x:TypeArguments="scg:IEnumerable(x:Int32)">
                            <mca:CSharpValue x:TypeArguments="scg:IEnumerable(x:Int32)">CustomerIdsToEmail</mca:CSharpValue>
                          </InArgument>
                        </twsba1:NotifyCustomers.CustomerIds>
                      </twsba1:NotifyCustomers>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <vbw:WriteTrackingMessage Severity="{x:Null}" sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_12">
                      <vbw:WriteTrackingMessage.Message>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">(Input.OwnerType == BusinessEntity.Entities.SalePriceListOwnerType.SellingProduct) ? "Process skipped emailing Sale Pricelists to Customers" : "Process skipped emailing Sale Pricelist to Customer"</mca:CSharpValue>
                        </InArgument>
                      </vbw:WriteTrackingMessage.Message>
                    </vbw:WriteTrackingMessage>
                  </If.Else>
                </If>
              </Sequence>
            </If.Then>
            <If.Else>
              <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_1" Message="The process has been cancelled">
                <vbw:WriteTrackingMessage.Severity>
                  <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
                    <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
                  </InArgument>
                </vbw:WriteTrackingMessage.Severity>
              </vbw:WriteTrackingMessage>
            </If.Else>
          </If>
        </Sequence>
      </If.Then>
      <If.Else>
        <vbw:WriteTrackingMessage sap2010:WorkflowViewState.IdRef="WriteTrackingMessage_13" Message="The process did not detect any changes">
          <vbw:WriteTrackingMessage.Severity>
            <InArgument x:TypeArguments="s:Nullable(ve:LogEntryType)">
              <mca:CSharpValue x:TypeArguments="s:Nullable(ve:LogEntryType)">Vanrise.Entities.LogEntryType.Information</mca:CSharpValue>
            </InArgument>
          </vbw:WriteTrackingMessage.Severity>
        </vbw:WriteTrackingMessage>
      </If.Else>
    </If>
    <sads:DebugSymbol.Symbol>dzlDOlxURlNcVE9uZVYyXENvZGVcVE9uZVYyXFRPbmUuV2hTLlNhbGVzLkJQXFJhdGVQbGFuLnhhbWyhA0MDng4OAgEBXgtejAECAQKKAQWaASEEAdSRAZsBBasBGQQBjZABrAEFrAGeAQQBi5ABrQEFrQGZAQQBiZABrgEFiQIdBAHkhgGKAgXaAhADAYN/2wIF4QI+AwHAfuICBYAEEAMB5G+BBAXzBBADAfRl9AQF+gQvAwGxZfsEBYYFQQMBrGSHBQWHBY4BAwGqZIgFBawFJwMB22CtBQXOBhADAZlRzwYF2gYeAwGUUNsGBeYGGAMBj0/nBgXtBhgDActO7gYF7gaUAQMByU7vBgX6CBADAdw0+wgF+wiSAQMB2jT8CAWdChADAZUongoFpAoiAwHSJ6UKBZwOCgIBRI0BC40BXgQB2ZIBkgELkgFVBAGXkgGXAQuXAWsEAdWRAZ4BC54BXAQBkpEBowELowFVBAHQkAGoAQuoAWsEAY6QAawBdKwBmwEEAYyQAa0BdK0BlgEEAYqQAfIBC/IBdgQBx48BsQELsQFUBAGFjwG2AQu2AVgEAcOOAd4BC94BXgQBgY4BxQELxQGCAQQBv40BhgILhgKMAQQB/YwB7QEL7QF4BAG7jAHZAQvZAV4EAfmLAeMBC+MBVQQBt4sB9wEL9wGWAQQB9YoB1AEL1AF4BAGzigHAAQvAAY8BBAHxiQH8AQv8AZoBBAGviQHPAQvPAXQEAe2IAegBC+gBawQBq4gBygELygGGAQQB6YcBgQILgQKIAQQBp4cBuwELuwGJAQQB5YYBiwIHpQIlBAGZhAGmAgfZAiUDAYR/3gIL3gJrAwHBfuYCB/sCJQMBs3z8AgeRAyUDAaZ6kgMHpwM8AwGZeKgDB70DOQMBjHa+AwfTAzUDAf9z1AMH6QMyAwHyceoDB/8DLQMB5W+CBAe9BBIDActqvgQHyQQ2AwHGacoEB9UELwMBwWjWBAfhBDADAbxn4gQH8gQxAwH1ZfcEC/cEcAMBsmWDBQuDBVYDAe9k/gQL/gSBAQMBrWSHBXSHBYsBAwGrZIsFC4sFjQEDAehjpAULpAWFAQMBpmOaBQuaBYcBAwHkYpUFC5UFhwEDAaJiqQULqQVrAwHgYZ8FC58FoAEDAZ5hkAULkAWBAQMB3GCuBQfSBR0DAYxd0wUH7QUtAwHBWu4FB5IGLwMB8laTBgetBiYDAadUrgYHzQYoAwGaUdIGC9IGawMB11DXBgvXBnADAZVQ3gYL3gb7AQMB0k/jBgvjBn8DAZBP5wYo5wZKAwGOT+oGC+oGdwMBzE7uBnTuBpEBAwHKTvAGB48HKQMBvEuQBwfNBy4DAaNFzgcH3gckAwHcQ98HB/4HNAMBz0D/BweeCDYDAcI9nwgHvggtAwG1Or8IB94ILwMBqDffCAf5CC8DAd00+wh0+wiPAQMB2zT9CAeDCSIDAZc0hAkHigkmAwHUM4sJB5EJMgMBkTOSCQeYCTcDAc4ymQkHnwk2AwGLMqAJB6YJNAMByDGnCQetCTgDAYUxrgkHtAkmAwHCMLUJB7sJOAMB/y+8CQfCCTADAbwvwwkHyQkrAwH5LsoJB9AJMAMBti7RCQfXCS8DAfMt2AkH3gktAwGwLd8JB+UJMQMB7SzmCQfsCTEDAaos7QkH+AkuAwGlK/kJB4QKMgMBoCqFCgeQCjgDAZspkQoHnAo0AwGWKKEKC6EKYwMB0yeoCguoClsCAUWsCgmRDhQDAcsBlA4Jmg4kAwGHAZgCDZgCYAQBooYBkwINkwJ8BAHghQGOAg2OAmYEAZ6FAZ0CDZ0CVwQB3IQBogINogJtBAGahAG4Ag24AnUEAdeDAcICDcICcAQBlYMBqQINqQJaBAHTggHWAg3WAoYBBAGRggG9Ag29AnIEAc+BAccCDccCkAEEAY2BAbMCDbMCiQEEAcuAAcwCDcwClAEEAYmAAdECDdECggEDAcd/rgINrgKDAQMBhX/uAg3uAlgDAf196QIN6QJ6AwG6ffMCDfMCVwMB93z4Ag34Am0DAbR8hAMNhANYAwHwe4kDDYkDVwMBrXv/Ag3/AnoDAep6jgMNjgNtAwGnepoDDZoDWAMB43mfAw2fA1cDAaB5lQMNlQOeAQMB3XikAw2kA20DAZp4sAMNsANYAwHWd6sDDasDnAEDAZN3tQMNtQNXAwHQdroDDboDbQMBjXbBAw3BA5oBAwHJdcYDDcYDWAMBhnXLAw3LA1cDAcN00AMN0ANtAwGAdNwDDdwDWAMBvHPhAw3hA1cDAfly1wMN1wOUAQMBtnLmAw3mA20DAfNx8gMN8gNYAwGvcfcDDfcDVwMB7HD8Aw38A20DAalw7QMN7QOOAQMB5m+DBAmTBCcDAZ1ulAQJvAQUAwHMasEEDcEEnAEDAYlqxgQNxgSWAQMBx2nSBA3SBJIBAwGEac0EDc0EjgEDAcJo2QQN2QSMAQMB/2feBA3eBJABAwG9Z+UEDeUEkQEDAfpm7wQN7wRtAwG4ZuoEDeoEhgEDAfZlsQUNsQV4AwGZYM8FDc8FcAMB11/FBQ3FBXADAZVftgUNtgVyAwHTXsoFDcoFcgMBkV67BQ27BXIDAc9dwAUNwAWaAQMBjV3lBQ3lBZQBAwHKXNYFDdYFmgEDAYhc2wUN2wV8AwHGW+oFDeoFgAEDAYRb4AUN4AWAAQMBwlrxBQ3xBZwBAwH/WYUGDYUGlAEDAb1Z9gUN9gWWAQMB+1j7BQ37BXIDAblYigYNigaQAQMB91ePBg2PBpQBAwG1V4AGDYAGmgEDAfNWqgYNqgZyAwGwVpYGDZYGjAEDAe5VpQYNpQaGAQMBrFWgBg2gBnIDAepUmwYNmwZuAwGoVMAGDcAGhgEDAeVTygYNygaGAQMBo1OxBg2xBo4BAwHhUrsGDbsGcgMBn1K2Bg22BogBAwHdUcUGDcUGggEDAZtRjAcNjAd+AwGHTv0GDf0GagMBxU3zBg3zBn8DAYNNhwcNhweMAQMBwUyCBw2CB2gDAf9L+AYN+AZ4AwG9S6wHDawHfAMB+kq2Bw22B3ADAbhKmAcNmAd8AwH2ScoHDcoHhgEDAbRJsQcNsQdyAwHySLsHDbsHkAEDAbBIpwcNpwdyAwHuR5MHDZMHiQEDAaxHwAcNwAeUAQMB6kaiBw2iB24DAahGnQcNnQeAAQMB5kXFBw3FB4IBAwGkRdEHDdEHbQMB4UTbBw3bB3gDAZ9E1gcN1gdtAwHdQ/EHDfEHWAMBmkPnBw3nB3wDAdhC4gcN4geIAQMBlkL2Bw32B1cDAdRB+wcN+wdtAwGSQewHDewHgAEDAdBAgggNgghYAwGNQIcIDYcIVwMByz+WCA2WCJABAwGJP5sIDZsIlAEDAcc+kQgNkQicAQMBhT6MCA2MCG0DAcM9sQgNsQhYAwGAPaIIDaIIegMBvjy2CA22CFcDAfw7rAgNrAhyAwG6O6cIDacIbgMB+Dq7CA27CG0DAbY6wggNwghYAwHzOdEIDdEIjgEDAbE52wgN2wiGAQMB7zjHCA3HCFcDAa04zAgNzAhtAwHrN9YIDdYIggEDAak38QgN8QiUAQMB5jbiCA3iCJwBAwGkNuwIDewIiQEDAeI19ggN9ghtAwGgNecIDecIgwEDAd40gAkNgAloAwGYNIcJDYcJcAMB1TOOCQ2OCXgDAZIzlQkNlQmSAQMBzzKcCQ2cCYABAwGMMqMJDaMJjAEDAckxqgkNqgmUAQMBhjGxCQ2xCXADAcMwuAkNuAmUAQMBgDC/CQ2/CXQDAb0vxgkNxglqAwH6Ls0JDc0JhAEDAbcu1AkN1AlyAwH0LdsJDdsJfgMBsS3iCQ3iCYYBAwHuLOkJDekJhgEDAass8AkN8Al/AwHoK/UJDfUJbQMBpiv8CQ38CYcBAwHjKoEKDYEKbQMBoSqICg2ICpQBAwHeKY0KDY0KbQMBnCmUCg2UCowBAwHZKJkKDZkKbQMBlyitCgvAChwDAYomwQoLkA4QAwHMAZcOD5cOiQEDAYkBlA5llA6NAQMBiAGGBA+GBHQDAaJviwQPiwR8AwHgbpAED5AEiAEDAZ5ulQQLqgQpAwGUbKsEC7sEOwMBzWq9ChG9CoYBAwGQJ7UKEbgKFAMBziatCqcBrQq6AQMBzSawChGwCp0BAwGLJsQKEcQKagMBzQHICg+FDhoDAdMCiA4Pjg4qAwGPApgEEZgEXgMB222dBBGdBH4DAZltogQRogR2AwHXbKcEEacEggEDAZVsrgQRrgSYAQMB0muzBBGzBKIBAwGQa7gEEbgEggEDAc5qzAoRzAqmAQMBiCbNChHxCjEDAbIi8goR+AosAwHtIfkKEYkLJQMBoyCKCxGQCywDAd4fkQsR0ws7AwH2GNQLEf0LLQMB3RT+CxGYDDEDAY0SmQwRpAwmAwGGEaUMEa4MGgMBwRCvDBHbDRYDAaoF3A0RhA4WAwHUAosOFYsOjwEDAZECiA5qiA6KAQMBkALMCoABzAqjAQMBiSbkChfkCmQDAcUl7goX7gp/AwGCJekKF+kKbwMBvyTVChfVCmgDAfwj2goX2gpzAwG5I9AKF9AKcgMB9iLfChffCn4DAbMi9QoX9QqRAQMB7yHyCmzyCnwDAe4h/AoX/AphAwGqIYELF4ELdwMB5yCGCxeGC2ADAaQgjQsXjQuRAQMB4B+KC22KC3sDAd8fywsXywt8AwGbH7wLF7wLYgMB2B6jCxejC3cDAZUetwsXtwtqAwHSHagLF6gLhgEDAY8dlAsXlAuRAQMBzBzBCxfBC2EDAYkcngsXnguTAQMBxhvQCxfQC3wDAYMbsgsXsgtgAwHAGsYLF8YLdwMB/RmtCxetC4oBAwG6GZkLF5kLjQEDAfcY1wsX1wtkAwGzGOYLF+YLhQEDAfAX9QsX9Qt3AwGtF+sLF+sLYQMB6hbhCxfhC5MBAwGnFtwLF9wLiQEDAeQV+gsX+guEAQMBoRXwCxfwC3cDAd4UgQwXgQxkAwGaFIYMF4YMagMB1xOVDBeVDHcDAZQTiwwXiwxhAwHREpAMF5AMdwMBjhKcDBecDGEDAcoRoQwXoQx3AwGHEawMPawMQQMBhRGoDBeoDHMDAcIQsgwXsgymAQMBqwW2DBWMDSADAdQKjw0V2Q0gAwHuBd8NF98NawMB1QLjDRX5DSADAdwD/A0Vgg4wAwGYA7cMF4sNHAMB1QqQDRfYDRwDAe8F5A0X6g0yAwHlBOsNF/ENNAMBoQTyDRf4DTADAd0D/w0b/w2dAgMBmQO6DB26DK8BAwHWCr4MG/0MJgMB3guADRuJDSQDAZkLkw0dkw2vAQMB8AWXDRvKDSYDAfgGzQ0b1g0kAwGzBucNHecNlwEDAecE5A1z5A2HAQMB5gTuDR3uDX0DAaIE9Q0d9Q19AwHeA78MHcoMRAMBug/LDB3bDC4DAe8N3Awd/AwiAwHfC4cNR4cNTAMB3QuDDSGDDX0DAZoLmA0dqA0uAwGJCakNHckNIgMB+QbUDUfUDUwDAfcG0A0h0A19AwG0BsIMI8IMiQEDAf4PxwwjxwyfAQMBuw/YDCPYDKIBAwH3DtMMI9MMtwEDAbQOywy3AcsMyQEDAbMOzgwjzgyvAQMB8A3fDCPfDIgBAwHgC+MMIe4MKgMB6AzxDCH6DCoDAaMMpQ0jpQ2yAQMBkQqgDSOgDfcBAwHOCZgNvwGYDdABAwHNCZsNI5sNrwEDAYoJrA0jrA2QAQMB+gawDSG7DSoDAYIIvg0hxw0qAwG9B+sMJ+sMngEDAawN5gwn5gyPAQMB6Qz4DE34DFIDAecM9Awn9AyDAQMBpAy4DSe4DZUBAwHGCLMNJ7MNjwEDAYMIxQ1NxQ1SAwGBCMENJ8ENgwEDAb4H</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="SetRatePlanContext_1" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="GetChanges_1" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_2" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_3" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="PrepareActions_1" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="StructureDefaultData_4" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="StructureDataByZones_5" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_6" sap:VirtualizedContainerService.HintSize="1994,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="SetContextEffectiveAfterCustomerZoneRatesByZone_1" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="GetExistingSaleZones_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetExistingSaleRates_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetExistingSaleEntityDefaultRoutingProducts_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetExistingSaleEntityZoneRoutingProducts_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetExistingSaleEntityDefaultServices_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetExistingSaleEntityZoneServices_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="GetExistingCustomerCountries_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_1" sap:VirtualizedContainerService.HintSize="1994,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="PrepareExistingZones_3" sap:VirtualizedContainerService.HintSize="554,22" />
      <sap2010:ViewStateData Id="PrepareExistingRates_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareExistingSaleZoneRoutingProducts_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_7" sap:VirtualizedContainerService.HintSize="554,86" />
      <sap2010:ViewStateData Id="Sequence_2" sap:VirtualizedContainerService.HintSize="576,272">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="PrepareExistingDefaultRoutingProducts_1" sap:VirtualizedContainerService.HintSize="200,272" />
      <sap2010:ViewStateData Id="PrepareExistingDefaultServices_1" sap:VirtualizedContainerService.HintSize="200,272" />
      <sap2010:ViewStateData Id="PrepareExistingSaleZoneServices_1" sap:VirtualizedContainerService.HintSize="200,272" />
      <sap2010:ViewStateData Id="PrepareExistingCustomerCountries_2" sap:VirtualizedContainerService.HintSize="200,272" />
      <sap2010:ViewStateData Id="Parallel_3" sap:VirtualizedContainerService.HintSize="1994,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="SetContextExistingZonesByCountry_1" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="SetContextIntersectedSellingProductZoneRatesByZone_2" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_4" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="ProcessCustomerCountries_1" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="ProcessRates_3" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ProcessDefaultRoutingProduct_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ProcessSaleZoneRoutingProducts_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ProcessDefaultService_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ProcessSaleZoneServices_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_4" sap:VirtualizedContainerService.HintSize="1994,86">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="UpdateZonesData_1" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="CombineLists`1_1" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="ExecuteRules_1" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_5" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="ReserveIdsForNewEntities_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareRatePlanPreviewSummary_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareRatePreviews_2" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareDefaultRoutingProductPreview_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareSaleZoneRoutingProductPreviews_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareDefaultServicePreview_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareSaleZoneServicePreviews_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="PrepareCustomerCountryPreviews_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_5" sap:VirtualizedContainerService.HintSize="1994,86">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteTrackingMessage_6" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="ApplyNewRatesToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyChangedRatesToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyNewDefaultRoutingProductToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyChangedDefaultRoutingProductsToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyDefaultRoutingProductPreviewToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyNewSaleZoneRoutingProductsToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyChangedSaleZoneRoutingProductsToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyRatePreviewsToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplySaleZoneRoutingProductPreviewsToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyRatePlanPreviewSummaryToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyNewDefaultServiceToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyChangedDefaultServicesToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyDefaultServicePreviewToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyNewSaleZoneServicesToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyChangedSaleZoneServicesToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplySaleZoneServicePreviewsToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyNewCustomerCountriesToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyChangedCustomerCountriesToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyChangedCustomerCountryPreviewsToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="ApplyNewCustomerCountryPreviewsToDB_1" sap:VirtualizedContainerService.HintSize="200,40" />
      <sap2010:ViewStateData Id="Parallel_2" sap:VirtualizedContainerService.HintSize="1994,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ReadRatePlanContext_1" sap:VirtualizedContainerService.HintSize="1994,22" />
      <sap2010:ViewStateData Id="AssignTask`1_1" sap:VirtualizedContainerService.HintSize="489,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_7" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="ReserveSalePriceListId_1" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_9" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="BackupData_1" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="WriteTrackingMessage_10" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="StructureSalePriceListZoneChange_1" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="SavePricelistFiles_3" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="SyncImportedDataWithDB_1" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="UpdateState_1" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="Assign_3" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="PrepareCustomersWithPriceList_1" sap:VirtualizedContainerService.HintSize="509,22" />
      <sap2010:ViewStateData Id="AssignTask`1_2" sap:VirtualizedContainerService.HintSize="509,22" />
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Assign_4" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="If_3" sap:VirtualizedContainerService.HintSize="509,212">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_7" sap:VirtualizedContainerService.HintSize="531,460">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_6" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="If_6" sap:VirtualizedContainerService.HintSize="798,610">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_4" sap:VirtualizedContainerService.HintSize="820,734">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AssignTask`1_3" sap:VirtualizedContainerService.HintSize="509,22" />
      <sap2010:ViewStateData Id="Assign_2" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Assign_5" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="If_5" sap:VirtualizedContainerService.HintSize="509,212">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_8" sap:VirtualizedContainerService.HintSize="531,398">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_7" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="If_7" sap:VirtualizedContainerService.HintSize="798,548">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_6" sap:VirtualizedContainerService.HintSize="820,672">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_2" sap:VirtualizedContainerService.HintSize="242,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteTrackingMessage_11" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="LogEmailedCustomers_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="NotifyCustomers_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_5" sap:VirtualizedContainerService.HintSize="222,270">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteTrackingMessage_12" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_4" sap:VirtualizedContainerService.HintSize="242,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="264,926">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteTrackingMessage_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_1" sap:VirtualizedContainerService.HintSize="489,1076">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_9" sap:VirtualizedContainerService.HintSize="511,1262">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteTrackingMessage_13" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_8" sap:VirtualizedContainerService.HintSize="1994,1412">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="2016,3144">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TOne.WhS.Sales.BP.RatePlan_1" sap:VirtualizedContainerService.HintSize="2056,3224">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="ShouldCollapseAll">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>