<Activity mc:Ignorable="sap sap2010 sads" x:Class="TOne.CDRProcess.TimeRangeRepricingProcess"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:tca="clr-namespace:TOne.CDRProcess.Arguments;assembly=TOne.CDRProcess.Arguments"
 xmlns:tca1="clr-namespace:TOne.CDRProcess.Activities;assembly=TOne.CDRProcess.Activities"
 xmlns:tce="clr-namespace:TOne.CDR.Entities;assembly=TOne.CDR.Entities"
 xmlns:vb="clr-namespace:Vanrise.BusinessProcess;assembly=Vanrise.BusinessProcess"
 xmlns:vq="clr-namespace:Vanrise.Queueing;assembly=Vanrise.Queueing"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="Input" Type="InArgument(tca:TimeRangeRepricingProcessInput)" />
    <x:Property Name="Output" Type="OutArgument(tca:TimeRangeRepricingProcessOutput)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap2010:WorkflowViewState.IdRef>TOne.CDRProcess.TimeRangeRepricingProcess_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities.Debugger</x:String>
      <x:String>System.Activities.Debugger.Symbol</x:String>
      <x:String>System.Collections.Concurrent</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>TABS</x:String>
      <x:String>TOne.CDRProcess</x:String>
      <x:String>TOne.CDRProcess.Activities</x:String>
      <x:String>TOne.CDRProcess.Arguments</x:String>
      <x:String>Vanrise.BusinessProcess.WFActivities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>Vanrise.BusinessProcess</x:String>
      <x:String>TOne.CDR.Entities</x:String>
      <x:String>Vanrise.Queueing</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>log4net</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>NHibernate</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>TABS</AssemblyReference>
      <AssemblyReference>TABS.Addons.Utilities</AssemblyReference>
      <AssemblyReference>TABS.Plugins.Framework</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.Entities</AssemblyReference>
      <AssemblyReference>Vanrise.BusinessProcess.WFActivities</AssemblyReference>
      <AssemblyReference>Vanrise.Caching</AssemblyReference>
      <AssemblyReference>Vanrise.Common</AssemblyReference>
      <AssemblyReference>Vanrise.Queueing</AssemblyReference>
      <AssemblyReference>Vanrise.Queueing.Entities</AssemblyReference>
      <AssemblyReference>TOne.Business</AssemblyReference>
      <AssemblyReference>TOne.Caching</AssemblyReference>
      <AssemblyReference>TOne.CDR.Business</AssemblyReference>
      <AssemblyReference>TOne.CDR.Entities</AssemblyReference>
      <AssemblyReference>TOne.CDRProcess.Activities</AssemblyReference>
      <AssemblyReference>TOne.CDRProcess.Arguments</AssemblyReference>
      <AssemblyReference>TOne.Entities</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>TOne.CDRProcess</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_3">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" Name="cdrCount" />
      <Variable x:TypeArguments="s:DateTime" Name="start" />
    </Sequence.Variables>
    <Assign sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="s:DateTime">
          <mca:CSharpReference x:TypeArguments="s:DateTime">start</mca:CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="s:DateTime">
          <mca:CSharpValue x:TypeArguments="s:DateTime">DateTime.Now</mca:CSharpValue>
        </InArgument>
      </Assign.Value>
    </Assign>
    <WriteLine sap2010:WorkflowViewState.IdRef="WriteLine_1">
      <InArgument x:TypeArguments="x:String">
        <mca:CSharpValue x:TypeArguments="x:String">String.Format("{0}: repricing for {1} - {2} started", DateTime.Now, Input.Range.From, Input.Range.To)</mca:CSharpValue>
      </InArgument>
    </WriteLine>
    <Parallel sap2010:WorkflowViewState.IdRef="Parallel_3">
      <tca1:ClearTimeRangeCDRMainRecords Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ClearTimeRangeCDRMainRecords_1">
        <tca1:ClearTimeRangeCDRMainRecords.CustomersIds>
          <InArgument x:TypeArguments="scg:List(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:List(x:String)">Input.CustomersIds</mca:CSharpValue>
          </InArgument>
        </tca1:ClearTimeRangeCDRMainRecords.CustomersIds>
        <tca1:ClearTimeRangeCDRMainRecords.SupplierIds>
          <InArgument x:TypeArguments="scg:List(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:List(x:String)">Input.SupplierIds</mca:CSharpValue>
          </InArgument>
        </tca1:ClearTimeRangeCDRMainRecords.SupplierIds>
        <tca1:ClearTimeRangeCDRMainRecords.TimeRange>
          <InArgument x:TypeArguments="tca:TimeRange">
            <mca:CSharpValue x:TypeArguments="tca:TimeRange">Input.Range</mca:CSharpValue>
          </InArgument>
        </tca1:ClearTimeRangeCDRMainRecords.TimeRange>
      </tca1:ClearTimeRangeCDRMainRecords>
      <tca1:ClearTimeRangeCDRCostRecords Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ClearTimeRangeCDRCostRecords_1">
        <tca1:ClearTimeRangeCDRCostRecords.CustomersIds>
          <InArgument x:TypeArguments="scg:List(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:List(x:String)">Input.CustomersIds</mca:CSharpValue>
          </InArgument>
        </tca1:ClearTimeRangeCDRCostRecords.CustomersIds>
        <tca1:ClearTimeRangeCDRCostRecords.SupplierIds>
          <InArgument x:TypeArguments="scg:List(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:List(x:String)">Input.SupplierIds</mca:CSharpValue>
          </InArgument>
        </tca1:ClearTimeRangeCDRCostRecords.SupplierIds>
        <tca1:ClearTimeRangeCDRCostRecords.TimeRange>
          <InArgument x:TypeArguments="tca:TimeRange">
            <mca:CSharpValue x:TypeArguments="tca:TimeRange">Input.Range</mca:CSharpValue>
          </InArgument>
        </tca1:ClearTimeRangeCDRCostRecords.TimeRange>
      </tca1:ClearTimeRangeCDRCostRecords>
      <tca1:ClearTimeRangeCDRSaleRecords Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ClearTimeRangeCDRSaleRecords_1">
        <tca1:ClearTimeRangeCDRSaleRecords.CustomersIds>
          <InArgument x:TypeArguments="scg:List(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:List(x:String)">Input.CustomersIds</mca:CSharpValue>
          </InArgument>
        </tca1:ClearTimeRangeCDRSaleRecords.CustomersIds>
        <tca1:ClearTimeRangeCDRSaleRecords.SupplierIds>
          <InArgument x:TypeArguments="scg:List(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:List(x:String)">Input.SupplierIds</mca:CSharpValue>
          </InArgument>
        </tca1:ClearTimeRangeCDRSaleRecords.SupplierIds>
        <tca1:ClearTimeRangeCDRSaleRecords.TimeRange>
          <InArgument x:TypeArguments="tca:TimeRange">
            <mca:CSharpValue x:TypeArguments="tca:TimeRange">Input.Range</mca:CSharpValue>
          </InArgument>
        </tca1:ClearTimeRangeCDRSaleRecords.TimeRange>
      </tca1:ClearTimeRangeCDRSaleRecords>
      <tca1:ClearTimeRangeCDRInvalidRecords Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ClearTimeRangeCDRInvalidRecords_1">
        <tca1:ClearTimeRangeCDRInvalidRecords.CustomersIds>
          <InArgument x:TypeArguments="scg:List(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:List(x:String)">Input.CustomersIds</mca:CSharpValue>
          </InArgument>
        </tca1:ClearTimeRangeCDRInvalidRecords.CustomersIds>
        <tca1:ClearTimeRangeCDRInvalidRecords.SupplierIds>
          <InArgument x:TypeArguments="scg:List(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:List(x:String)">Input.SupplierIds</mca:CSharpValue>
          </InArgument>
        </tca1:ClearTimeRangeCDRInvalidRecords.SupplierIds>
        <tca1:ClearTimeRangeCDRInvalidRecords.TimeRange>
          <InArgument x:TypeArguments="tca:TimeRange">
            <mca:CSharpValue x:TypeArguments="tca:TimeRange">Input.Range</mca:CSharpValue>
          </InArgument>
        </tca1:ClearTimeRangeCDRInvalidRecords.TimeRange>
      </tca1:ClearTimeRangeCDRInvalidRecords>
      <If sap2010:WorkflowViewState.IdRef="If_1">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">Input.GenerateTrafficStatistic</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <tca1:ClearTimeRangeTrafficStatsRecords Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ClearTimeRangeTrafficStatsRecords_1">
            <tca1:ClearTimeRangeTrafficStatsRecords.CustomersIds>
              <InArgument x:TypeArguments="scg:List(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:List(x:String)">Input.CustomersIds</mca:CSharpValue>
              </InArgument>
            </tca1:ClearTimeRangeTrafficStatsRecords.CustomersIds>
            <tca1:ClearTimeRangeTrafficStatsRecords.SupplierIds>
              <InArgument x:TypeArguments="scg:List(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:List(x:String)">Input.SupplierIds</mca:CSharpValue>
              </InArgument>
            </tca1:ClearTimeRangeTrafficStatsRecords.SupplierIds>
            <tca1:ClearTimeRangeTrafficStatsRecords.TimeRange>
              <InArgument x:TypeArguments="tca:TimeRange">
                <mca:CSharpValue x:TypeArguments="tca:TimeRange">Input.Range</mca:CSharpValue>
              </InArgument>
            </tca1:ClearTimeRangeTrafficStatsRecords.TimeRange>
          </tca1:ClearTimeRangeTrafficStatsRecords>
        </If.Then>
      </If>
    </Parallel>
    <Parallel sap2010:WorkflowViewState.IdRef="Parallel_2">
      <Parallel.Variables>
        <Variable x:TypeArguments="vq:BaseQueue(tce:CDRBatch)" Name="queueCDRs" />
        <Variable x:TypeArguments="vq:BaseQueue(tce:CDRMainBatch)" Name="queueMainCDRs" />
        <Variable x:TypeArguments="vq:BaseQueue(tce:CDRInvalidBatch)" Name="queueInvalidCDRs" />
        <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="billingAndPricingTaskStatus" />
        <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="prepareMainCDRsTaskStatus" />
        <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="PrepareInvalidCDRsTaskStatus" />
        <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="LoadCDRsTaskStatus" />
        <Variable x:TypeArguments="vq:BaseQueue(tce:CDRBillingBatch)" Name="queueBillingCDRs" />
        <Variable x:TypeArguments="vq:BaseQueue(x:Object)" Name="queuePreparedMainCDRsObject" />
        <Variable x:TypeArguments="vq:BaseQueue(x:Object)" Name="queuePreparedInvalidCDRsObject" />
        <Variable x:TypeArguments="vq:BaseQueue(tce:TrafficStatisticBatch)" Name="queueTrafficStats" />
        <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="TrafficStatsTaskStatus" />
        <Variable x:TypeArguments="vq:BaseQueue(x:Object)" Name="queuePreparedTrafficStatsObject" />
        <Variable x:TypeArguments="vb:AsyncActivityStatus" Name="preparedTrafficStatsTaskStatus" />
      </Parallel.Variables>
      <tca1:LoadCDRs sap2010:WorkflowViewState.IdRef="LoadCDRs_1">
        <tca1:LoadCDRs.From>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">Input.Range.From</mca:CSharpValue>
          </InArgument>
        </tca1:LoadCDRs.From>
        <tca1:LoadCDRs.OutputQueue>
          <InOutArgument x:TypeArguments="vq:BaseQueue(tce:CDRBatch)">
            <mca:CSharpReference x:TypeArguments="vq:BaseQueue(tce:CDRBatch)">queueCDRs</mca:CSharpReference>
          </InOutArgument>
        </tca1:LoadCDRs.OutputQueue>
        <tca1:LoadCDRs.Result>
          <OutArgument x:TypeArguments="x:Int32">
            <mca:CSharpReference x:TypeArguments="x:Int32">cdrCount</mca:CSharpReference>
          </OutArgument>
        </tca1:LoadCDRs.Result>
        <tca1:LoadCDRs.Status>
          <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">LoadCDRsTaskStatus</mca:CSharpReference>
          </OutArgument>
        </tca1:LoadCDRs.Status>
        <tca1:LoadCDRs.To>
          <InArgument x:TypeArguments="s:DateTime">
            <mca:CSharpValue x:TypeArguments="s:DateTime">Input.Range.To</mca:CSharpValue>
          </InArgument>
        </tca1:LoadCDRs.To>
      </tca1:LoadCDRs>
      <tca1:GenerateBillingAndPricingCDRs sap2010:WorkflowViewState.IdRef="GenerateBillingAndPricingCDRs_1">
        <tca1:GenerateBillingAndPricingCDRs.CustomersIds>
          <InArgument x:TypeArguments="scg:List(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:List(x:String)">Input.CustomersIds</mca:CSharpValue>
          </InArgument>
        </tca1:GenerateBillingAndPricingCDRs.CustomersIds>
        <tca1:GenerateBillingAndPricingCDRs.InputQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(tce:CDRBatch)">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(tce:CDRBatch)">queueCDRs</mca:CSharpValue>
          </InArgument>
        </tca1:GenerateBillingAndPricingCDRs.InputQueue>
        <tca1:GenerateBillingAndPricingCDRs.OutputBillingQueue>
          <InOutArgument x:TypeArguments="vq:BaseQueue(tce:CDRBillingBatch)">
            <mca:CSharpReference x:TypeArguments="vq:BaseQueue(tce:CDRBillingBatch)">queueBillingCDRs</mca:CSharpReference>
          </InOutArgument>
        </tca1:GenerateBillingAndPricingCDRs.OutputBillingQueue>
        <tca1:GenerateBillingAndPricingCDRs.OutputInvalidCDRQueue>
          <InOutArgument x:TypeArguments="vq:BaseQueue(tce:CDRInvalidBatch)">
            <mca:CSharpReference x:TypeArguments="vq:BaseQueue(tce:CDRInvalidBatch)">queueInvalidCDRs</mca:CSharpReference>
          </InOutArgument>
        </tca1:GenerateBillingAndPricingCDRs.OutputInvalidCDRQueue>
        <tca1:GenerateBillingAndPricingCDRs.OutputMainCDRQueue>
          <InOutArgument x:TypeArguments="vq:BaseQueue(tce:CDRMainBatch)">
            <mca:CSharpReference x:TypeArguments="vq:BaseQueue(tce:CDRMainBatch)">queueMainCDRs</mca:CSharpReference>
          </InOutArgument>
        </tca1:GenerateBillingAndPricingCDRs.OutputMainCDRQueue>
        <tca1:GenerateBillingAndPricingCDRs.PreviousActivityStatus>
          <InArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">LoadCDRsTaskStatus</mca:CSharpValue>
          </InArgument>
        </tca1:GenerateBillingAndPricingCDRs.PreviousActivityStatus>
        <tca1:GenerateBillingAndPricingCDRs.Status>
          <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">billingAndPricingTaskStatus</mca:CSharpReference>
          </OutArgument>
        </tca1:GenerateBillingAndPricingCDRs.Status>
        <tca1:GenerateBillingAndPricingCDRs.SupplierIds>
          <InArgument x:TypeArguments="scg:List(x:String)">
            <mca:CSharpValue x:TypeArguments="scg:List(x:String)">Input.SupplierIds</mca:CSharpValue>
          </InArgument>
        </tca1:GenerateBillingAndPricingCDRs.SupplierIds>
      </tca1:GenerateBillingAndPricingCDRs>
      <If sap2010:WorkflowViewState.IdRef="If_3">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">Input.GenerateTrafficStatistic</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <tca1:GenerateTrafficStatisticsForRepricing sap2010:WorkflowViewState.IdRef="GenerateTrafficStatisticsForRepricing_1">
            <tca1:GenerateTrafficStatisticsForRepricing.InputQueue>
              <InArgument x:TypeArguments="vq:BaseQueue(tce:CDRBillingBatch)">
                <mca:CSharpValue x:TypeArguments="vq:BaseQueue(tce:CDRBillingBatch)">queueBillingCDRs</mca:CSharpValue>
              </InArgument>
            </tca1:GenerateTrafficStatisticsForRepricing.InputQueue>
            <tca1:GenerateTrafficStatisticsForRepricing.OutputQueue>
              <InOutArgument x:TypeArguments="vq:BaseQueue(tce:TrafficStatisticBatch)">
                <mca:CSharpReference x:TypeArguments="vq:BaseQueue(tce:TrafficStatisticBatch)">queueTrafficStats</mca:CSharpReference>
              </InOutArgument>
            </tca1:GenerateTrafficStatisticsForRepricing.OutputQueue>
            <tca1:GenerateTrafficStatisticsForRepricing.PreviousActivityStatus>
              <InArgument x:TypeArguments="vb:AsyncActivityStatus">
                <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">billingAndPricingTaskStatus</mca:CSharpValue>
              </InArgument>
            </tca1:GenerateTrafficStatisticsForRepricing.PreviousActivityStatus>
            <tca1:GenerateTrafficStatisticsForRepricing.Status>
              <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
                <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">TrafficStatsTaskStatus</mca:CSharpReference>
              </OutArgument>
            </tca1:GenerateTrafficStatisticsForRepricing.Status>
          </tca1:GenerateTrafficStatisticsForRepricing>
        </If.Then>
      </If>
      <tca1:PrepareMainCDRsForDBApply sap2010:WorkflowViewState.IdRef="PrepareMainCDRsForDBApply_1">
        <tca1:PrepareMainCDRsForDBApply.InputQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(tce:CDRMainBatch)">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(tce:CDRMainBatch)">queueMainCDRs</mca:CSharpValue>
          </InArgument>
        </tca1:PrepareMainCDRsForDBApply.InputQueue>
        <tca1:PrepareMainCDRsForDBApply.OutputQueue>
          <InOutArgument x:TypeArguments="vq:BaseQueue(x:Object)">
            <mca:CSharpReference x:TypeArguments="vq:BaseQueue(x:Object)">queuePreparedMainCDRsObject</mca:CSharpReference>
          </InOutArgument>
        </tca1:PrepareMainCDRsForDBApply.OutputQueue>
        <tca1:PrepareMainCDRsForDBApply.PreviousActivityStatus>
          <InArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">billingAndPricingTaskStatus</mca:CSharpValue>
          </InArgument>
        </tca1:PrepareMainCDRsForDBApply.PreviousActivityStatus>
        <tca1:PrepareMainCDRsForDBApply.Status>
          <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">prepareMainCDRsTaskStatus</mca:CSharpReference>
          </OutArgument>
        </tca1:PrepareMainCDRsForDBApply.Status>
      </tca1:PrepareMainCDRsForDBApply>
      <tca1:PrepareInvalidCDRsForDBApply sap2010:WorkflowViewState.IdRef="PrepareInvalidCDRsForDBApply_1">
        <tca1:PrepareInvalidCDRsForDBApply.InputQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(tce:CDRInvalidBatch)">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(tce:CDRInvalidBatch)">queueInvalidCDRs</mca:CSharpValue>
          </InArgument>
        </tca1:PrepareInvalidCDRsForDBApply.InputQueue>
        <tca1:PrepareInvalidCDRsForDBApply.OutputQueue>
          <InOutArgument x:TypeArguments="vq:BaseQueue(x:Object)">
            <mca:CSharpReference x:TypeArguments="vq:BaseQueue(x:Object)">queuePreparedInvalidCDRsObject</mca:CSharpReference>
          </InOutArgument>
        </tca1:PrepareInvalidCDRsForDBApply.OutputQueue>
        <tca1:PrepareInvalidCDRsForDBApply.PreviousActivityStatus>
          <InArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">billingAndPricingTaskStatus</mca:CSharpValue>
          </InArgument>
        </tca1:PrepareInvalidCDRsForDBApply.PreviousActivityStatus>
        <tca1:PrepareInvalidCDRsForDBApply.Status>
          <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">PrepareInvalidCDRsTaskStatus</mca:CSharpReference>
          </OutArgument>
        </tca1:PrepareInvalidCDRsForDBApply.Status>
      </tca1:PrepareInvalidCDRsForDBApply>
      <If sap2010:WorkflowViewState.IdRef="If_2">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">Input.GenerateTrafficStatistic</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <tca1:PrepareTrafficStatsForDBApply sap2010:WorkflowViewState.IdRef="PrepareTrafficStatsForDBApply_1">
            <tca1:PrepareTrafficStatsForDBApply.InputQueue>
              <InArgument x:TypeArguments="vq:BaseQueue(tce:TrafficStatisticBatch)">
                <mca:CSharpValue x:TypeArguments="vq:BaseQueue(tce:TrafficStatisticBatch)">queueTrafficStats</mca:CSharpValue>
              </InArgument>
            </tca1:PrepareTrafficStatsForDBApply.InputQueue>
            <tca1:PrepareTrafficStatsForDBApply.OutputQueue>
              <InOutArgument x:TypeArguments="vq:BaseQueue(x:Object)">
                <mca:CSharpReference x:TypeArguments="vq:BaseQueue(x:Object)">queuePreparedTrafficStatsObject</mca:CSharpReference>
              </InOutArgument>
            </tca1:PrepareTrafficStatsForDBApply.OutputQueue>
            <tca1:PrepareTrafficStatsForDBApply.PreviousActivityStatus>
              <InArgument x:TypeArguments="vb:AsyncActivityStatus">
                <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">billingAndPricingTaskStatus</mca:CSharpValue>
              </InArgument>
            </tca1:PrepareTrafficStatsForDBApply.PreviousActivityStatus>
            <tca1:PrepareTrafficStatsForDBApply.Status>
              <OutArgument x:TypeArguments="vb:AsyncActivityStatus">
                <mca:CSharpReference x:TypeArguments="vb:AsyncActivityStatus">preparedTrafficStatsTaskStatus</mca:CSharpReference>
              </OutArgument>
            </tca1:PrepareTrafficStatsForDBApply.Status>
          </tca1:PrepareTrafficStatsForDBApply>
        </If.Then>
      </If>
      <tca1:ApplyMainCDRsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyMainCDRsToDB_1">
        <tca1:ApplyMainCDRsToDB.InputQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(x:Object)">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(x:Object)">queuePreparedMainCDRsObject</mca:CSharpValue>
          </InArgument>
        </tca1:ApplyMainCDRsToDB.InputQueue>
        <tca1:ApplyMainCDRsToDB.PreviousActivityStatus>
          <InArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">prepareMainCDRsTaskStatus</mca:CSharpValue>
          </InArgument>
        </tca1:ApplyMainCDRsToDB.PreviousActivityStatus>
      </tca1:ApplyMainCDRsToDB>
      <tca1:ApplyInvalidCDRsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyInvalidCDRsToDB_1">
        <tca1:ApplyInvalidCDRsToDB.InputQueue>
          <InArgument x:TypeArguments="vq:BaseQueue(x:Object)">
            <mca:CSharpValue x:TypeArguments="vq:BaseQueue(x:Object)">queuePreparedInvalidCDRsObject</mca:CSharpValue>
          </InArgument>
        </tca1:ApplyInvalidCDRsToDB.InputQueue>
        <tca1:ApplyInvalidCDRsToDB.PreviousActivityStatus>
          <InArgument x:TypeArguments="vb:AsyncActivityStatus">
            <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">PrepareInvalidCDRsTaskStatus</mca:CSharpValue>
          </InArgument>
        </tca1:ApplyInvalidCDRsToDB.PreviousActivityStatus>
      </tca1:ApplyInvalidCDRsToDB>
      <If sap2010:WorkflowViewState.IdRef="If_4">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">Input.GenerateTrafficStatistic</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <tca1:ApplyTrafficStatsToDB Status="{x:Null}" sap2010:WorkflowViewState.IdRef="ApplyTrafficStatsToDB_1">
            <tca1:ApplyTrafficStatsToDB.InputQueue>
              <InArgument x:TypeArguments="vq:BaseQueue(x:Object)">
                <mca:CSharpValue x:TypeArguments="vq:BaseQueue(x:Object)">queuePreparedTrafficStatsObject</mca:CSharpValue>
              </InArgument>
            </tca1:ApplyTrafficStatsToDB.InputQueue>
            <tca1:ApplyTrafficStatsToDB.PreviousActivityStatus>
              <InArgument x:TypeArguments="vb:AsyncActivityStatus">
                <mca:CSharpValue x:TypeArguments="vb:AsyncActivityStatus">preparedTrafficStatsTaskStatus</mca:CSharpValue>
              </InArgument>
            </tca1:ApplyTrafficStatsToDB.PreviousActivityStatus>
          </tca1:ApplyTrafficStatsToDB>
        </If.Then>
      </If>
    </Parallel>
    <Assign sap2010:WorkflowViewState.IdRef="Assign_4">
      <Assign.To>
        <OutArgument x:TypeArguments="tca:TimeRangeRepricingProcessOutput">
          <mca:CSharpReference x:TypeArguments="tca:TimeRangeRepricingProcessOutput">Output</mca:CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="tca:TimeRangeRepricingProcessOutput">
          <mca:CSharpValue x:TypeArguments="tca:TimeRangeRepricingProcessOutput" xml:space="preserve">new TimeRangeRepricingProcessOutput
{
    CDRCount = cdrCount,
    SpentTime = (DateTime.Now - start)
}</mca:CSharpValue>
        </InArgument>
      </Assign.Value>
    </Assign>
    <sads:DebugSymbol.Symbol>d1JDOlxURlNcVE9uZVYyXENvZGVcVE9uZVYyXFRPbmUuQ0RSUHJvY2Vzc1xSZXByaWNpbmdcVGltZVJhbmdlUmVwcmljaW5nUHJvY2Vzcy54YW1sU1UDygMOAgEBWgVlDgMByQZmBWoRAwHDBmsFygEQAwHsBcsBBbgDEAIBDbkDBcgDDgIBAmILYlcDAc8GXQtdWAMBygZoCWisAQMBxAZsB3wrAwGzBn0HjQErAwGjBo4BB54BKwMBkwafAQevAS4DAYMGsAEHyQEMAwHtBdwBB/YBFwMBjAX3AQegAiwDAfMDoQIHvwIMAwGSA8ACB9UCKAMBxQLWAgfrAisDAfgB7AIHigMMAwGXAYsDB5YDIAIBcJcDB6IDIwIBSaMDB7cDDAIBDsEDC8UDFAIBCLwDC7wDcgIBA28Nb2cDAb4GdA10ZgMBuQZ5DXlbAwG0BoABDYABZwMBrgaFAQ2FAWYDAakGigENigFbAwGkBpEBDZEBZwMBngaWAQ2WAWYDAZkGmwENmwFbAwGUBqIBDaIBZwMBjganAQ2nAWYDAYkGrAENrAFbAwGEBrMBDbMBagMB7gW3AQvHATQDAfMF8wEN8wFbAwHZBd8BDd8BXQMBxgXuAQ3uAXMDAbMF5AEN5AFuAwGgBekBDekBWgMBjQX6AQ36AWcDAfkEkwINkwJrAwHmBP8BDf8BZgMB0wSdAg2dAmYDAcAEhAINhAJ8AwGtBJgCDZgCfAMBmgSJAg2JAnwDAYcEjgINjgJ2AwH0A6QCDaQCagMBkwOoAgu9AjgDAaYDzQINzQJ0AwH/AsMCDcMCbgMB7ALSAg3SAnoDAdkCyAINyAJ8AwHGAuMCDeMCdAMBsgLZAg3ZAnQDAZ8C6AIN6AJ9AwGMAt4CDd4CfwMB+QHvAg3vAmoDAZgB8wILiAMwAwGrAZMDDZMDcgMBhAGOAw2OA3QCAXGfAw2fA3UCAV2aAw2aA3cCAUqmAw2mA2oCAQ+qAwu1AygCASK6ARG6AWsDAf4FvwERvwFqAwH5BcQBEcQBXwMB9AW1AhG1AngDAeADqwIRqwJ4AwHNA7oCEboCewMBugOwAhGwAocBAwGnA4ADEYADeAMB5QH2AhH2An8DAdIBhQMRhQODAQMBvwH7AhH7AoQBAwGsAbIDEbIDewIBNq0DEa0DfAIBIw==</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="3026,62" />
      <sap2010:ViewStateData Id="WriteLine_1" sap:VirtualizedContainerService.HintSize="3026,62" />
      <sap2010:ViewStateData Id="ClearTimeRangeCDRMainRecords_1" sap:VirtualizedContainerService.HintSize="200,210" />
      <sap2010:ViewStateData Id="ClearTimeRangeCDRCostRecords_1" sap:VirtualizedContainerService.HintSize="200,210" />
      <sap2010:ViewStateData Id="ClearTimeRangeCDRSaleRecords_1" sap:VirtualizedContainerService.HintSize="200,210" />
      <sap2010:ViewStateData Id="ClearTimeRangeCDRInvalidRecords_1" sap:VirtualizedContainerService.HintSize="200,210" />
      <sap2010:ViewStateData Id="ClearTimeRangeTrafficStatsRecords_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_1" sap:VirtualizedContainerService.HintSize="464,210" />
      <sap2010:ViewStateData Id="Parallel_3" sap:VirtualizedContainerService.HintSize="3026,256" />
      <sap2010:ViewStateData Id="LoadCDRs_1" sap:VirtualizedContainerService.HintSize="200,210" />
      <sap2010:ViewStateData Id="GenerateBillingAndPricingCDRs_1" sap:VirtualizedContainerService.HintSize="200,210" />
      <sap2010:ViewStateData Id="GenerateTrafficStatisticsForRepricing_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_3" sap:VirtualizedContainerService.HintSize="464,210" />
      <sap2010:ViewStateData Id="PrepareMainCDRsForDBApply_1" sap:VirtualizedContainerService.HintSize="200,210" />
      <sap2010:ViewStateData Id="PrepareInvalidCDRsForDBApply_1" sap:VirtualizedContainerService.HintSize="200,210" />
      <sap2010:ViewStateData Id="PrepareTrafficStatsForDBApply_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_2" sap:VirtualizedContainerService.HintSize="464,210" />
      <sap2010:ViewStateData Id="ApplyMainCDRsToDB_1" sap:VirtualizedContainerService.HintSize="200,210" />
      <sap2010:ViewStateData Id="ApplyInvalidCDRsToDB_1" sap:VirtualizedContainerService.HintSize="200,210" />
      <sap2010:ViewStateData Id="ApplyTrafficStatsToDB_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_4" sap:VirtualizedContainerService.HintSize="464,210" />
      <sap2010:ViewStateData Id="Parallel_2" sap:VirtualizedContainerService.HintSize="3026,256" />
      <sap2010:ViewStateData Id="Assign_4" sap:VirtualizedContainerService.HintSize="3026,62" />
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="3048,982">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TOne.CDRProcess.TimeRangeRepricingProcess_1" sap:VirtualizedContainerService.HintSize="3088,1062" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>