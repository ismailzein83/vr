--[runtime].[ScheduleTask]------------------------------------------------------------------------------
BEGIN
set nocount on;
;with cte_data([Id],[Name],[IsEnabled],[TaskType],[TriggerTypeId],[ActionTypeId],[TaskSettings],[OwnerId])
as (select * from (values
--//////////////////////////////////////////////////////////////////////////////////////////////////
('E647DC90-E823-4715-BC21-3BC3A13446F9','Data Source Task',0,0,'295B4FAC-DBF9-456F-855E-60D0B176F86B','B7CF41B9-F1B3-4C02-980D-B9FAFB4CFF68','{"$type":"Vanrise.Runtime.Entities.SchedulerTaskSettings, Vanrise.Runtime.Entities","TaskTriggerArgument":{"$type":"Vanrise.Runtime.Triggers.TimeTaskTrigger.Arguments.IntervalTimeTaskTriggerArgument, Vanrise.Runtime.Triggers.TimeTaskTrigger.Arguments","Interval":1.0,"IntervalType":2,"TimerTriggerTypeFQTN":"Vanrise.Runtime.Triggers.TimeTaskTrigger.IntervalTimeSchedulerTaskTrigger, Vanrise.Runtime.Triggers.TimeTaskTrigger","IgnoreSkippedIntervals":true},"StartEffDate":"2019-09-02T16:39:00"}',1)
--\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
)c([Id],[Name],[IsEnabled],[TaskType],[TriggerTypeId],[ActionTypeId],[TaskSettings],[OwnerId]))
merge	[runtime].[ScheduleTask] as t
using	cte_data as s
on		1=1 and t.[Id] = s.[Id]
when matched then
	update set
	[Name] = s.[Name],[IsEnabled] = s.[IsEnabled],[TaskType] = s.[TaskType],[TriggerTypeId] = s.[TriggerTypeId],[ActionTypeId] = s.[ActionTypeId],[TaskSettings] = s.[TaskSettings],[OwnerId] = s.[OwnerId]
when not matched by target then
	insert([Id],[Name],[IsEnabled],[TaskType],[TriggerTypeId],[ActionTypeId],[TaskSettings],[OwnerId])
	values(s.[Id],s.[Name],s.[IsEnabled],s.[TaskType],s.[TriggerTypeId],s.[ActionTypeId],s.[TaskSettings],s.[OwnerId]);
----------------------------------------------------------------------------------------------------
END

--[integration].[DataSource]----------------------------------------------------------------------------
BEGIN

set nocount on;
;with cte_data([ID],[Name],[AdapterID],[TaskId],[Settings])
as (select * from (values
--//////////////////////////////////////////////////////////////////////////////////////////////////
('62C7C1B6-B7BB-461B-8BCA-BD5E5774ED2B','Qualitynet Teles - Sample Datasource','396A4933-DF4F-49CD-9799-BF605B9F4597','E647DC90-E823-4715-BC21-3BC3A13446F9','{"$type":"Vanrise.Integration.Entities.DataSourceSettings, Vanrise.Integration.Entities","AdapterArgument":{"$type":"Vanrise.Integration.Adapters.FTPReceiveAdapter.Arguments.FTPAdapterArgument, Vanrise.Integration.Adapters.FTPReceiveAdapter.Arguments","Extension":".txt","Mask":"","Directory":"/Retail/Teles","ServerIP":"192.168.110.185","UserName":"devftpuser","Password":"P@ssw0rd","ActionAfterImport":-1,"CompressedFiles":false,"CompressionType":0,"FileCheckCriteria":0,"FileCompletenessCheckInterval":5,"MaxParallelRuntimeInstances":1},"MapperCustomCode":"Vanrise.Integration.Entities.StreamReaderImportedData importedData = ((Vanrise.Integration.Entities.StreamReaderImportedData)(data));\n            var cdrs = new List<dynamic>();\n\n            var dataRecordTypeManager = new Vanrise.GenericData.Business.DataRecordTypeManager();\n            Type cdrRuntimeType = dataRecordTypeManager.GetDataRecordRuntimeType(\"CDR\");\n            var dataRecordVanriseType = new Vanrise.GenericData.Entities.DataRecordVanriseType(\"CDR\");\n\n            System.IO.StreamReader sr = importedData.StreamReader;\n\n            string dateTimeFormat = \"yyyyMMddHHmmssfff\";\n\n            while (!sr.EndOfStream)\n            {\n                string currentLine = sr.ReadLine();\n                if (string.IsNullOrEmpty(currentLine))\n                    continue;\n\n                string[] rowData = currentLine.Split('';'');\n\n                dynamic cdr = Activator.CreateInstance(cdrRuntimeType) as dynamic;\n\n                cdr.DataSource = dataSourceId;\n                cdr.FileName = importedData.Name;\n                cdr.Call_Id = rowData[0];\n\n                string attemptDateAsString = rowData[10];\n                if (string.IsNullOrEmpty(attemptDateAsString))\n                    throw new NullReferenceException(\"Attempt date can''t be empty\");\n\n                string attemptTimeAsString = rowData[11];\n                cdr.AttemptDateTime = DateTime.ParseExact(string.Concat(attemptDateAsString, !string.IsNullOrEmpty(attemptTimeAsString) ? attemptTimeAsString : \"000000000\"), dateTimeFormat, System.Globalization.CultureInfo.InvariantCulture);\n\n                string connectDateAsString = rowData[14];\n                if (!string.IsNullOrEmpty(connectDateAsString))\n                {\n                    string connectTimeAsString = rowData[15];\n                    cdr.ConnectDateTime = DateTime.ParseExact(string.Concat(connectDateAsString, !string.IsNullOrEmpty(connectTimeAsString) ? connectTimeAsString : \"000000000\"), dateTimeFormat, System.Globalization.CultureInfo.InvariantCulture);\n                }\n\n                string disconnectDateAsString = rowData[16];\n                if (!string.IsNullOrEmpty(disconnectDateAsString))\n                {\n                    string disconnectTimeAsString = rowData[17];\n                    cdr.DisconnectDateTime = DateTime.ParseExact(string.Concat(disconnectDateAsString, !string.IsNullOrEmpty(disconnectTimeAsString) ? disconnectTimeAsString : \"000000000\"), dateTimeFormat, System.Globalization.CultureInfo.InvariantCulture);\n                }\n\n                cdr.OriginatorNumber = rowData[2];\n                cdr.TerminatorNumber = rowData[3];\n\n                string durationInMillisecondsAsString = rowData[8];\n                if (!string.IsNullOrEmpty(durationInMillisecondsAsString))\n                {\n                    if (decimal.TryParse(durationInMillisecondsAsString, out decimal durationInMilliseconds))\n                        cdr.DurationInSeconds = durationInMilliseconds / 1000;\n                }\n\n                cdr.ExtraFields = new Dictionary<string, string>();\n\n                string callStateAsString = rowData[1];\n                if (!string.IsNullOrEmpty(callStateAsString) && int.TryParse(callStateAsString, out int callStateAsInt))\n                    cdr.ExtraFields.Add(\"CallState\", Convert.ToBoolean(callStateAsInt).ToString());\n\n                string inTrunkAsString = rowData[4];\n                if (!string.IsNullOrEmpty(inTrunkAsString))\n                    cdr.ExtraFields.Add(\"InTrunk\", inTrunkAsString);\n\n                string inCircuitAsString = rowData[5];\n                if (!string.IsNullOrEmpty(inCircuitAsString))\n                    cdr.ExtraFields.Add(\"InCircuit\", inCircuitAsString);\n\n                string outTrunkAsString = rowData[6];\n                if (!string.IsNullOrEmpty(outTrunkAsString))\n                    cdr.ExtraFields.Add(\"OutTrunk\", outTrunkAsString);\n\n                string outCircuitAsString = rowData[7];\n                if (!string.IsNullOrEmpty(outCircuitAsString))\n                    cdr.ExtraFields.Add(\"OutCircuit\", outCircuitAsString);\n\n                string outDuration2AsString = rowData[9];\n                if (!string.IsNullOrEmpty(outDuration2AsString))\n                    cdr.ExtraFields.Add(\"Duration2(ms)\", outDuration2AsString);\n\n                string alertDateAsString = rowData[12];\n                if (!string.IsNullOrEmpty(alertDateAsString))\n                {\n                    string alertTimeAsString = rowData[13];\n                    cdr.ExtraFields.Add(\"AlertDateTime\", DateTime.ParseExact(string.Concat(alertDateAsString, !string.IsNullOrEmpty(alertTimeAsString) ? alertTimeAsString : \"000000000\"), dateTimeFormat, System.Globalization.CultureInfo.InvariantCulture).ToString(\"yyyy-MM-dd HH:mm:ss.fff\"));\n                }\n\n                string utcOffsetAsString = rowData[18];\n                if (!string.IsNullOrEmpty(utcOffsetAsString))\n                    cdr.ExtraFields.Add(\"UTCOffset\", utcOffsetAsString);\n\n                string sipCallIdLegAAsString = rowData[19];\n                if (!string.IsNullOrEmpty(sipCallIdLegAAsString))\n                    cdr.ExtraFields.Add(\"SIPCallIdLegA\", sipCallIdLegAAsString);\n\n                string sipCallIdLegBAsString = rowData[20];\n                if (!string.IsNullOrEmpty(sipCallIdLegBAsString))\n                    cdr.ExtraFields.Add(\"SIPCallIdLegB\", sipCallIdLegBAsString);\n\n                string causeFromAsString = rowData[21];\n                if (!string.IsNullOrEmpty(causeFromAsString))\n                    cdr.ExtraFields.Add(\"CauseFrom\", causeFromAsString);\n\n                string causeFromReleaseCodeAsString = rowData[22];\n                if (!string.IsNullOrEmpty(causeFromReleaseCodeAsString))\n                    cdr.ExtraFields.Add(\"CauseFromReleaseCode\", causeFromReleaseCodeAsString);\n\n                string causeToReleaseCodeAsString = rowData[23];\n                if (!string.IsNullOrEmpty(causeToReleaseCodeAsString))\n                    cdr.ExtraFields.Add(\"CauseToReleaseCode\", causeToReleaseCodeAsString);\n\n                string mediaErrorAsString = rowData[24];\n                if (!string.IsNullOrEmpty(mediaErrorAsString))\n                    cdr.ExtraFields.Add(\"MediaError\", mediaErrorAsString);\n\n                string lastCallReroutedAsString = rowData[25];\n                if (!string.IsNullOrEmpty(lastCallReroutedAsString) && int.TryParse(lastCallReroutedAsString, out int lastCallReroutedAsInt))\n                    cdr.ExtraFields.Add(\"LastCallRerouted\", Convert.ToBoolean(lastCallReroutedAsInt).ToString());\n\n                cdrs.Add(cdr);\n            }\n\n            if (cdrs.Count > 0)\n            {\n                long startingId;\n                Vanrise.Common.Business.IDManager.Instance.ReserveIDRange(dataRecordVanriseType, cdrs.Count, out startingId);\n                long currentCDRId = startingId;\n\n                foreach (var cdr in cdrs)\n                {\n                    cdr.ID = currentCDRId;\n                    currentCDRId++;\n                }\n\n                var batch = Vanrise.GenericData.QueueActivators.DataRecordBatch.CreateBatchFromRecords(cdrs, \"#RECORDSCOUNT# of Raw CDRs\", \"CDR\");\n                mappedBatches.Add(\"Distribute Raw CDRs Stage\", batch);\n            }\n\n            Vanrise.Integration.Entities.MappingOutput result = new Vanrise.Integration.Entities.MappingOutput();\n            result.Result = Vanrise.Integration.Entities.MappingResult.Valid;\n            LogVerbose(\"Finished\");\n\n            return result;","ExecutionFlowId":"593c32bc-5db5-4adf-9eeb-03390d725688"}')
--\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
)c([ID],[Name],[AdapterID],[TaskId],[Settings]))
merge	[integration].[DataSource] as t
using	cte_data as s
on		1=1 and t.[ID] = s.[ID]
when matched then
	update set
	[Name] = s.[Name],[AdapterID] = s.[AdapterID],[TaskId] = s.[TaskId],[Settings] = s.[Settings]
when not matched by target then
	insert([ID],[Name],[AdapterID],[TaskId],[Settings])
	values(s.[ID],s.[Name],s.[AdapterID],s.[TaskId],s.[Settings]);

----------------------------------------------------------------------------------------------------
END