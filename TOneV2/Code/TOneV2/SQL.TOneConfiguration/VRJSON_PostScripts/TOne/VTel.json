{
  "Scripts": [
    {
      "$type": "Vanrise.DevTools.Entities.GeneratedScriptItemTable, Vanrise.DevTools.Entities",
      "ConnectionId": "64a495ae-cc8d-4ee0-bd1a-bc93e35fdaa7",
      "Schema": "common",
      "TableName": "VRDevProject",
      "Note": null,
      "Settings": {
        "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItem, Vanrise.DevTools.Business",
        "ConfigId": "9837cad1-1f8f-4edf-8aab-25864c4ef842",
        "Columns": [
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "ID",
            "IsIdentifier": true,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "Name",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "AssemblyID",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "CreatedTime",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "LastModifiedTime",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          }
        ],
        "DataRows": [
          {
            "$type": "Vanrise.DevTools.Entities.GeneratedScriptItemTableRow, Vanrise.DevTools.Entities",
            "FieldValues": {
              "ID": "19beb511-06eb-43b3-aec9-cd5a89769cbe",
              "Name": "TOne_VTel",
              "AssemblyID": null,
              "CreatedTime": "2019-10-25T11:42:44.397",
              "LastModifiedTime": "2019-10-25T11:42:44.397"
            }
          }
        ],
        "Variables": null,
        "LastWhereCondition": "ID = '19beb511-06eb-43b3-aec9-cd5a89769cbe'",
        "LastJoinStatement": null,
        "IsIdentity": false
      },
      "Title": "Merge"
    },
    {
      "$type": "Vanrise.DevTools.Entities.GeneratedScriptItemTable, Vanrise.DevTools.Entities",
      "ConnectionId": "64a495ae-cc8d-4ee0-bd1a-bc93e35fdaa7",
      "Schema": "integration",
      "TableName": "DataSource",
      "Note": null,
      "Settings": {
        "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItem, Vanrise.DevTools.Business",
        "ConfigId": "9837cad1-1f8f-4edf-8aab-25864c4ef842",
        "Columns": [
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "ID",
            "IsIdentifier": true,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "DevProjectID",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "Name",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "AdapterID",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "AdapterState",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "TaskId",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "Settings",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "LastModifiedTime",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "CreatedTime",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          }
        ],
        "DataRows": [
          {
            "$type": "Vanrise.DevTools.Entities.GeneratedScriptItemTableRow, Vanrise.DevTools.Entities",
            "FieldValues": {
              "ID": "133f2a38-05e7-48eb-9a2b-f2c076d211ad",
              "DevProjectID": "19beb511-06eb-43b3-aec9-cd5a89769cbe",
              "Name": "Import Cataleya CDR - Sample DataSource",
              "AdapterID": "396a4933-df4f-49cd-9799-bf605b9f4597",
              "AdapterState": "null",
              "TaskId": "c3a4d5cb-da48-4444-ba42-7669b8f9c23e",
              "Settings": "{\"$type\":\"Vanrise.Integration.Entities.DataSourceSettings, Vanrise.Integration.Entities\",\"AdapterArgument\":{\"$type\":\"Vanrise.Integration.Adapters.FTPReceiveAdapter.Arguments.FTPAdapterArgument, Vanrise.Integration.Adapters.FTPReceiveAdapter.Arguments\",\"Extension\":\".dat\",\"Mask\":\"\",\"Directory\":\"/TONE/Cataleya\",\"ServerIP\":\"192.168.110.185\",\"UserName\":\"devftpuser\",\"Password\":\"P@ssw0rd\",\"ActionAfterImport\":0,\"CompressedFiles\":false,\"CompressionType\":0,\"FileCheckCriteria\":0,\"FileCompletenessCheckInterval\":5,\"MaxParallelRuntimeInstances\":1},\"MapperCustomCode\":\"var dataRecordTypeManager = new Vanrise.GenericData.Business.DataRecordTypeManager();\\n            Type cdrRuntimeType = dataRecordTypeManager.GetDataRecordRuntimeType(\\\"CDR\\\");\\n\\n            string dateTimeFormat = \\\"yyyyMMddHHmmssfff\\\";\\n\\n            List<string> reroutedCDRFields = new List<string>()\\n            {\\n                \\\"zone_id\\\", \\\"call_id\\\", \\\"zone_name\\\", \\\"sip_remote_addr\\\", \\\"inviting_ts\\\", \\\"response_ts\\\", \\\"failure_reason\\\",\\n                \\\"reason_phrase\\\", \\\"reason_hdr\\\", \\\"warning_hdr\\\", \\\"tgid\\\", \\\"calling_party\\\", \\\"pi\\\", \\\"extra_data\\\"\\n            };\\n\\n            var cdrs = new List<dynamic>();\\n\\n            StreamReaderImportedData importedData = ((StreamReaderImportedData)(data));\\n            System.IO.StreamReader sr = importedData.StreamReader;\\n\\n            string currentLine = sr.ReadLine();\\n            if (!string.IsNullOrEmpty(currentLine))\\n            {\\n                currentLine = currentLine.Replace(\\\"number_of_cdrs=\\\", \\\"\\\");\\n\\n                int numberOfCdrs;\\n                if (!int.TryParse(currentLine, out numberOfCdrs))\\n                    throw new Exception($\\\"Number of CDRs: '{currentLine}' is invalid\\\");\\n\\n                for (int i = 0; i < numberOfCdrs; i++)\\n                {\\n                    currentLine = sr.ReadLine();\\n                    string[] fields = currentLine.Split(',');\\n\\n                    dynamic cdr = Activator.CreateInstance(cdrRuntimeType) as dynamic;\\n                    cdr.SwitchId = 1;\\n\\n                    long idOnSwitch;\\n                    if (long.TryParse(fields[0], out idOnSwitch))\\n                        cdr.IDonSwitch = idOnSwitch;\\n\\n                    DateTime attemptDateTime;\\n                    if (DateTime.TryParseExact(fields[1], dateTimeFormat, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out attemptDateTime))\\n                        cdr.AttemptDateTime = attemptDateTime;\\n\\n                    DateTime alertDateTime;\\n                    if (DateTime.TryParseExact(fields[2], dateTimeFormat, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out alertDateTime))\\n                        cdr.AlertDateTime = alertDateTime;\\n\\n                    DateTime connectDateTime;\\n                    if (DateTime.TryParseExact(fields[3], dateTimeFormat, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out connectDateTime))\\n                        cdr.ConnectDateTime = connectDateTime;\\n\\n                    DateTime disconnectDateTime;\\n                    if (DateTime.TryParseExact(fields[4], dateTimeFormat, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out disconnectDateTime))\\n                        cdr.DisconnectDateTime = disconnectDateTime;\\n\\n                    cdr.InCarrier = fields[5];\\n                    cdr.InTrunk = fields[6];\\n                    cdr.OutCarrier = fields[7];\\n                    cdr.OutTrunk = fields[8];\\n\\n                    cdr.CGPN = fields[14];\\n                    cdr.CDPN = fields[15];\\n                    cdr.CDPNOut = fields[15];\\n                    cdr.CDPNIn = null;\\n\\n                    if (!string.IsNullOrEmpty(fields[16]))\\n                    {\\n                        decimal durationInSeconds;\\n                        if (!decimal.TryParse(fields[16], out durationInSeconds))\\n                            throw new Exception($\\\"DurationInSeconds '{fields[16]}' is invalid\\\");\\n\\n                        cdr.DurationInSeconds = durationInSeconds;\\n                    }\\n\\n                    cdr.InIP = fields[18];\\n                    cdr.OutIP = fields[19];\\n\\n                    switch (fields[21])\\n                    {\\n                        case \\\"1\\\": cdr.CauseFrom = cdr.CauseTo = \\\"A side\\\"; break;\\n                        case \\\"2\\\": cdr.CauseFrom = cdr.CauseTo = \\\"B side\\\"; break;\\n                        case \\\"3\\\": cdr.CauseFrom = cdr.CauseTo = \\\"from switch\\\"; break;\\n                        default: cdr.CauseFrom = cdr.CauseTo = null; break;\\n                    }\\n\\n                    cdr.CauseFromReleaseCode = fields[27];\\n                    cdr.CauseToReleaseCode = fields[28];\\n                    cdr.Tag = importedData.Name;\\n                    cdr.SIP = \\\"YES\\\";\\n                    cdr.IsRerouted = false;\\n\\n                    Dictionary<string, string> extraFields = new Dictionary<string, string>();\\n                    extraFields[\\\"routelist_id\\\"] = fields[22];\\n                    extraFields[\\\"routelist_name\\\"] = fields[23];\\n                    extraFields[\\\"route_priority\\\"] = fields[24];\\n                    extraFields[\\\"trace_id\\\"] = fields[25];\\n                    extraFields[\\\"named_params\\\"] = fields[26];\\n                    cdr.ExtraFields = extraFields;\\n\\n                    string reroutedCDRText = fields[29];\\n                    if (!string.IsNullOrEmpty(reroutedCDRText))\\n                    {\\n                        int index = 29;\\n                        while (true)\\n                        {\\n                            reroutedCDRText = fields[index];\\n                            if (!reroutedCDRText.Contains(\\\"zone_id\\\"))\\n                                break;\\n\\n                            dynamic reroutedCDR = Activator.CreateInstance(cdrRuntimeType) as dynamic;\\n                            reroutedCDR.SwitchId = cdr.SwitchId;\\n                            reroutedCDR.IDonSwitch = cdr.IDonSwitch;\\n                            reroutedCDR.ConnectDateTime = cdr.ConnectDateTime;\\n                            reroutedCDR.DisconnectDateTime = cdr.DisconnectDateTime;\\n                            reroutedCDR.DurationInSeconds = cdr.DurationInSeconds;\\n                            reroutedCDR.CGPN = cdr.CGPN;\\n                            reroutedCDR.CDPN = cdr.CDPN;\\n                            reroutedCDR.CDPNIn = cdr.CDPNIn;\\n                            reroutedCDR.CDPNOut = cdr.CDPNOut;\\n                            reroutedCDR.InCarrier = cdr.InCarrier;\\n                            reroutedCDR.InTrunk = cdr.InTrunk;\\n                            reroutedCDR.InIP = cdr.InIP;\\n                            reroutedCDR.CauseFrom = cdr.CauseFrom;\\n                            reroutedCDR.CauseTo = cdr.CauseTo;\\n                            reroutedCDR.CauseFromReleaseCode = cdr.CauseFromReleaseCode;\\n                            reroutedCDR.Tag = cdr.Tag;\\n                            reroutedCDR.SIP = cdr.SIP;\\n                            reroutedCDR.ExtraFields = cdr.ExtraFields;\\n                            reroutedCDR.IsRerouted = true;\\n\\n                            Dictionary<int, string> fieldNameByIndex = new Dictionary<int, string>();\\n                            Dictionary<string, string> fieldValueByName = new Dictionary<string, string>();\\n\\n                            foreach (var field in reroutedCDRFields)\\n                                fieldNameByIndex.Add(reroutedCDRText.IndexOf(field), field);\\n\\n                            foreach (var kvp in fieldNameByIndex)\\n                            {\\n                                int fieldNameIndex = kvp.Key;\\n                                string fieldName = kvp.Value;\\n\\n                                int startIndex = fieldNameIndex + fieldName.Length + 1;\\n                                int endIndex = startIndex;\\n                                while (true)\\n                                {\\n                                    if (fieldNameByIndex.ContainsKey(endIndex) || endIndex > reroutedCDRText.Length)\\n                                        break;\\n\\n                                    endIndex++;\\n                                }\\n                                endIndex--;\\n\\n                                if (endIndex > startIndex)\\n                                    fieldValueByName.Add(fieldName, reroutedCDRText.Substring(startIndex, endIndex - startIndex));\\n                                else\\n                                    fieldValueByName.Add(fieldName, null);\\n                            }\\n\\n                            reroutedCDR.OutCarrier = fieldValueByName[\\\"zone_id\\\"];\\n                            reroutedCDR.OutTrunk = fieldValueByName[\\\"zone_name\\\"];\\n                            reroutedCDR.OutIP = fieldValueByName[\\\"sip_remote_addr\\\"];\\n                            reroutedCDR.CauseToReleaseCode = fieldValueByName[\\\"reason_phrase\\\"];\\n\\n                            string attemptDateTimeField = fieldValueByName[\\\"inviting_ts\\\"];\\n                            if (!string.IsNullOrEmpty(attemptDateTimeField))\\n                            {\\n                                double reroutedCDRAttemptUnixTime;\\n                                if (!double.TryParse(attemptDateTimeField, out reroutedCDRAttemptUnixTime))\\n                                    throw new Exception($\\\"inviting_ts '{attemptDateTimeField}' is invalid\\\");\\n\\n                                reroutedCDR.AttemptDateTime = Vanrise.Common.Utilities.ConverUnixTimeToDateTime(reroutedCDRAttemptUnixTime);\\n                            }\\n\\n                            string alertDateTimeField = fieldValueByName[\\\"response_ts\\\"];\\n                            if (!string.IsNullOrEmpty(alertDateTimeField))\\n                            {\\n                                double reroutedCDRAlertUnixTime;\\n                                if (!double.TryParse(alertDateTimeField, out reroutedCDRAlertUnixTime))\\n                                    throw new Exception($\\\"response_ts '{alertDateTimeField}' is invalid\\\");\\n\\n                                reroutedCDR.AlertDateTime = Vanrise.Common.Utilities.ConverUnixTimeToDateTime(reroutedCDRAlertUnixTime);\\n                            }\\n\\n                            cdrs.Add(reroutedCDR);\\n\\n                            index++;\\n                        }\\n                    }\\n\\n                    cdrs.Add(cdr);\\n                }\\n            }\\n\\n            long startingId;\\n            if (cdrs.Count > 0)\\n            {\\n                var dataRecordVanriseType = new Vanrise.GenericData.Entities.DataRecordVanriseType(\\\"CDR\\\");\\n                Vanrise.Common.Business.IDManager.Instance.ReserveIDRange(dataRecordVanriseType, cdrs.Count, out startingId);\\n\\n                foreach (dynamic cdr in cdrs)\\n                    cdr.Id = startingId++;\\n\\n                var batch = Vanrise.GenericData.QueueActivators.DataRecordBatch.CreateBatchFromRecords(cdrs, \\\"#RECORDSCOUNT# of Raw CDRs\\\", \\\"CDR\\\");\\n                mappedBatches.Add(\\\"Distribute Raw CDRs Stage\\\", batch);\\n            }\\n\\n            MappingOutput result = new MappingOutput();\\n            result.Result = MappingResult.Valid;\\n            return result;\",\"ExecutionFlowId\":\"2799f9d0-8b71-47a1-861f-ab7c2850e8fc\"}",
              "LastModifiedTime": "2019-10-15T15:26:23.367",
              "CreatedTime": "2019-10-15T15:26:23.367"
            }
          }
        ],
        "Variables": null,
        "LastWhereCondition": "DevProjectID = '19beb511-06eb-43b3-aec9-cd5a89769cbe'",
        "LastJoinStatement": null,
        "IsIdentity": false
      },
      "Title": "Merge"
    },
    {
      "$type": "Vanrise.DevTools.Entities.GeneratedScriptItemTable, Vanrise.DevTools.Entities",
      "ConnectionId": "64a495ae-cc8d-4ee0-bd1a-bc93e35fdaa7",
      "Schema": "runtime",
      "TableName": "ScheduleTask",
      "Note": null,
      "Settings": {
        "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItem, Vanrise.DevTools.Business",
        "ConfigId": "9837cad1-1f8f-4edf-8aab-25864c4ef842",
        "Columns": [
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "Id",
            "IsIdentifier": true,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "DevProjectID",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "Name",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "IsEnabled",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "TaskType",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "TriggerTypeId",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "ActionTypeId",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "TaskSettings",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "OwnerId",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "CreatedTime",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          },
          {
            "$type": "Vanrise.DevTools.Business.MergeGeneratedScriptItemColumn, Vanrise.DevTools.Business",
            "ColumnName": "LastModifiedTime",
            "IsIdentifier": false,
            "IncludeInInsert": true,
            "IncludeInUpdate": true
          }
        ],
        "DataRows": [
          {
            "$type": "Vanrise.DevTools.Entities.GeneratedScriptItemTableRow, Vanrise.DevTools.Entities",
            "FieldValues": {
              "Id": "c3a4d5cb-da48-4444-ba42-7669b8f9c23e",
              "DevProjectID": "19beb511-06eb-43b3-aec9-cd5a89769cbe",
              "Name": "Data Source Task",
              "IsEnabled": true,
              "TaskType": 0,
              "TriggerTypeId": "295b4fac-dbf9-456f-855e-60d0b176f86b",
              "ActionTypeId": "b7cf41b9-f1b3-4c02-980d-b9fafb4cff68",
              "TaskSettings": "{\"$type\":\"Vanrise.Runtime.Entities.SchedulerTaskSettings, Vanrise.Runtime.Entities\",\"TaskTriggerArgument\":{\"$type\":\"Vanrise.Runtime.Triggers.TimeTaskTrigger.Arguments.IntervalTimeTaskTriggerArgument, Vanrise.Runtime.Triggers.TimeTaskTrigger.Arguments\",\"Interval\":1.0,\"IntervalType\":2,\"TimerTriggerTypeFQTN\":\"Vanrise.Runtime.Triggers.TimeTaskTrigger.IntervalTimeSchedulerTaskTrigger, Vanrise.Runtime.Triggers.TimeTaskTrigger\",\"IgnoreSkippedIntervals\":true},\"StartEffDate\":\"2019-10-15T15:24:24.63\"}",
              "OwnerId": -1,
              "CreatedTime": "2019-10-15T15:26:23.167",
              "LastModifiedTime": "2019-10-25T11:14:08.233"
            }
          }
        ],
        "Variables": null,
        "LastWhereCondition": "DevProjectID = '19beb511-06eb-43b3-aec9-cd5a89769cbe'",
        "LastJoinStatement": null,
        "IsIdentity": false
      },
      "Title": "Merge"
    }
  ]
}